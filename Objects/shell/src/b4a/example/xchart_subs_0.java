package b4a.example;

import anywheresoftware.b4a.BA;
import anywheresoftware.b4a.pc.*;

public class xchart_subs_0 {


public static RemoteObject  _addbar(RemoteObject __ref,RemoteObject _name,RemoteObject _barcolor) throws Exception{
try {
		Debug.PushSubsStack("AddBar (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1201);
if (RapidSub.canDelegate("addbar")) { return __ref.runUserSub(false, "xchart","addbar", __ref, _name, _barcolor);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("BarColor", _barcolor);
 BA.debugLineNum = 1201;BA.debugLine="Public Sub AddBar(Name As String, BarColor As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1202;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1203;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1206;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1207;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1208;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1209;BA.debugLine="ID.Color = BarColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_barcolor);
 BA.debugLineNum = 1210;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1211;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addbarmultiplepoint(RemoteObject __ref,RemoteObject _x,RemoteObject _yarray) throws Exception{
try {
		Debug.PushSubsStack("AddBarMultiplePoint (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1215);
if (RapidSub.canDelegate("addbarmultiplepoint")) { return __ref.runUserSub(false, "xchart","addbarmultiplepoint", __ref, _x, _yarray);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
Debug.locals.put("X", _x);
Debug.locals.put("YArray", _yarray);
 BA.debugLineNum = 1215;BA.debugLine="Public Sub AddBarMultiplePoint (X As String, YArra";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1216;BA.debugLine="If Points.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1217;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1219;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1220;BA.debugLine="PD.Initialize";
Debug.JustUpdateDeviceLine();
_pd.runVoidMethod ("Initialize");
 BA.debugLineNum = 1221;BA.debugLine="PD.X = X";
Debug.JustUpdateDeviceLine();
_pd.setField ("X" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 1222;BA.debugLine="PD.YArray = YArray";
Debug.JustUpdateDeviceLine();
_pd.setField ("YArray" /*RemoteObject*/ ,_yarray);
 BA.debugLineNum = 1223;BA.debugLine="PD.ShowTick = True";
Debug.JustUpdateDeviceLine();
_pd.setField ("ShowTick" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 1224;BA.debugLine="Points.Add(PD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_pd)));
 BA.debugLineNum = 1225;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addbarpointdata(RemoteObject __ref,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("AddBarPointData (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1229);
if (RapidSub.canDelegate("addbarpointdata")) { return __ref.runUserSub(false, "xchart","addbarpointdata", __ref, _x, _y);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _yarray = null;
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
 BA.debugLineNum = 1229;BA.debugLine="Public Sub AddBarPointData (X As String, Y As Doub";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1230;BA.debugLine="If Points.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1231;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1233;BA.debugLine="Dim PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1234;BA.debugLine="PD.Initialize";
Debug.JustUpdateDeviceLine();
_pd.runVoidMethod ("Initialize");
 BA.debugLineNum = 1235;BA.debugLine="PD.X = X";
Debug.JustUpdateDeviceLine();
_pd.setField ("X" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 1236;BA.debugLine="Private YArray(1) As Double";
Debug.JustUpdateDeviceLine();
_yarray = RemoteObject.createNewArray ("double", new int[] {1}, new Object[]{});Debug.locals.put("YArray", _yarray);
 BA.debugLineNum = 1237;BA.debugLine="YArray(0) = Y";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_y,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1238;BA.debugLine="PD.YArray = YArray";
Debug.JustUpdateDeviceLine();
_pd.setField ("YArray" /*RemoteObject*/ ,_yarray);
 BA.debugLineNum = 1239;BA.debugLine="PD.ShowTick = True";
Debug.JustUpdateDeviceLine();
_pd.setField ("ShowTick" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 1240;BA.debugLine="Points.Add(PD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_pd)));
 BA.debugLineNum = 1241;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addbubble(RemoteObject __ref,RemoteObject _serieindex,RemoteObject _x,RemoteObject _y,RemoteObject _value) throws Exception{
try {
		Debug.PushSubsStack("AddBubble (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1568);
if (RapidSub.canDelegate("addbubble")) { return __ref.runUserSub(false, "xchart","addbubble", __ref, _serieindex, _x, _y, _value);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _yxz = null;
Debug.locals.put("SerieIndex", _serieindex);
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
Debug.locals.put("Value", _value);
 BA.debugLineNum = 1568;BA.debugLine="Public Sub AddBubble(SerieIndex As Int, X As Doubl";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1569;BA.debugLine="If SerieIndex < 0 Or SerieIndex > Items.Size Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_serieindex,BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean(">",_serieindex,BA.numberCast(double.class, __ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize")))) { 
 BA.debugLineNum = 1570;BA.debugLine="Log(\"Index out of range\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","96160386",RemoteObject.createImmutable("Index out of range"),0);
 BA.debugLineNum = 1571;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 1574;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1575;BA.debugLine="Private YXZ(3) As Double";
Debug.JustUpdateDeviceLine();
_yxz = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});Debug.locals.put("YXZ", _yxz);
 BA.debugLineNum = 1576;BA.debugLine="YXZ(0) = X";
Debug.JustUpdateDeviceLine();
_yxz.setArrayElement (_x,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1577;BA.debugLine="YXZ(1) = Y";
Debug.JustUpdateDeviceLine();
_yxz.setArrayElement (_y,BA.numberCast(int.class, 1));
 BA.debugLineNum = 1578;BA.debugLine="YXZ(2) = Value";
Debug.JustUpdateDeviceLine();
_yxz.setArrayElement (_value,BA.numberCast(int.class, 2));
 BA.debugLineNum = 1579;BA.debugLine="ID = Items.Get(SerieIndex)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_serieindex)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 1580;BA.debugLine="If ID.YXArray.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1581;BA.debugLine="ID.YXArray.Initialize";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1583;BA.debugLine="ID.YXArray.Add(YXZ)";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_yxz)));
 BA.debugLineNum = 1584;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addbubbleseries(RemoteObject __ref,RemoteObject _name,RemoteObject _bubblecolor) throws Exception{
try {
		Debug.PushSubsStack("AddBubbleSeries (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1550);
if (RapidSub.canDelegate("addbubbleseries")) { return __ref.runUserSub(false, "xchart","addbubbleseries", __ref, _name, _bubblecolor);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("BubbleColor", _bubblecolor);
 BA.debugLineNum = 1550;BA.debugLine="Public Sub AddBubbleSeries(Name As String, BubbleC";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1551;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1552;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1554;BA.debugLine="If BubbleColor = 0 Then BubbleColor = xui.Color_R";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_bubblecolor,BA.numberCast(double.class, 0))) { 
_bubblecolor = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))));Debug.locals.put("BubbleColor", _bubblecolor);};
 BA.debugLineNum = 1556;BA.debugLine="Dim ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1557;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1558;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1559;BA.debugLine="ID.Color = BubbleColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_bubblecolor);
 BA.debugLineNum = 1560;BA.debugLine="ID.YXArray.Initialize	'???";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 1561;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1562;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addbubblesingle(RemoteObject __ref,RemoteObject _name,RemoteObject _x,RemoteObject _y,RemoteObject _value,RemoteObject _bubblecolor) throws Exception{
try {
		Debug.PushSubsStack("AddBubbleSingle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1591);
if (RapidSub.canDelegate("addbubblesingle")) { return __ref.runUserSub(false, "xchart","addbubblesingle", __ref, _name, _x, _y, _value, _bubblecolor);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _yxz = null;
Debug.locals.put("Name", _name);
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
Debug.locals.put("Value", _value);
Debug.locals.put("BubbleColor", _bubblecolor);
 BA.debugLineNum = 1591;BA.debugLine="Public Sub AddBubbleSingle(Name As String, X As Do";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1592;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1593;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1595;BA.debugLine="If BubbleColor = 0 Then BubbleColor = xui.Color_R";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_bubblecolor,BA.numberCast(double.class, 0))) { 
_bubblecolor = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))));Debug.locals.put("BubbleColor", _bubblecolor);};
 BA.debugLineNum = 1597;BA.debugLine="Dim ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1598;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1599;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1600;BA.debugLine="ID.Color = BubbleColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_bubblecolor);
 BA.debugLineNum = 1602;BA.debugLine="Private YXZ(3) As Double";
Debug.JustUpdateDeviceLine();
_yxz = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});Debug.locals.put("YXZ", _yxz);
 BA.debugLineNum = 1603;BA.debugLine="YXZ(0) = X";
Debug.JustUpdateDeviceLine();
_yxz.setArrayElement (_x,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1604;BA.debugLine="YXZ(1) = Y";
Debug.JustUpdateDeviceLine();
_yxz.setArrayElement (_y,BA.numberCast(int.class, 1));
 BA.debugLineNum = 1605;BA.debugLine="YXZ(2) = Value";
Debug.JustUpdateDeviceLine();
_yxz.setArrayElement (_value,BA.numberCast(int.class, 2));
 BA.debugLineNum = 1606;BA.debugLine="If ID.YXArray.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1607;BA.debugLine="ID.YXArray.Initialize";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1609;BA.debugLine="ID.YXArray.Add(YXZ)";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_yxz)));
 BA.debugLineNum = 1611;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1612;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addcandlepoint(RemoteObject __ref,RemoteObject _x,RemoteObject _open,RemoteObject _high,RemoteObject _low,RemoteObject _close,RemoteObject _showtick) throws Exception{
try {
		Debug.PushSubsStack("AddCandlePoint (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1459);
if (RapidSub.canDelegate("addcandlepoint")) { return __ref.runUserSub(false, "xchart","addcandlepoint", __ref, _x, _open, _high, _low, _close, _showtick);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _yarray = null;
Debug.locals.put("X", _x);
Debug.locals.put("Open", _open);
Debug.locals.put("High", _high);
Debug.locals.put("Low", _low);
Debug.locals.put("Close", _close);
Debug.locals.put("ShowTick", _showtick);
 BA.debugLineNum = 1459;BA.debugLine="Public Sub AddCandlePoint(X As String, Open As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1460;BA.debugLine="If Points.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1461;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1463;BA.debugLine="Dim PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1464;BA.debugLine="PD.Initialize";
Debug.JustUpdateDeviceLine();
_pd.runVoidMethod ("Initialize");
 BA.debugLineNum = 1465;BA.debugLine="PD.X = X";
Debug.JustUpdateDeviceLine();
_pd.setField ("X" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 1466;BA.debugLine="Private YArray(5) As Double";
Debug.JustUpdateDeviceLine();
_yarray = RemoteObject.createNewArray ("double", new int[] {5}, new Object[]{});Debug.locals.put("YArray", _yarray);
 BA.debugLineNum = 1467;BA.debugLine="YArray(0) = Open";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_open,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1468;BA.debugLine="YArray(1) = High";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_high,BA.numberCast(int.class, 1));
 BA.debugLineNum = 1469;BA.debugLine="YArray(2) = Low";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_low,BA.numberCast(int.class, 2));
 BA.debugLineNum = 1470;BA.debugLine="YArray(3) = Close";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_close,BA.numberCast(int.class, 3));
 BA.debugLineNum = 1471;BA.debugLine="YArray(4) = 0";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 4));
 BA.debugLineNum = 1472;BA.debugLine="PD.YArray = YArray";
Debug.JustUpdateDeviceLine();
_pd.setField ("YArray" /*RemoteObject*/ ,_yarray);
 BA.debugLineNum = 1473;BA.debugLine="PD.ShowTick = ShowTick";
Debug.JustUpdateDeviceLine();
_pd.setField ("ShowTick" /*RemoteObject*/ ,_showtick);
 BA.debugLineNum = 1474;BA.debugLine="Points.Add(PD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_pd)));
 BA.debugLineNum = 1475;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addcandlepoint2(RemoteObject __ref,RemoteObject _x,RemoteObject _open,RemoteObject _high,RemoteObject _low,RemoteObject _close,RemoteObject _volume,RemoteObject _showtick) throws Exception{
try {
		Debug.PushSubsStack("AddCandlePoint2 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1480);
if (RapidSub.canDelegate("addcandlepoint2")) { return __ref.runUserSub(false, "xchart","addcandlepoint2", __ref, _x, _open, _high, _low, _close, _volume, _showtick);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _yarray = null;
Debug.locals.put("X", _x);
Debug.locals.put("Open", _open);
Debug.locals.put("High", _high);
Debug.locals.put("Low", _low);
Debug.locals.put("Close", _close);
Debug.locals.put("Volume", _volume);
Debug.locals.put("ShowTick", _showtick);
 BA.debugLineNum = 1480;BA.debugLine="Public Sub AddCandlePoint2(X As String, Open As Do";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1481;BA.debugLine="If Points.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1482;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1484;BA.debugLine="Dim PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1485;BA.debugLine="PD.Initialize";
Debug.JustUpdateDeviceLine();
_pd.runVoidMethod ("Initialize");
 BA.debugLineNum = 1486;BA.debugLine="PD.X = X";
Debug.JustUpdateDeviceLine();
_pd.setField ("X" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 1487;BA.debugLine="Private YArray(5) As Double";
Debug.JustUpdateDeviceLine();
_yarray = RemoteObject.createNewArray ("double", new int[] {5}, new Object[]{});Debug.locals.put("YArray", _yarray);
 BA.debugLineNum = 1488;BA.debugLine="YArray(0) = Open";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_open,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1489;BA.debugLine="YArray(1) = High";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_high,BA.numberCast(int.class, 1));
 BA.debugLineNum = 1490;BA.debugLine="YArray(2) = Low";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_low,BA.numberCast(int.class, 2));
 BA.debugLineNum = 1491;BA.debugLine="YArray(3) = Close";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_close,BA.numberCast(int.class, 3));
 BA.debugLineNum = 1492;BA.debugLine="YArray(4) = Volume";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_volume,BA.numberCast(int.class, 4));
 BA.debugLineNum = 1493;BA.debugLine="PD.YArray = YArray";
Debug.JustUpdateDeviceLine();
_pd.setField ("YArray" /*RemoteObject*/ ,_yarray);
 BA.debugLineNum = 1494;BA.debugLine="PD.ShowTick = ShowTick";
Debug.JustUpdateDeviceLine();
_pd.setField ("ShowTick" /*RemoteObject*/ ,_showtick);
 BA.debugLineNum = 1495;BA.debugLine="Points.Add(PD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_pd)));
 BA.debugLineNum = 1496;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addhorizontalline(RemoteObject __ref,RemoteObject _value,RemoteObject _color,RemoteObject _strokewidth,RemoteObject _displayvalue) throws Exception{
try {
		Debug.PushSubsStack("AddHorizontalLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1501);
if (RapidSub.canDelegate("addhorizontalline")) { return __ref.runUserSub(false, "xchart","addhorizontalline", __ref, _value, _color, _strokewidth, _displayvalue);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _hl = RemoteObject.declareNull("b4a.example.xchart._hline");
Debug.locals.put("Value", _value);
Debug.locals.put("Color", _color);
Debug.locals.put("StrokeWidth", _strokewidth);
Debug.locals.put("DisplayValue", _displayvalue);
 BA.debugLineNum = 1501;BA.debugLine="Public Sub AddHorizontalLine(Value As Double, Colo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1502;BA.debugLine="Private i As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
 BA.debugLineNum = 1505;BA.debugLine="For i = 0 To HLines.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step2 = 1;
final int limit2 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step2 > 0 && _i.<Integer>get().intValue() <= limit2) || (step2 < 0 && _i.<Integer>get().intValue() >= limit2) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step2))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1506;BA.debugLine="Private HL As HLine";
Debug.JustUpdateDeviceLine();
_hl = RemoteObject.createNew ("b4a.example.xchart._hline");Debug.locals.put("HL", _hl);
 BA.debugLineNum = 1507;BA.debugLine="HL = HLines.Get(i)";
Debug.JustUpdateDeviceLine();
_hl = (__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("HL", _hl);
 BA.debugLineNum = 1508;BA.debugLine="If HL.Value = Value Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_hl.getField(true,"Value" /*RemoteObject*/ ),_value)) { 
 BA.debugLineNum = 1509;BA.debugLine="HL.Color = Color";
Debug.JustUpdateDeviceLine();
_hl.setField ("Color" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 1510;BA.debugLine="HL.StrokeWidth = StrokeWidth";
Debug.JustUpdateDeviceLine();
_hl.setField ("StrokeWidth" /*RemoteObject*/ ,_strokewidth);
 BA.debugLineNum = 1511;BA.debugLine="HL.DisplayValue = DisplayValue";
Debug.JustUpdateDeviceLine();
_hl.setField ("DisplayValue" /*RemoteObject*/ ,_displayvalue);
 BA.debugLineNum = 1512;BA.debugLine="HLines.Set(i, HL)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_hlines" /*RemoteObject*/ ).runVoidMethod ("Set",(Object)(_i),(Object)((_hl)));
 BA.debugLineNum = 1513;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 1518;BA.debugLine="If i = HLines.Size Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, __ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize")))) { 
 BA.debugLineNum = 1519;BA.debugLine="Private HL As HLine";
Debug.JustUpdateDeviceLine();
_hl = RemoteObject.createNew ("b4a.example.xchart._hline");Debug.locals.put("HL", _hl);
 BA.debugLineNum = 1520;BA.debugLine="HL.Value = Value";
Debug.JustUpdateDeviceLine();
_hl.setField ("Value" /*RemoteObject*/ ,_value);
 BA.debugLineNum = 1521;BA.debugLine="HL.Color = Color";
Debug.JustUpdateDeviceLine();
_hl.setField ("Color" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 1522;BA.debugLine="HL.StrokeWidth = StrokeWidth";
Debug.JustUpdateDeviceLine();
_hl.setField ("StrokeWidth" /*RemoteObject*/ ,_strokewidth);
 BA.debugLineNum = 1523;BA.debugLine="HL.DisplayValue = DisplayValue";
Debug.JustUpdateDeviceLine();
_hl.setField ("DisplayValue" /*RemoteObject*/ ,_displayvalue);
 BA.debugLineNum = 1524;BA.debugLine="HLines.Add(HL)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_hlines" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_hl)));
 };
 BA.debugLineNum = 1526;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addline(RemoteObject __ref,RemoteObject _name,RemoteObject _linecolor) throws Exception{
try {
		Debug.PushSubsStack("AddLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1296);
if (RapidSub.canDelegate("addline")) { return __ref.runUserSub(false, "xchart","addline", __ref, _name, _linecolor);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("LineColor", _linecolor);
 BA.debugLineNum = 1296;BA.debugLine="Public Sub AddLine(Name As String, LineColor As In";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1297;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1298;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1300;BA.debugLine="If LineColor = 0 Then LineColor = xui.Color_RGB(R";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_linecolor,BA.numberCast(double.class, 0))) { 
_linecolor = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))));Debug.locals.put("LineColor", _linecolor);};
 BA.debugLineNum = 1302;BA.debugLine="Dim ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1303;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1304;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1305;BA.debugLine="ID.Color = LineColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_linecolor);
 BA.debugLineNum = 1306;BA.debugLine="ID.StrokeWidth = 2dip";
Debug.JustUpdateDeviceLine();
_id.setField ("StrokeWidth" /*RemoteObject*/ ,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))));
 BA.debugLineNum = 1307;BA.debugLine="ID.PointType = \"NONE\"";
Debug.JustUpdateDeviceLine();
_id.setField ("PointType" /*RemoteObject*/ ,BA.ObjectToString("NONE"));
 BA.debugLineNum = 1308;BA.debugLine="ID.Filled = False";
Debug.JustUpdateDeviceLine();
_id.setField ("Filled" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 1309;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1310;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addline2(RemoteObject __ref,RemoteObject _name,RemoteObject _linecolor,RemoteObject _strokewidth,RemoteObject _pointtype,RemoteObject _pointfilled,RemoteObject _pointcolor) throws Exception{
try {
		Debug.PushSubsStack("AddLine2 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1316);
if (RapidSub.canDelegate("addline2")) { return __ref.runUserSub(false, "xchart","addline2", __ref, _name, _linecolor, _strokewidth, _pointtype, _pointfilled, _pointcolor);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("LineColor", _linecolor);
Debug.locals.put("StrokeWidth", _strokewidth);
Debug.locals.put("PointType", _pointtype);
Debug.locals.put("PointFilled", _pointfilled);
Debug.locals.put("PointColor", _pointcolor);
 BA.debugLineNum = 1316;BA.debugLine="Public Sub AddLine2(Name As String, LineColor As I";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1317;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1318;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1320;BA.debugLine="If LineColor = 0 Then LineColor = xui.Color_RGB(R";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_linecolor,BA.numberCast(double.class, 0))) { 
_linecolor = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))));Debug.locals.put("LineColor", _linecolor);};
 BA.debugLineNum = 1322;BA.debugLine="Dim ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1323;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1324;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1325;BA.debugLine="ID.Color = LineColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_linecolor);
 BA.debugLineNum = 1326;BA.debugLine="ID.StrokeWidth = StrokeWidth";
Debug.JustUpdateDeviceLine();
_id.setField ("StrokeWidth" /*RemoteObject*/ ,_strokewidth);
 BA.debugLineNum = 1327;BA.debugLine="ID.PointType = PointType";
Debug.JustUpdateDeviceLine();
_id.setField ("PointType" /*RemoteObject*/ ,_pointtype);
 BA.debugLineNum = 1328;BA.debugLine="ID.PointFilled = PointFilled";
Debug.JustUpdateDeviceLine();
_id.setField ("PointFilled" /*RemoteObject*/ ,_pointfilled);
 BA.debugLineNum = 1329;BA.debugLine="ID.PointColor = PointColor";
Debug.JustUpdateDeviceLine();
_id.setField ("PointColor" /*RemoteObject*/ ,_pointcolor);
 BA.debugLineNum = 1330;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1331;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addlinemultiplepoints(RemoteObject __ref,RemoteObject _x,RemoteObject _yarray,RemoteObject _showtick) throws Exception{
try {
		Debug.PushSubsStack("AddLineMultiplePoints (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1336);
if (RapidSub.canDelegate("addlinemultiplepoints")) { return __ref.runUserSub(false, "xchart","addlinemultiplepoints", __ref, _x, _yarray, _showtick);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
Debug.locals.put("X", _x);
Debug.locals.put("YArray", _yarray);
Debug.locals.put("ShowTick", _showtick);
 BA.debugLineNum = 1336;BA.debugLine="Public Sub AddLineMultiplePoints(X As String, YArr";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1337;BA.debugLine="If Points.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1338;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1340;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1341;BA.debugLine="PD.Initialize";
Debug.JustUpdateDeviceLine();
_pd.runVoidMethod ("Initialize");
 BA.debugLineNum = 1342;BA.debugLine="PD.X = X";
Debug.JustUpdateDeviceLine();
_pd.setField ("X" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 1343;BA.debugLine="PD.YArray = YArray";
Debug.JustUpdateDeviceLine();
_pd.setField ("YArray" /*RemoteObject*/ ,_yarray);
 BA.debugLineNum = 1344;BA.debugLine="PD.ShowTick = ShowTick";
Debug.JustUpdateDeviceLine();
_pd.setField ("ShowTick" /*RemoteObject*/ ,_showtick);
 BA.debugLineNum = 1345;BA.debugLine="Points.Add(PD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_pd)));
 BA.debugLineNum = 1346;BA.debugLine="If xpnlValues.Visible = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getVisible"),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1347;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 1348;BA.debugLine="xcvsCursor.ClearRect(Values.rectCursor)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ )));
 BA.debugLineNum = 1349;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 };
 BA.debugLineNum = 1351;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addlinepointdata(RemoteObject __ref,RemoteObject _x,RemoteObject _y,RemoteObject _showtick) throws Exception{
try {
		Debug.PushSubsStack("AddLinePointData (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1356);
if (RapidSub.canDelegate("addlinepointdata")) { return __ref.runUserSub(false, "xchart","addlinepointdata", __ref, _x, _y, _showtick);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _yarray = null;
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
Debug.locals.put("ShowTick", _showtick);
 BA.debugLineNum = 1356;BA.debugLine="Public Sub AddLinePointData (X As String, Y As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1357;BA.debugLine="If Points.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1358;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1360;BA.debugLine="Dim PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1361;BA.debugLine="PD.Initialize";
Debug.JustUpdateDeviceLine();
_pd.runVoidMethod ("Initialize");
 BA.debugLineNum = 1362;BA.debugLine="PD.X = X";
Debug.JustUpdateDeviceLine();
_pd.setField ("X" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 1363;BA.debugLine="Private YArray(1) As Double";
Debug.JustUpdateDeviceLine();
_yarray = RemoteObject.createNewArray ("double", new int[] {1}, new Object[]{});Debug.locals.put("YArray", _yarray);
 BA.debugLineNum = 1364;BA.debugLine="YArray(0) = Y";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_y,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1365;BA.debugLine="PD.YArray = YArray";
Debug.JustUpdateDeviceLine();
_pd.setField ("YArray" /*RemoteObject*/ ,_yarray);
 BA.debugLineNum = 1366;BA.debugLine="PD.ShowTick = ShowTick";
Debug.JustUpdateDeviceLine();
_pd.setField ("ShowTick" /*RemoteObject*/ ,_showtick);
 BA.debugLineNum = 1367;BA.debugLine="Points.Add(PD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_pd)));
 BA.debugLineNum = 1368;BA.debugLine="If xpnlValues.Visible = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getVisible"),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1369;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 1370;BA.debugLine="xcvsCursor.ClearRect(Values.rectCursor)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ )));
 BA.debugLineNum = 1371;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 };
 BA.debugLineNum = 1373;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addpie(RemoteObject __ref,RemoteObject _name,RemoteObject _value,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("AddPie (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1378);
if (RapidSub.canDelegate("addpie")) { return __ref.runUserSub(false, "xchart","addpie", __ref, _name, _value, _color);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("Value", _value);
Debug.locals.put("Color", _color);
 BA.debugLineNum = 1378;BA.debugLine="Public Sub AddPie(Name As String, Value As Float,";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1379;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1380;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1382;BA.debugLine="If Color = 0 Then Color = xui.Color_RGB(Rnd(0, 25";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_color,BA.numberCast(double.class, 0))) { 
_color = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))));Debug.locals.put("Color", _color);};
 BA.debugLineNum = 1383;BA.debugLine="Dim ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1384;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1385;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1386;BA.debugLine="ID.Value = Value";
Debug.JustUpdateDeviceLine();
_id.setField ("Value" /*RemoteObject*/ ,_value);
 BA.debugLineNum = 1387;BA.debugLine="ID.Color = Color";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 1388;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1389;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addradar(RemoteObject __ref,RemoteObject _name,RemoteObject _color,RemoteObject _srokewidth,RemoteObject _filled) throws Exception{
try {
		Debug.PushSubsStack("AddRadar (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1245);
if (RapidSub.canDelegate("addradar")) { return __ref.runUserSub(false, "xchart","addradar", __ref, _name, _color, _srokewidth, _filled);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("Color", _color);
Debug.locals.put("SrokeWidth", _srokewidth);
Debug.locals.put("Filled", _filled);
 BA.debugLineNum = 1245;BA.debugLine="Public Sub AddRadar(Name As String, Color As Int,";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1246;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1247;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1250;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1251;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1252;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1253;BA.debugLine="ID.Color = Color";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 1254;BA.debugLine="ID.StrokeWidth = SrokeWidth";
Debug.JustUpdateDeviceLine();
_id.setField ("StrokeWidth" /*RemoteObject*/ ,_srokewidth);
 BA.debugLineNum = 1255;BA.debugLine="ID.PointType = \"NONE\"";
Debug.JustUpdateDeviceLine();
_id.setField ("PointType" /*RemoteObject*/ ,BA.ObjectToString("NONE"));
 BA.debugLineNum = 1256;BA.debugLine="ID.Filled = Filled";
Debug.JustUpdateDeviceLine();
_id.setField ("Filled" /*RemoteObject*/ ,_filled);
 BA.debugLineNum = 1257;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1258;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addradar2(RemoteObject __ref,RemoteObject _name,RemoteObject _color,RemoteObject _srokewidth,RemoteObject _filled,RemoteObject _pointtype,RemoteObject _pointfilled,RemoteObject _pointcolor) throws Exception{
try {
		Debug.PushSubsStack("AddRadar2 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1263);
if (RapidSub.canDelegate("addradar2")) { return __ref.runUserSub(false, "xchart","addradar2", __ref, _name, _color, _srokewidth, _filled, _pointtype, _pointfilled, _pointcolor);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("Color", _color);
Debug.locals.put("SrokeWidth", _srokewidth);
Debug.locals.put("Filled", _filled);
Debug.locals.put("PointType", _pointtype);
Debug.locals.put("PointFilled", _pointfilled);
Debug.locals.put("PointColor", _pointcolor);
 BA.debugLineNum = 1263;BA.debugLine="Public Sub AddRadar2(Name As String, Color As Int,";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1264;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1265;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1268;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1269;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1270;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1271;BA.debugLine="ID.Color = Color";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 1272;BA.debugLine="ID.StrokeWidth = SrokeWidth";
Debug.JustUpdateDeviceLine();
_id.setField ("StrokeWidth" /*RemoteObject*/ ,_srokewidth);
 BA.debugLineNum = 1273;BA.debugLine="ID.Filled = Filled";
Debug.JustUpdateDeviceLine();
_id.setField ("Filled" /*RemoteObject*/ ,_filled);
 BA.debugLineNum = 1274;BA.debugLine="ID.PointType = PointType";
Debug.JustUpdateDeviceLine();
_id.setField ("PointType" /*RemoteObject*/ ,_pointtype);
 BA.debugLineNum = 1275;BA.debugLine="ID.PointFilled = PointFilled";
Debug.JustUpdateDeviceLine();
_id.setField ("PointFilled" /*RemoteObject*/ ,_pointfilled);
 BA.debugLineNum = 1276;BA.debugLine="ID.PointColor = PointColor";
Debug.JustUpdateDeviceLine();
_id.setField ("PointColor" /*RemoteObject*/ ,_pointcolor);
 BA.debugLineNum = 1277;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1278;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addradarmultiplepoint(RemoteObject __ref,RemoteObject _x,RemoteObject _yarray) throws Exception{
try {
		Debug.PushSubsStack("AddRadarMultiplePoint (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1282);
if (RapidSub.canDelegate("addradarmultiplepoint")) { return __ref.runUserSub(false, "xchart","addradarmultiplepoint", __ref, _x, _yarray);}
Debug.locals.put("X", _x);
Debug.locals.put("YArray", _yarray);
 BA.debugLineNum = 1282;BA.debugLine="Public Sub AddRadarMultiplePoint (X As String, YAr";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1284;BA.debugLine="AddBarMultiplePoint (X, YArray)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_addbarmultiplepoint" /*RemoteObject*/ ,(Object)(_x),(Object)(_yarray));
 BA.debugLineNum = 1285;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addradarpointdata(RemoteObject __ref,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("AddRadarPointData (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1289);
if (RapidSub.canDelegate("addradarpointdata")) { return __ref.runUserSub(false, "xchart","addradarpointdata", __ref, _x, _y);}
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
 BA.debugLineNum = 1289;BA.debugLine="Public Sub AddRadarPointData (X As String, Y As Do";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1291;BA.debugLine="AddBarPointData (X, Y)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_addbarpointdata" /*RemoteObject*/ ,(Object)(_x),(Object)(_y));
 BA.debugLineNum = 1292;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addwaterfallpoint(RemoteObject __ref,RemoteObject _bartype,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("AddWaterfallPoint (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1532);
if (RapidSub.canDelegate("addwaterfallpoint")) { return __ref.runUserSub(false, "xchart","addwaterfallpoint", __ref, _bartype, _x, _y);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _yarray = null;
Debug.locals.put("BarType", _bartype);
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
 BA.debugLineNum = 1532;BA.debugLine="Public Sub AddWaterfallPoint(BarType As String, X";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1533;BA.debugLine="If Points.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1534;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1536;BA.debugLine="Dim PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1537;BA.debugLine="PD.Initialize";
Debug.JustUpdateDeviceLine();
_pd.runVoidMethod ("Initialize");
 BA.debugLineNum = 1538;BA.debugLine="PD.BarType = BarType";
Debug.JustUpdateDeviceLine();
_pd.setField ("BarType" /*RemoteObject*/ ,_bartype);
 BA.debugLineNum = 1539;BA.debugLine="PD.X = X";
Debug.JustUpdateDeviceLine();
_pd.setField ("X" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 1540;BA.debugLine="Private YArray(2) As Double";
Debug.JustUpdateDeviceLine();
_yarray = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("YArray", _yarray);
 BA.debugLineNum = 1541;BA.debugLine="YArray(0) = Y";
Debug.JustUpdateDeviceLine();
_yarray.setArrayElement (_y,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1542;BA.debugLine="PD.YArray = YArray";
Debug.JustUpdateDeviceLine();
_pd.setField ("YArray" /*RemoteObject*/ ,_yarray);
 BA.debugLineNum = 1543;BA.debugLine="PD.ShowTick = True";
Debug.JustUpdateDeviceLine();
_pd.setField ("ShowTick" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 1544;BA.debugLine="Points.Add(PD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_pd)));
 BA.debugLineNum = 1545;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addyxline(RemoteObject __ref,RemoteObject _name,RemoteObject _linecolor,RemoteObject _strokewidth) throws Exception{
try {
		Debug.PushSubsStack("AddYXLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1393);
if (RapidSub.canDelegate("addyxline")) { return __ref.runUserSub(false, "xchart","addyxline", __ref, _name, _linecolor, _strokewidth);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("LineColor", _linecolor);
Debug.locals.put("StrokeWidth", _strokewidth);
 BA.debugLineNum = 1393;BA.debugLine="Public Sub AddYXLine(Name As String, LineColor As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1394;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1395;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1397;BA.debugLine="If LineColor = 0 Then LineColor = xui.Color_RGB(R";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_linecolor,BA.numberCast(double.class, 0))) { 
_linecolor = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))));Debug.locals.put("LineColor", _linecolor);};
 BA.debugLineNum = 1399;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1400;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1401;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1402;BA.debugLine="ID.Color = LineColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_linecolor);
 BA.debugLineNum = 1403;BA.debugLine="ID.StrokeWidth = StrokeWidth";
Debug.JustUpdateDeviceLine();
_id.setField ("StrokeWidth" /*RemoteObject*/ ,_strokewidth);
 BA.debugLineNum = 1404;BA.debugLine="ID.DrawLine = True";
Debug.JustUpdateDeviceLine();
_id.setField ("DrawLine" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 1405;BA.debugLine="ID.PointType = \"NONE\"";
Debug.JustUpdateDeviceLine();
_id.setField ("PointType" /*RemoteObject*/ ,BA.ObjectToString("NONE"));
 BA.debugLineNum = 1406;BA.debugLine="ID.Filled = False";
Debug.JustUpdateDeviceLine();
_id.setField ("Filled" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 1407;BA.debugLine="ID.YXArray.Initialize";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 1408;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1409;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addyxline2(RemoteObject __ref,RemoteObject _name,RemoteObject _linecolor,RemoteObject _strokewidth,RemoteObject _drawline,RemoteObject _pointtype,RemoteObject _pointfilled,RemoteObject _pointcolor) throws Exception{
try {
		Debug.PushSubsStack("AddYXLine2 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1417);
if (RapidSub.canDelegate("addyxline2")) { return __ref.runUserSub(false, "xchart","addyxline2", __ref, _name, _linecolor, _strokewidth, _drawline, _pointtype, _pointfilled, _pointcolor);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Name", _name);
Debug.locals.put("LineColor", _linecolor);
Debug.locals.put("StrokeWidth", _strokewidth);
Debug.locals.put("DrawLine", _drawline);
Debug.locals.put("PointType", _pointtype);
Debug.locals.put("PointFilled", _pointfilled);
Debug.locals.put("PointColor", _pointcolor);
 BA.debugLineNum = 1417;BA.debugLine="Public Sub AddYXLine2(Name As String, LineColor As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1418;BA.debugLine="If Items.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1419;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1421;BA.debugLine="If LineColor = 0 Then LineColor = xui.Color_RGB(R";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_linecolor,BA.numberCast(double.class, 0))) { 
_linecolor = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))),(Object)(xchart.__c.runMethod(true,"Rnd",(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 255)))));Debug.locals.put("LineColor", _linecolor);};
 BA.debugLineNum = 1423;BA.debugLine="Dim ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1424;BA.debugLine="ID.Initialize";
Debug.JustUpdateDeviceLine();
_id.runVoidMethod ("Initialize");
 BA.debugLineNum = 1425;BA.debugLine="ID.Name = Name";
Debug.JustUpdateDeviceLine();
_id.setField ("Name" /*RemoteObject*/ ,_name);
 BA.debugLineNum = 1426;BA.debugLine="ID.Color = LineColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_linecolor);
 BA.debugLineNum = 1427;BA.debugLine="ID.StrokeWidth = StrokeWidth";
Debug.JustUpdateDeviceLine();
_id.setField ("StrokeWidth" /*RemoteObject*/ ,_strokewidth);
 BA.debugLineNum = 1428;BA.debugLine="ID.DrawLine = DrawLine";
Debug.JustUpdateDeviceLine();
_id.setField ("DrawLine" /*RemoteObject*/ ,_drawline);
 BA.debugLineNum = 1429;BA.debugLine="ID.PointType = PointType";
Debug.JustUpdateDeviceLine();
_id.setField ("PointType" /*RemoteObject*/ ,_pointtype);
 BA.debugLineNum = 1430;BA.debugLine="ID.PointFilled = PointFilled";
Debug.JustUpdateDeviceLine();
_id.setField ("PointFilled" /*RemoteObject*/ ,_pointfilled);
 BA.debugLineNum = 1431;BA.debugLine="ID.PointColor = PointColor";
Debug.JustUpdateDeviceLine();
_id.setField ("PointColor" /*RemoteObject*/ ,_pointcolor);
 BA.debugLineNum = 1432;BA.debugLine="ID.YXArray.Initialize";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 1433;BA.debugLine="If DrawLine = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_drawline,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1434;BA.debugLine="ID.Color = ID.PointColor";
Debug.JustUpdateDeviceLine();
_id.setField ("Color" /*RemoteObject*/ ,_id.getField(true,"PointColor" /*RemoteObject*/ ));
 };
 BA.debugLineNum = 1436;BA.debugLine="Items.Add(ID)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_id)));
 BA.debugLineNum = 1437;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _addyxpoint(RemoteObject __ref,RemoteObject _lineindex,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("AddYXPoint (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1440);
if (RapidSub.canDelegate("addyxpoint")) { return __ref.runUserSub(false, "xchart","addyxpoint", __ref, _lineindex, _x, _y);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _yx = null;
Debug.locals.put("LineIndex", _lineindex);
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
 BA.debugLineNum = 1440;BA.debugLine="Public Sub AddYXPoint(LineIndex As Int, X As Doubl";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1441;BA.debugLine="If LineIndex < 0 Or LineIndex > Items.Size Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_lineindex,BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean(">",_lineindex,BA.numberCast(double.class, __ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize")))) { 
 BA.debugLineNum = 1442;BA.debugLine="Log(\"Index out of range\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","95767170",RemoteObject.createImmutable("Index out of range"),0);
 BA.debugLineNum = 1443;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 1446;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1447;BA.debugLine="Private YX(2) As Double";
Debug.JustUpdateDeviceLine();
_yx = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("YX", _yx);
 BA.debugLineNum = 1448;BA.debugLine="YX(0) = X";
Debug.JustUpdateDeviceLine();
_yx.setArrayElement (_x,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1449;BA.debugLine="YX(1) = Y";
Debug.JustUpdateDeviceLine();
_yx.setArrayElement (_y,BA.numberCast(int.class, 1));
 BA.debugLineNum = 1450;BA.debugLine="ID = Items.Get(LineIndex)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_lineindex)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 1451;BA.debugLine="If ID.YXArray.IsInitialized = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"IsInitialized"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1452;BA.debugLine="ID.YXArray.Initialize";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 };
 BA.debugLineNum = 1454;BA.debugLine="ID.YXArray.Add(YX)";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_yx)));
 BA.debugLineNum = 1455;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _base_resize(RemoteObject __ref,RemoteObject _width,RemoteObject _height) throws Exception{
try {
		Debug.PushSubsStack("Base_Resize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,407);
if (RapidSub.canDelegate("base_resize")) { return __ref.runUserSub(false, "xchart","base_resize", __ref, _width, _height);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _n = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("Width", _width);
Debug.locals.put("Height", _height);
 BA.debugLineNum = 407;BA.debugLine="Public Sub Base_Resize (Width As Double, Height As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 408;BA.debugLine="mBase.SetColorAndBorder(Graph.ChartBackgroundColo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runVoidMethod ("SetColorAndBorder",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 0)),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Transparent")),(Object)(BA.numberCast(int.class, 0)));
 BA.debugLineNum = 409;BA.debugLine="If Zoom.Active = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Active" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 410;BA.debugLine="xpnlGraph.Width = Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setWidth",BA.numberCast(int.class, _width));
 BA.debugLineNum = 411;BA.debugLine="xpnlGraph.Height = Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setHeight",BA.numberCast(int.class, _height));
 BA.debugLineNum = 413;BA.debugLine="xpnlCursor.Width = Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setWidth",BA.numberCast(int.class, _width));
 BA.debugLineNum = 414;BA.debugLine="xpnlCursor.Height = Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setHeight",BA.numberCast(int.class, _height));
 }else {
 BA.debugLineNum = 416;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 417;BA.debugLine="xpnlGraph.Width = Width - xpnlZoomBar.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setWidth",BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_width,__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "-",1, 0)));
 BA.debugLineNum = 418;BA.debugLine="xpnlGraph.Height = Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setHeight",BA.numberCast(int.class, _height));
 BA.debugLineNum = 420;BA.debugLine="xpnlCursor.Width = Width - xpnlZoomBar.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setWidth",BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_width,__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "-",1, 0)));
 BA.debugLineNum = 421;BA.debugLine="xpnlCursor.Height = Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setHeight",BA.numberCast(int.class, _height));
 BA.debugLineNum = 423;BA.debugLine="xpnlZoomBar.Top = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setTop",BA.numberCast(int.class, 0));
 BA.debugLineNum = 424;BA.debugLine="xpnlZoomBar.Left = xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setLeft",__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"));
 BA.debugLineNum = 425;BA.debugLine="xpnlZoomBar.Height = Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setHeight",BA.numberCast(int.class, _height));
 BA.debugLineNum = 426;BA.debugLine="Zoom.BarLength = Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BarLength" /*RemoteObject*/ ,BA.numberCast(int.class, _height));
 }else {
 BA.debugLineNum = 428;BA.debugLine="xpnlGraph.Width = Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setWidth",BA.numberCast(int.class, _width));
 BA.debugLineNum = 429;BA.debugLine="xpnlGraph.Height = Height - xpnlZoomBar.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setHeight",BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_height,__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight")}, "-",1, 0)));
 BA.debugLineNum = 431;BA.debugLine="xpnlCursor.Width = Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setWidth",BA.numberCast(int.class, _width));
 BA.debugLineNum = 432;BA.debugLine="xpnlCursor.Height = Height - xpnlZoomBar.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setHeight",BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_height,__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight")}, "-",1, 0)));
 BA.debugLineNum = 434;BA.debugLine="xpnlZoomBar.Width = Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setWidth",BA.numberCast(int.class, _width));
 BA.debugLineNum = 435;BA.debugLine="Zoom.BarLength = Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BarLength" /*RemoteObject*/ ,BA.numberCast(int.class, _width));
 BA.debugLineNum = 436;BA.debugLine="xpnlZoomBar.Top = xpnlGraph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setTop",__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 };
 };
 BA.debugLineNum = 440;BA.debugLine="ZoomBarResize";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoombarresize" /*RemoteObject*/ );
 BA.debugLineNum = 441;BA.debugLine="ZoomCursorDraw";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoomcursordraw" /*RemoteObject*/ );
 BA.debugLineNum = 443;BA.debugLine="xcvsGraph.Resize(xpnlGraph.Width, xpnlGraph.Heigh";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 444;BA.debugLine="xcvsCursor.Resize(xpnlCursor.Width, xpnlCursor.He";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 445;BA.debugLine="xcvsZoomBar.Resize(xpnlZoomBar.Width, xpnlZoomBar";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 447;BA.debugLine="If (Graph.ChartType = \"YX_CHART\" Or Graph.ChartTy";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("BUBBLE"))))) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 448;BA.debugLine="Private i, n As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_n = RemoteObject.createImmutable(0);Debug.locals.put("n", _n);
 BA.debugLineNum = 449;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 451;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step35 = 1;
final int limit35 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step35 > 0 && _i.<Integer>get().intValue() <= limit35) || (step35 < 0 && _i.<Integer>get().intValue() >= limit35) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step35))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 452;BA.debugLine="ID = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 453;BA.debugLine="If ID.YXArray.Size > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 454;BA.debugLine="n = 1";
Debug.JustUpdateDeviceLine();
_n = BA.numberCast(int.class, 1);Debug.locals.put("n", _n);
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 457;BA.debugLine="If n = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_n,BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 458;BA.debugLine="DrawChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawchart" /*RemoteObject*/ );
 };
 }else 
{ BA.debugLineNum = 460;BA.debugLine="Else If Zoom.NbVisiblePoints > 0 Or Graph.ChartTy";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE"))) { 
 BA.debugLineNum = 461;BA.debugLine="DrawChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawchart" /*RemoteObject*/ );
 }}
;
 BA.debugLineNum = 463;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _calcdarkcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("CalcDarkColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,983);
if (RapidSub.canDelegate("calcdarkcolor")) { return __ref.runUserSub(false, "xchart","calcdarkcolor", __ref, _color);}
RemoteObject _bmpcreate = RemoteObject.declareNull("b4a.example.bitmapcreator");
RemoteObject _argbcol = RemoteObject.declareNull("b4a.example.bitmapcreator._argbcolor");
Debug.locals.put("Color", _color);
 BA.debugLineNum = 983;BA.debugLine="Private Sub CalcDarkColor(Color As Int) As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 984;BA.debugLine="Private BmpCreate As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmpcreate = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("BmpCreate", _bmpcreate);
 BA.debugLineNum = 985;BA.debugLine="Private ARGBCol As ARGBColor";
Debug.JustUpdateDeviceLine();
_argbcol = RemoteObject.createNew ("b4a.example.bitmapcreator._argbcolor");Debug.locals.put("ARGBCol", _argbcol);
 BA.debugLineNum = 987;BA.debugLine="BmpCreate.Initialize(1, 1)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, 1)),(Object)(BA.numberCast(int.class, 1)));
 BA.debugLineNum = 988;BA.debugLine="BmpCreate.ColorToARGB(Color, ARGBCol)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(_color),(Object)(_argbcol));
 BA.debugLineNum = 989;BA.debugLine="ARGBCol.r = ARGBCol.r / 2";
Debug.JustUpdateDeviceLine();
_argbcol.setField ("r",BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_argbcol.getField(true,"r"),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 990;BA.debugLine="ARGBCol.g = ARGBCol.g / 2";
Debug.JustUpdateDeviceLine();
_argbcol.setField ("g",BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_argbcol.getField(true,"g"),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 991;BA.debugLine="ARGBCol.b = ARGBCol.b / 2";
Debug.JustUpdateDeviceLine();
_argbcol.setField ("b",BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_argbcol.getField(true,"b"),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 993;BA.debugLine="Return BmpCreate.ARGBToColor(ARGBCol)";
Debug.JustUpdateDeviceLine();
if (true) return _bmpcreate.runMethod(true,"_argbtocolor",(Object)(_argbcol));
 BA.debugLineNum = 994;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _calcscaleauto(RemoteObject __ref,RemoteObject _axis) throws Exception{
try {
		Debug.PushSubsStack("CalcScaleAuto (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2407);
if (RapidSub.canDelegate("calcscaleauto")) { return __ref.runUserSub(false, "xchart","calcscaleauto", __ref, _axis);}
RemoteObject _scalelogarithm = RemoteObject.createImmutable(0);
RemoteObject _scalemant = RemoteObject.createImmutable(0);
RemoteObject _scaledelta = RemoteObject.createImmutable(0);
RemoteObject _valdiff = RemoteObject.createImmutable(0);
RemoteObject _scalemin = RemoteObject.createImmutable(0);
RemoteObject _scalemax = RemoteObject.createImmutable(0);
RemoteObject _valmax = RemoteObject.createImmutable(0);
RemoteObject _nbmin = RemoteObject.createImmutable(0);
RemoteObject _nbusedintervals = RemoteObject.createImmutable(0);
RemoteObject _nbusedintervalstop = RemoteObject.createImmutable(0);
RemoteObject _nbusedintervalsbottom = RemoteObject.createImmutable(0);
RemoteObject _nbintervalstomove = RemoteObject.createImmutable(0);
RemoteObject _valminmax = null;
RemoteObject _scaleok = RemoteObject.createImmutable(false);
Debug.locals.put("Axis", _axis);
 BA.debugLineNum = 2407;BA.debugLine="Private Sub CalcScaleAuto(Axis As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2408;BA.debugLine="Private ScaleLogarithm, ScaleMant, ScaleDelta, Va";
Debug.JustUpdateDeviceLine();
_scalelogarithm = RemoteObject.createImmutable(0);Debug.locals.put("ScaleLogarithm", _scalelogarithm);
_scalemant = RemoteObject.createImmutable(0);Debug.locals.put("ScaleMant", _scalemant);
_scaledelta = RemoteObject.createImmutable(0);Debug.locals.put("ScaleDelta", _scaledelta);
_valdiff = RemoteObject.createImmutable(0);Debug.locals.put("ValDiff", _valdiff);
_scalemin = RemoteObject.createImmutable(0);Debug.locals.put("ScaleMin", _scalemin);
_scalemax = RemoteObject.createImmutable(0);Debug.locals.put("ScaleMax", _scalemax);
_valmax = RemoteObject.createImmutable(0);Debug.locals.put("ValMax", _valmax);
 BA.debugLineNum = 2409;BA.debugLine="Private nbMin, NbUsedIntervals, NbUsedIntervalsTo";
Debug.JustUpdateDeviceLine();
_nbmin = RemoteObject.createImmutable(0);Debug.locals.put("nbMin", _nbmin);
_nbusedintervals = RemoteObject.createImmutable(0);Debug.locals.put("NbUsedIntervals", _nbusedintervals);
_nbusedintervalstop = RemoteObject.createImmutable(0);Debug.locals.put("NbUsedIntervalsTop", _nbusedintervalstop);
_nbusedintervalsbottom = RemoteObject.createImmutable(0);Debug.locals.put("NbUsedIntervalsBottom", _nbusedintervalsbottom);
_nbintervalstomove = RemoteObject.createImmutable(0);Debug.locals.put("NbIntervalsToMove", _nbintervalstomove);
 BA.debugLineNum = 2410;BA.debugLine="Private ValMinMax(3) As Double";
Debug.JustUpdateDeviceLine();
_valminmax = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});Debug.locals.put("ValMinMax", _valminmax);
 BA.debugLineNum = 2412;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE"),BA.ObjectToString("H_LINE"),BA.ObjectToString("YX_CHART"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("BUBBLE"),BA.ObjectToString("WATERFALL"))) {
case 0: 
case 1: 
case 2: 
case 3: 
case 4: 
case 5: {
 BA.debugLineNum = 2414;BA.debugLine="ValMinMax = GetLinePointsMinMaxMeanValues(Axis)";
Debug.JustUpdateDeviceLine();
_valminmax = __ref.runClassMethod (b4a.example.xchart.class, "_getlinepointsminmaxmeanvalues" /*RemoteObject*/ ,(Object)(_axis));Debug.locals.put("ValMinMax", _valminmax);
 BA.debugLineNum = 2415;BA.debugLine="If Scale(Axis).YZeroAxis = True And ValMinMax(0";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("g",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2416;BA.debugLine="ValMinMax(0) = 0";
Debug.JustUpdateDeviceLine();
_valminmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 0));
 };
 BA.debugLineNum = 2418;BA.debugLine="If Scale(Axis).YZeroAxis = True And ValMinMax(0";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2419;BA.debugLine="ValMinMax(1) = 0";
Debug.JustUpdateDeviceLine();
_valminmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 1));
 };
 break; }
case 6: {
 BA.debugLineNum = 2422;BA.debugLine="ValMinMax = GetWaterfallMinMaxValues";
Debug.JustUpdateDeviceLine();
_valminmax = __ref.runClassMethod (b4a.example.xchart.class, "_getwaterfallminmaxvalues" /*RemoteObject*/ );Debug.locals.put("ValMinMax", _valminmax);
 break; }
default: {
 BA.debugLineNum = 2424;BA.debugLine="ValMinMax = GetBarPointsMinMaxValues";
Debug.JustUpdateDeviceLine();
_valminmax = __ref.runClassMethod (b4a.example.xchart.class, "_getbarpointsminmaxvalues" /*RemoteObject*/ );Debug.locals.put("ValMinMax", _valminmax);
 break; }
}
;
 BA.debugLineNum = 2428;BA.debugLine="If ValMinMax(0) = ValMinMax(1) Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)))) { 
 BA.debugLineNum = 2429;BA.debugLine="If ValMinMax(0) >= 0 And ValMinMax(0) <= 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 2430;BA.debugLine="Scale(Axis).MinAuto = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 0));
 BA.debugLineNum = 2431;BA.debugLine="Scale(Axis).MaxAuto = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 BA.debugLineNum = 2432;BA.debugLine="Scale(Axis).IntervalAuto = 1 / Scale(Axis).NbIn";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("IntervalAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0));
 BA.debugLineNum = 2433;BA.debugLine="Scale(Axis).MinVal = Scale(Axis).MinAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2434;BA.debugLine="Scale(Axis).MaxVal = Scale(Axis).MaxAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2435;BA.debugLine="Scale(Axis).Interval = Scale(Axis).IntervalAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Interval" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2436;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 }else 
{ BA.debugLineNum = 2437;BA.debugLine="Else If ValMinMax(0) < 0 And ValMinMax(0) >= -1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("g",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, -(double) (0 + 1)))) { 
 BA.debugLineNum = 2438;BA.debugLine="Scale(Axis).MinAuto = -1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,BA.numberCast(double.class, -(double) (0 + 1)));
 BA.debugLineNum = 2439;BA.debugLine="Scale(Axis).MaxAuto = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 0));
 BA.debugLineNum = 2440;BA.debugLine="Scale(Axis).IntervalAuto = 1 / Scale(Axis).NbIn";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("IntervalAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0));
 BA.debugLineNum = 2441;BA.debugLine="Scale(Axis).MinVal = Scale(Axis).MinAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2442;BA.debugLine="Scale(Axis).MaxVal = Scale(Axis).MaxAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2443;BA.debugLine="Scale(Axis).Interval = Scale(Axis).IntervalAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Interval" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2444;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 }else {
 BA.debugLineNum = 2446;BA.debugLine="If Scale(Axis).YZeroAxis = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2447;BA.debugLine="If Abs(ValMinMax(0)) < 100 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)))),BA.numberCast(double.class, 100))) { 
 BA.debugLineNum = 2448;BA.debugLine="Scale(Axis).IntervalAuto = 0.1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("IntervalAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 0.1));
 BA.debugLineNum = 2449;BA.debugLine="Scale(Axis).MinAuto = Floor(ValMinMax(0) * 10";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Floor",(Object)(RemoteObject.solve(new RemoteObject[] {_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),RemoteObject.createImmutable(10)}, "*",0, 0))),RemoteObject.createImmutable(10),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "/-*/",1, 0));
 }else {
 BA.debugLineNum = 2451;BA.debugLine="Scale(Axis).IntervalAuto = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("IntervalAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 BA.debugLineNum = 2452;BA.debugLine="Scale(Axis).MinAuto = Floor(ValMinMax(0)) - S";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Floor",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "-*/",1, 0));
 };
 BA.debugLineNum = 2454;BA.debugLine="Scale(Axis).MaxAuto = Scale(Axis).MinAuto + Sc";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "+*",1, 0));
 BA.debugLineNum = 2455;BA.debugLine="Scale(Axis).MinVal = Scale(Axis).MinAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2456;BA.debugLine="Scale(Axis).MaxVal = Scale(Axis).MaxAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2457;BA.debugLine="Scale(Axis).Interval = Scale(Axis).IntervalAut";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Interval" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2458;BA.debugLine="If Axis = sX Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_axis,BA.numberCast(double.class, __ref.getField(true,"_sx" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 2459;BA.debugLine="Scale(Axis).Scale = Graph.Width / (Scale(Axis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 }else {
 BA.debugLineNum = 2461;BA.debugLine="Scale(Axis).Scale = Graph.Height / (Scale(Axi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 };
 BA.debugLineNum = 2463;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 }else {
 BA.debugLineNum = 2465;BA.debugLine="If ValMinMax(0) > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2466;BA.debugLine="ValMinMax(0) = 0";
Debug.JustUpdateDeviceLine();
_valminmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 0));
 }else {
 BA.debugLineNum = 2468;BA.debugLine="ValMinMax(1) = 0";
Debug.JustUpdateDeviceLine();
_valminmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 1));
 };
 };
 }}
;
 BA.debugLineNum = 2472;BA.debugLine="Scale(Axis).MinVal = Scale(Axis).MinAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2473;BA.debugLine="Scale(Axis).MaxVal = Scale(Axis).MaxAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2474;BA.debugLine="Scale(Axis).Interval = Scale(Axis).IntervalAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Interval" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2475;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 2478;BA.debugLine="Private ScaleOK As Boolean = False";
Debug.JustUpdateDeviceLine();
_scaleok = xchart.__c.getField(true,"False");Debug.locals.put("ScaleOK", _scaleok);Debug.locals.put("ScaleOK", _scaleok);
 BA.debugLineNum = 2479;BA.debugLine="ValMax = ValMinMax(1)";
Debug.JustUpdateDeviceLine();
_valmax = _valminmax.getArrayElement(true,BA.numberCast(int.class, 1));Debug.locals.put("ValMax", _valmax);
 BA.debugLineNum = 2480;BA.debugLine="Do Until ScaleOK = True";
Debug.JustUpdateDeviceLine();
while (!(RemoteObject.solveBoolean("=",_scaleok,xchart.__c.getField(true,"True")))) {
 BA.debugLineNum = 2481;BA.debugLine="ValDiff = ValMax - ValMinMax(0)";
Debug.JustUpdateDeviceLine();
_valdiff = RemoteObject.solve(new RemoteObject[] {_valmax,_valminmax.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0);Debug.locals.put("ValDiff", _valdiff);
 BA.debugLineNum = 2482;BA.debugLine="ScaleDelta = ValDiff / Scale(Axis).NbIntervals";
Debug.JustUpdateDeviceLine();
_scaledelta = RemoteObject.solve(new RemoteObject[] {_valdiff,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0);Debug.locals.put("ScaleDelta", _scaledelta);
 BA.debugLineNum = 2484;BA.debugLine="ScaleLogarithm = Logarithm(ScaleDelta, 10)";
Debug.JustUpdateDeviceLine();
_scalelogarithm = xchart.__c.runMethod(true,"Logarithm",(Object)(_scaledelta),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("ScaleLogarithm", _scalelogarithm);
 BA.debugLineNum = 2485;BA.debugLine="Scale(Axis).Exp = Floor(ScaleLogarithm)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Exp" /*RemoteObject*/ ,xchart.__c.runMethod(true,"Floor",(Object)(_scalelogarithm)));
 BA.debugLineNum = 2486;BA.debugLine="If ValDiff >= 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_valdiff,BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 2487;BA.debugLine="ScaleMant = ScaleLogarithm - Scale(Axis).Exp";
Debug.JustUpdateDeviceLine();
_scalemant = RemoteObject.solve(new RemoteObject[] {_scalelogarithm,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"Exp" /*RemoteObject*/ )}, "-",1, 0);Debug.locals.put("ScaleMant", _scalemant);
 }else {
 BA.debugLineNum = 2489;BA.debugLine="ScaleMant = Abs(Scale(Axis).Exp) + ScaleLogarit";
Debug.JustUpdateDeviceLine();
_scalemant = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"Exp" /*RemoteObject*/ ))),_scalelogarithm}, "+",1, 0);Debug.locals.put("ScaleMant", _scalemant);
 };
 BA.debugLineNum = 2492;BA.debugLine="ScaleMant = GetScaleMant(ScaleMant, Axis)";
Debug.JustUpdateDeviceLine();
_scalemant = __ref.runClassMethod (b4a.example.xchart.class, "_getscalemant" /*RemoteObject*/ ,(Object)(_scalemant),(Object)(_axis));Debug.locals.put("ScaleMant", _scalemant);
 BA.debugLineNum = 2493;BA.debugLine="Scale(Axis).IntervalAuto = Power(10, Scale(Axis)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("IntervalAuto" /*RemoteObject*/ ,xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"Exp" /*RemoteObject*/ ),_scalemant}, "+",1, 0))));
 BA.debugLineNum = 2495;BA.debugLine="If Scale(Axis).YZeroAxis = True And ValMinMax(0)";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2496;BA.debugLine="ScaleMax = 0";
Debug.JustUpdateDeviceLine();
_scalemax = BA.numberCast(double.class, 0);Debug.locals.put("ScaleMax", _scalemax);
 BA.debugLineNum = 2497;BA.debugLine="ScaleMin = -Scale(Axis).IntervalAuto * Scale(Ax";
Debug.JustUpdateDeviceLine();
_scalemin = BA.numberCast(double.class, -__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ).<Double>get().doubleValue()*(double) (0 + __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue()));Debug.locals.put("ScaleMin", _scalemin);
 }else {
 BA.debugLineNum = 2499;BA.debugLine="ScaleMin = Floor(ValMinMax(0) / Scale(Axis).Int";
Debug.JustUpdateDeviceLine();
_scalemin = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Floor",(Object)(RemoteObject.solve(new RemoteObject[] {_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/+",1, 0))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ )}, "*",0, 0);Debug.locals.put("ScaleMin", _scalemin);
 BA.debugLineNum = 2500;BA.debugLine="ScaleMax = ScaleMin + Scale(Axis).IntervalAuto";
Debug.JustUpdateDeviceLine();
_scalemax = RemoteObject.solve(new RemoteObject[] {_scalemin,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "+*",1, 0);Debug.locals.put("ScaleMax", _scalemax);
 };
 BA.debugLineNum = 2504;BA.debugLine="If Round2(ScaleMax, 14) < Round2(ValMinMax(1), 1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Round2",(Object)(_scalemax),(Object)(BA.numberCast(int.class, 14))),xchart.__c.runMethod(true,"Round2",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(int.class, 14))))) { 
 BA.debugLineNum = 2505;BA.debugLine="ValMax = ValMax + Scale(Axis).IntervalAuto";
Debug.JustUpdateDeviceLine();
_valmax = RemoteObject.solve(new RemoteObject[] {_valmax,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ )}, "+",1, 0);Debug.locals.put("ValMax", _valmax);
 }else {
 BA.debugLineNum = 2507;BA.debugLine="ScaleOK = True";
Debug.JustUpdateDeviceLine();
_scaleok = xchart.__c.getField(true,"True");Debug.locals.put("ScaleOK", _scaleok);
 };
 }
;
 BA.debugLineNum = 2512;BA.debugLine="If ValMinMax(0) < 0 And ValMinMax(1) > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2513;BA.debugLine="NbUsedIntervalsTop = Ceil(ValMinMax(1) / Scale(A";
Debug.JustUpdateDeviceLine();
_nbusedintervalstop = BA.numberCast(int.class, xchart.__c.runMethod(true,"Ceil",(Object)(RemoteObject.solve(new RemoteObject[] {_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/-",1, 0))));Debug.locals.put("NbUsedIntervalsTop", _nbusedintervalstop);
 BA.debugLineNum = 2514;BA.debugLine="NbUsedIntervalsBottom = Ceil(Abs(ValMinMax(0)) /";
Debug.JustUpdateDeviceLine();
_nbusedintervalsbottom = BA.numberCast(int.class, xchart.__c.runMethod(true,"Ceil",(Object)(RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/-",1, 0))));Debug.locals.put("NbUsedIntervalsBottom", _nbusedintervalsbottom);
 BA.debugLineNum = 2516;BA.debugLine="If NbUsedIntervalsTop + NbUsedIntervalsBottom >";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {_nbusedintervalstop,_nbusedintervalsbottom}, "+",1, 1),BA.numberCast(double.class, __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 2518;BA.debugLine="ScaleMant = GetScaleMant(ScaleMant, Axis)";
Debug.JustUpdateDeviceLine();
_scalemant = __ref.runClassMethod (b4a.example.xchart.class, "_getscalemant" /*RemoteObject*/ ,(Object)(_scalemant),(Object)(_axis));Debug.locals.put("ScaleMant", _scalemant);
 BA.debugLineNum = 2520;BA.debugLine="Scale(Axis).IntervalAuto = Power(10, Scale(Axis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("IntervalAuto" /*RemoteObject*/ ,xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"Exp" /*RemoteObject*/ ),_scalemant}, "+",1, 0))));
 };
 };
 BA.debugLineNum = 2525;BA.debugLine="If Scale(Axis).YZeroAxis = True And ValMinMax(1)";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("=",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2526;BA.debugLine="Scale(Axis).MinAuto = ScaleMin";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,_scalemin);
 BA.debugLineNum = 2527;BA.debugLine="Scale(Axis).MaxAuto = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 0));
 }else {
 BA.debugLineNum = 2529;BA.debugLine="nbMin = Floor(ValMinMax(0) / Scale(Axis).Interva";
Debug.JustUpdateDeviceLine();
_nbmin = BA.numberCast(int.class, xchart.__c.runMethod(true,"Floor",(Object)(RemoteObject.solve(new RemoteObject[] {_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ )}, "/",0, 0))));Debug.locals.put("nbMin", _nbmin);
 BA.debugLineNum = 2530;BA.debugLine="If Abs(ValMinMax(0)) <= 0.000000000001 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Abs",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)))),BA.numberCast(double.class, 0.000000000001))) { 
 BA.debugLineNum = 2531;BA.debugLine="Scale(Axis).MinAuto = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 0));
 }else 
{ BA.debugLineNum = 2532;BA.debugLine="Else If ValMinMax(0) >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2533;BA.debugLine="Scale(Axis).MinAuto = nbMin * Scale(Axis).Inter";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {_nbmin,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ )}, "*",0, 0));
 }else 
{ BA.debugLineNum = 2534;BA.debugLine="Else If ValMinMax(0) < 0 And ValMinMax(1) > 0 Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2535;BA.debugLine="Scale(Axis).MinAuto = Floor(ValMinMax(0) / Scal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Floor",(Object)(RemoteObject.solve(new RemoteObject[] {_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/+",1, 0))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ )}, "*",0, 0));
 }else {
 BA.debugLineNum = 2537;BA.debugLine="Scale(Axis).MinAuto = Floor(ValMinMax(0) / Scal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Floor",(Object)(RemoteObject.solve(new RemoteObject[] {_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/+",1, 0))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ )}, "*",0, 0));
 }}}
;
 };
 BA.debugLineNum = 2540;BA.debugLine="Scale(Axis).MaxAuto = Scale(Axis).MinAuto + Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "+*",1, 0));
 BA.debugLineNum = 2543;BA.debugLine="If (Scale(Axis).MinAuto >= 0 And Scale(Axis).YZer";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))))) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxAuto" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))))) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxAuto" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 2544;BA.debugLine="If ValMinMax(0) < 0 And ValMinMax(1) > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2545;BA.debugLine="NbUsedIntervalsTop = Ceil(ValMinMax(1) / Scale(";
Debug.JustUpdateDeviceLine();
_nbusedintervalstop = BA.numberCast(int.class, xchart.__c.runMethod(true,"Ceil",(Object)(RemoteObject.solve(new RemoteObject[] {_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/-",1, 0))));Debug.locals.put("NbUsedIntervalsTop", _nbusedintervalstop);
 BA.debugLineNum = 2546;BA.debugLine="NbUsedIntervalsBottom = Ceil(Abs(ValMinMax(0))";
Debug.JustUpdateDeviceLine();
_nbusedintervalsbottom = BA.numberCast(int.class, xchart.__c.runMethod(true,"Ceil",(Object)(RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/-",1, 0))));Debug.locals.put("NbUsedIntervalsBottom", _nbusedintervalsbottom);
 BA.debugLineNum = 2547;BA.debugLine="NbUsedIntervals = NbUsedIntervalsTop + NbUsedIn";
Debug.JustUpdateDeviceLine();
_nbusedintervals = RemoteObject.solve(new RemoteObject[] {_nbusedintervalstop,_nbusedintervalsbottom}, "+",1, 1);Debug.locals.put("NbUsedIntervals", _nbusedintervals);
 BA.debugLineNum = 2548;BA.debugLine="If NbUsedIntervalsTop - NbUsedIntervalsBottom =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",RemoteObject.solve(new RemoteObject[] {_nbusedintervalstop,_nbusedintervalsbottom}, "-",1, 1),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 2549;BA.debugLine="NbIntervalsToMove = Scale(Axis).NbIntervals /";
Debug.JustUpdateDeviceLine();
_nbintervalstomove = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ ),RemoteObject.createImmutable(2),_nbusedintervalsbottom}, "/-",1, 0));Debug.locals.put("NbIntervalsToMove", _nbintervalstomove);
 }else {
 BA.debugLineNum = 2551;BA.debugLine="NbIntervalsToMove = (Scale(Axis).NbIntervals -";
Debug.JustUpdateDeviceLine();
_nbintervalstomove = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ ),_nbusedintervals}, "-",1, 1)),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("NbIntervalsToMove", _nbintervalstomove);
 };
 }else {
 BA.debugLineNum = 2554;BA.debugLine="NbUsedIntervals = Ceil(ValDiff / Scale(Axis).In";
Debug.JustUpdateDeviceLine();
_nbusedintervals = BA.numberCast(int.class, xchart.__c.runMethod(true,"Ceil",(Object)(RemoteObject.solve(new RemoteObject[] {_valdiff,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),RemoteObject.createImmutable(0.00000000000001)}, "/-",1, 0))));Debug.locals.put("NbUsedIntervals", _nbusedintervals);
 BA.debugLineNum = 2555;BA.debugLine="NbIntervalsToMove = (Scale(Axis).NbIntervals -";
Debug.JustUpdateDeviceLine();
_nbintervalstomove = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ ),_nbusedintervals}, "-",1, 1)),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("NbIntervalsToMove", _nbintervalstomove);
 };
 BA.debugLineNum = 2557;BA.debugLine="Scale(Axis).MinAuto = Scale(Axis).MinAuto - Scal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),_nbintervalstomove}, "-*",1, 0));
 };
 BA.debugLineNum = 2560;BA.debugLine="If Graph.ChartType = \"BAR\" Or Graph.ChartType = \"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_BAR"))) { 
 BA.debugLineNum = 2562;BA.debugLine="If 	ValMinMax(0) = 0 And ValMinMax(1) > 0 And Sc";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2563;BA.debugLine="Scale(Axis).MinAuto = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 0));
 };
 BA.debugLineNum = 2567;BA.debugLine="If 	ValMinMax(0) < 0 And ValMinMax(1) = 0 And Sc";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "+*",1, 0),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2568;BA.debugLine="Scale(Axis).MaxAuto = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxAuto" /*RemoteObject*/ ,BA.numberCast(double.class, 0));
 BA.debugLineNum = 2569;BA.debugLine="Scale(Axis).MinAuto = - Scale(Axis).IntervalAut";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinAuto" /*RemoteObject*/ ,BA.numberCast(double.class, -__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ).<Double>get().doubleValue()*(double) (0 + __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue())));
 };
 };
 BA.debugLineNum = 2574;BA.debugLine="Scale(Axis).MaxAuto = Scale(Axis).MinAuto + Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxAuto" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"NbIntervals" /*RemoteObject*/ )}, "+*",1, 0));
 BA.debugLineNum = 2576;BA.debugLine="Scale(Axis).MinVal = Scale(Axis).MinAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2577;BA.debugLine="Scale(Axis).MaxVal = Scale(Axis).MaxAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2578;BA.debugLine="Scale(Axis).Interval = Scale(Axis).IntervalAuto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Interval" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"IntervalAuto" /*RemoteObject*/ ));
 BA.debugLineNum = 2579;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _calcscalelogauto(RemoteObject __ref,RemoteObject _axis) throws Exception{
try {
		Debug.PushSubsStack("CalcScaleLogAuto (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2636);
if (RapidSub.canDelegate("calcscalelogauto")) { return __ref.runUserSub(false, "xchart","calcscalelogauto", __ref, _axis);}
RemoteObject _valminmax = null;
RemoteObject _valmaxmant = RemoteObject.createImmutable(0);
RemoteObject _valminmant = RemoteObject.createImmutable(0);
RemoteObject _valmaxlog = RemoteObject.createImmutable(0);
RemoteObject _valminlog = RemoteObject.createImmutable(0);
int _i = 0;
Debug.locals.put("Axis", _axis);
 BA.debugLineNum = 2636;BA.debugLine="Private Sub CalcScaleLogAuto(Axis As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2637;BA.debugLine="If Graph.ChartType = \"LINE\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 2638;BA.debugLine="Private ValMinMax(3) As Double";
Debug.JustUpdateDeviceLine();
_valminmax = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});Debug.locals.put("ValMinMax", _valminmax);
 BA.debugLineNum = 2639;BA.debugLine="ValMinMax = GetLinePointsMinMaxMeanValues(Axis)";
Debug.JustUpdateDeviceLine();
_valminmax = __ref.runClassMethod (b4a.example.xchart.class, "_getlinepointsminmaxmeanvalues" /*RemoteObject*/ ,(Object)(_axis));Debug.locals.put("ValMinMax", _valminmax);
 }else 
{ BA.debugLineNum = 2640;BA.debugLine="Else If Graph.ChartType = \"BAR\" Or Graph.ChartTyp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_BAR"))) { 
 BA.debugLineNum = 2641;BA.debugLine="Private ValMinMax(2) As Double";
Debug.JustUpdateDeviceLine();
_valminmax = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("ValMinMax", _valminmax);
 BA.debugLineNum = 2642;BA.debugLine="ValMinMax = GetBarPointsMinMaxValues";
Debug.JustUpdateDeviceLine();
_valminmax = __ref.runClassMethod (b4a.example.xchart.class, "_getbarpointsminmaxvalues" /*RemoteObject*/ );Debug.locals.put("ValMinMax", _valminmax);
 }}
;
 BA.debugLineNum = 2645;BA.debugLine="If ValMinMax(0) <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2646;BA.debugLine="Graph.Error = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Error" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 2647;BA.debugLine="Graph.ErrorText = \"Logarithmic scales with value";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ErrorText" /*RemoteObject*/ ,RemoteObject.concat(RemoteObject.createImmutable("Logarithmic scales with values"),RemoteObject.createImmutable("less or equal to zero is not allowed !")));
 BA.debugLineNum = 2648;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 2651;BA.debugLine="If ValMinMax(0) = ValMinMax(1) Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)))) { 
 BA.debugLineNum = 2652;BA.debugLine="If ValMinMax(0) = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2653;BA.debugLine="ScaleLog(Axis).MantMin = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MantMin" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 2654;BA.debugLine="ScaleLog(Axis).MantMax = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MantMax" /*RemoteObject*/ ,BA.numberCast(int.class, 1));
 BA.debugLineNum = 2655;BA.debugLine="ScaleLog(Axis).NbDecades = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("NbDecades" /*RemoteObject*/ ,BA.numberCast(int.class, 1));
 BA.debugLineNum = 2656;BA.debugLine="Scale(Axis).MinVal = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinVal" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 BA.debugLineNum = 2657;BA.debugLine="Scale(Axis).MaxVal = 10";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxVal" /*RemoteObject*/ ,BA.numberCast(double.class, 10));
 BA.debugLineNum = 2658;BA.debugLine="Scale(Axis).Interval = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Interval" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 BA.debugLineNum = 2659;BA.debugLine="Graph.Error = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Error" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 2660;BA.debugLine="Graph.ErrorText = \"Min and max values = \" & Val";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ErrorText" /*RemoteObject*/ ,RemoteObject.concat(RemoteObject.createImmutable("Min and max values = "),_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),RemoteObject.createImmutable(" are the same !")));
 BA.debugLineNum = 2661;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 };
 BA.debugLineNum = 2665;BA.debugLine="ScaleLogLogVals(Axis)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_scaleloglogvals" /*RemoteObject*/ ,(Object)(_axis));
 BA.debugLineNum = 2667;BA.debugLine="Private ValMaxMant, ValMinMant, ValMaxLog, ValMin";
Debug.JustUpdateDeviceLine();
_valmaxmant = RemoteObject.createImmutable(0);Debug.locals.put("ValMaxMant", _valmaxmant);
_valminmant = RemoteObject.createImmutable(0);Debug.locals.put("ValMinMant", _valminmant);
_valmaxlog = RemoteObject.createImmutable(0);Debug.locals.put("ValMaxLog", _valmaxlog);
_valminlog = RemoteObject.createImmutable(0);Debug.locals.put("ValMinLog", _valminlog);
 BA.debugLineNum = 2668;BA.debugLine="ValMinLog = Logarithm(ValMinMax(0), 10)";
Debug.JustUpdateDeviceLine();
_valminlog = xchart.__c.runMethod(true,"Logarithm",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("ValMinLog", _valminlog);
 BA.debugLineNum = 2669;BA.debugLine="ValMaxLog = Logarithm(ValMinMax(1), 10)";
Debug.JustUpdateDeviceLine();
_valmaxlog = xchart.__c.runMethod(true,"Logarithm",(Object)(_valminmax.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("ValMaxLog", _valmaxlog);
 BA.debugLineNum = 2670;BA.debugLine="ValMinMant = Floor(ValMinLog)";
Debug.JustUpdateDeviceLine();
_valminmant = xchart.__c.runMethod(true,"Floor",(Object)(_valminlog));Debug.locals.put("ValMinMant", _valminmant);
 BA.debugLineNum = 2671;BA.debugLine="ValMaxMant = Floor(ValMaxLog)";
Debug.JustUpdateDeviceLine();
_valmaxmant = xchart.__c.runMethod(true,"Floor",(Object)(_valmaxlog));Debug.locals.put("ValMaxMant", _valmaxmant);
 BA.debugLineNum = 2672;BA.debugLine="ValMinLog = ValMinLog - ValMinMant";
Debug.JustUpdateDeviceLine();
_valminlog = RemoteObject.solve(new RemoteObject[] {_valminlog,_valminmant}, "-",1, 0);Debug.locals.put("ValMinLog", _valminlog);
 BA.debugLineNum = 2673;BA.debugLine="ValMaxLog = ValMaxLog - ValMaxMant";
Debug.JustUpdateDeviceLine();
_valmaxlog = RemoteObject.solve(new RemoteObject[] {_valmaxlog,_valmaxmant}, "-",1, 0);Debug.locals.put("ValMaxLog", _valmaxlog);
 BA.debugLineNum = 2675;BA.debugLine="ScaleLog(Axis).MantMin = ValMinMant";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MantMin" /*RemoteObject*/ ,BA.numberCast(int.class, _valminmant));
 BA.debugLineNum = 2676;BA.debugLine="For i = 0 To ScaleLog(Axis).Logs.Length - 2";
Debug.JustUpdateDeviceLine();
{
final int step35 = 1;
final int limit35 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(2)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step35 > 0 && _i <= limit35) || (step35 < 0 && _i >= limit35) ;_i = ((int)(0 + _i + step35))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2677;BA.debugLine="If ValMinLog >= ScaleLog(Axis).Logs(i) And ValMi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_valminlog,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))) && RemoteObject.solveBoolean("<",_valminlog,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(_i),RemoteObject.createImmutable(1)}, "+",1, 1)))) { 
 BA.debugLineNum = 2678;BA.debugLine="ScaleLog(Axis).LogMin = ScaleLog(Axis).Logs(i)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMin" /*RemoteObject*/ ,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i)));
 BA.debugLineNum = 2679;BA.debugLine="ScaleLog(Axis).LogMinIndex = i";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMinIndex" /*RemoteObject*/ ,BA.numberCast(int.class, _i));
 BA.debugLineNum = 2680;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2684;BA.debugLine="ScaleLog(Axis).MantMax = ValMaxMant";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MantMax" /*RemoteObject*/ ,BA.numberCast(int.class, _valmaxmant));
 BA.debugLineNum = 2685;BA.debugLine="ScaleLog(Axis).LogMax = ValMaxLog";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMax" /*RemoteObject*/ ,_valmaxlog);
 BA.debugLineNum = 2686;BA.debugLine="If ScaleLog(Axis).LogMax <> Abs(0.000000000001) T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMax" /*RemoteObject*/ ),xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, 0.000000000001))))) { 
 BA.debugLineNum = 2687;BA.debugLine="For i = 0 To ScaleLog(Axis).Logs.Length - 2";
Debug.JustUpdateDeviceLine();
{
final int step45 = 1;
final int limit45 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(2)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step45 > 0 && _i <= limit45) || (step45 < 0 && _i >= limit45) ;_i = ((int)(0 + _i + step45))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2688;BA.debugLine="If ValMaxLog > ScaleLog(Axis).Logs(i) And ValMa";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_valmaxlog,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))) && RemoteObject.solveBoolean("k",_valmaxlog,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(_i),RemoteObject.createImmutable(1)}, "+",1, 1)))) { 
 BA.debugLineNum = 2689;BA.debugLine="ScaleLog(Axis).LogMax = ScaleLog(Axis).Logs(i";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMax" /*RemoteObject*/ ,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(_i),RemoteObject.createImmutable(1)}, "+",1, 1)));
 BA.debugLineNum = 2690;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 2695;BA.debugLine="If ScaleLog(Axis).LogMax = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMax" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 2696;BA.debugLine="ScaleLog(Axis).MantMax = ScaleLog(Axis).MantMax";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MantMax" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMax" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+",1, 1));
 BA.debugLineNum = 2697;BA.debugLine="ScaleLog(Axis).LogMax = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMax" /*RemoteObject*/ ,BA.numberCast(double.class, 0));
 };
 BA.debugLineNum = 2699;BA.debugLine="Scale(Axis).MinVal = Power(10, ScaleLog(Axis).Man";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MinVal" /*RemoteObject*/ ,xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0))));
 BA.debugLineNum = 2700;BA.debugLine="Scale(Axis).MaxVal = Power(10, ScaleLog(Axis).Man";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MaxVal" /*RemoteObject*/ ,xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMax" /*RemoteObject*/ )}, "+",1, 0))));
 BA.debugLineNum = 2701;BA.debugLine="Scale(Axis).Interval = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Interval" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 BA.debugLineNum = 2702;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _calcscalelogmanu(RemoteObject __ref,RemoteObject _axis) throws Exception{
try {
		Debug.PushSubsStack("CalcScaleLogManu (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2608);
if (RapidSub.canDelegate("calcscalelogmanu")) { return __ref.runUserSub(false, "xchart","calcscalelogmanu", __ref, _axis);}
RemoteObject _vallog = RemoteObject.createImmutable(0);
int _i = 0;
Debug.locals.put("Axis", _axis);
 BA.debugLineNum = 2608;BA.debugLine="Private Sub CalcScaleLogManu(Axis As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2609;BA.debugLine="Private ValLog As Double";
Debug.JustUpdateDeviceLine();
_vallog = RemoteObject.createImmutable(0);Debug.locals.put("ValLog", _vallog);
 BA.debugLineNum = 2611;BA.debugLine="ScaleLogLogVals(Axis)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_scaleloglogvals" /*RemoteObject*/ ,(Object)(_axis));
 BA.debugLineNum = 2613;BA.debugLine="ValLog = Logarithm(Scale(Axis).MaxManu, 10)";
Debug.JustUpdateDeviceLine();
_vallog = xchart.__c.runMethod(true,"Logarithm",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MaxManu" /*RemoteObject*/ )),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("ValLog", _vallog);
 BA.debugLineNum = 2614;BA.debugLine="ScaleLog(Axis).MantMax = Floor(ValLog)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MantMax" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Floor",(Object)(_vallog))));
 BA.debugLineNum = 2615;BA.debugLine="ScaleLog(Axis).LogMax = ValLog - ScaleLog(Axis).M";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMax" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {_vallog,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMax" /*RemoteObject*/ )}, "-",1, 0));
 BA.debugLineNum = 2616;BA.debugLine="ValLog = Logarithm(Scale(Axis).MinManu, 10)";
Debug.JustUpdateDeviceLine();
_vallog = xchart.__c.runMethod(true,"Logarithm",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MinManu" /*RemoteObject*/ )),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("ValLog", _vallog);
 BA.debugLineNum = 2617;BA.debugLine="ScaleLog(Axis).MantMin = Floor(ValLog)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("MantMin" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Floor",(Object)(_vallog))));
 BA.debugLineNum = 2618;BA.debugLine="ScaleLog(Axis).LogMin = ValLog - ScaleLog(Axis).M";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMin" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {_vallog,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMin" /*RemoteObject*/ )}, "-",1, 0));
 BA.debugLineNum = 2620;BA.debugLine="For i = 0 To ScaleLog(Axis).Logs.Length - 2";
Debug.JustUpdateDeviceLine();
{
final int step9 = 1;
final int limit9 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(2)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step9 > 0 && _i <= limit9) || (step9 < 0 && _i >= limit9) ;_i = ((int)(0 + _i + step9))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2621;BA.debugLine="If Round2(ScaleLog(Axis).LogMin, 14) >= Round2(S";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMin" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 14))),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))),(Object)(BA.numberCast(int.class, 14)))) && RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMin" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 14))),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(_i),RemoteObject.createImmutable(1)}, "+",1, 1))),(Object)(BA.numberCast(int.class, 14))))) { 
 BA.debugLineNum = 2622;BA.debugLine="ScaleLog(Axis).LogMin = ScaleLog(Axis).Logs(i)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMin" /*RemoteObject*/ ,__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i)));
 BA.debugLineNum = 2623;BA.debugLine="ScaleLog(Axis).LogMinIndex = i";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("LogMinIndex" /*RemoteObject*/ ,BA.numberCast(int.class, _i));
 BA.debugLineNum = 2624;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2628;BA.debugLine="If Axis = sX Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_axis,BA.numberCast(double.class, __ref.getField(true,"_sx" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 2629;BA.debugLine="ScaleLog(Axis).Scale = Graph.Width / (ScaleLog(A";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMin" /*RemoteObject*/ )}, "+--",3, 0))}, "/",0, 0));
 }else {
 BA.debugLineNum = 2631;BA.debugLine="ScaleLog(Axis).Scale = Graph.Height / (ScaleLog(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"LogMin" /*RemoteObject*/ )}, "+--",3, 0))}, "/",0, 0));
 };
 BA.debugLineNum = 2633;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _calcscalemanu(RemoteObject __ref,RemoteObject _index) throws Exception{
try {
		Debug.PushSubsStack("CalcScaleManu (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2377);
if (RapidSub.canDelegate("calcscalemanu")) { return __ref.runUserSub(false, "xchart","calcscalemanu", __ref, _index);}
RemoteObject _valminmax = null;
Debug.locals.put("Index", _index);
 BA.debugLineNum = 2377;BA.debugLine="Private Sub CalcScaleManu(Index As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2378;BA.debugLine="Private ValMinMax(3) As Double";
Debug.JustUpdateDeviceLine();
_valminmax = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});Debug.locals.put("ValMinMax", _valminmax);
 BA.debugLineNum = 2380;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE"),BA.ObjectToString("H_LINE"),BA.ObjectToString("YX_CHART"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("BUBBLE"))) {
case 0: 
case 1: 
case 2: 
case 3: 
case 4: 
case 5: {
 BA.debugLineNum = 2382;BA.debugLine="ValMinMax = GetLinePointsMinMaxMeanValues(sY(0)";
Debug.JustUpdateDeviceLine();
_valminmax = __ref.runClassMethod (b4a.example.xchart.class, "_getlinepointsminmaxmeanvalues" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));Debug.locals.put("ValMinMax", _valminmax);
 BA.debugLineNum = 2383;BA.debugLine="If Scale(sY(0)).YZeroAxis = True And ValMinMax(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("g",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2384;BA.debugLine="ValMinMax(0) = 0";
Debug.JustUpdateDeviceLine();
_valminmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 0));
 };
 BA.debugLineNum = 2386;BA.debugLine="If Scale(sY(0)).YZeroAxis = True And ValMinMax(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxis" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("<",_valminmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",_valminmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2387;BA.debugLine="ValMinMax(1) = 0";
Debug.JustUpdateDeviceLine();
_valminmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 1));
 };
 break; }
default: {
 BA.debugLineNum = 2390;BA.debugLine="ValMinMax = GetBarPointsMinMaxValues";
Debug.JustUpdateDeviceLine();
_valminmax = __ref.runClassMethod (b4a.example.xchart.class, "_getbarpointsminmaxvalues" /*RemoteObject*/ );Debug.locals.put("ValMinMax", _valminmax);
 break; }
}
;
 BA.debugLineNum = 2393;BA.debugLine="Scale(Index).MaxVal = Scale(Index).MaxManu";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).setField ("MaxVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MaxManu" /*RemoteObject*/ ));
 BA.debugLineNum = 2394;BA.debugLine="Scale(Index).MinVal = Scale(Index).MinManu";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).setField ("MinVal" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MinManu" /*RemoteObject*/ ));
 BA.debugLineNum = 2395;BA.debugLine="Scale(Index).IntervalManu = (Scale(Index).MaxVal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).setField ("IntervalManu" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0));
 BA.debugLineNum = 2396;BA.debugLine="Scale(Index).Interval = Scale(Index).IntervalManu";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).setField ("Interval" /*RemoteObject*/ ,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"IntervalManu" /*RemoteObject*/ ));
 BA.debugLineNum = 2397;BA.debugLine="Scale(Index).Exp = Floor(Logarithm((Scale(Index).";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).setField ("Exp" /*RemoteObject*/ ,xchart.__c.runMethod(true,"Floor",(Object)(xchart.__c.runMethod(true,"Logarithm",(Object)(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0)),(Object)(BA.numberCast(double.class, 10))))));
 BA.debugLineNum = 2398;BA.debugLine="If Index = sY(0) Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_index,BA.numberCast(double.class, __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))))) { 
 BA.debugLineNum = 2399;BA.debugLine="Scale(Index).Scale = Graph.Height / (Scale(Index";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 }else {
 BA.debugLineNum = 2401;BA.debugLine="Scale(Index).Scale = Graph.Width / (Scale(Index)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _index).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 };
 BA.debugLineNum = 2403;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _class_globals(RemoteObject __ref) throws Exception{
 //BA.debugLineNum = 154;BA.debugLine="Sub Class_Globals";
 //BA.debugLineNum = 155;BA.debugLine="Type ChartData (Title As String, Subtitle As Stri";
;
 //BA.debugLineNum = 156;BA.debugLine="Type PointData (X As String, YArray() As Double,";
;
 //BA.debugLineNum = 157;BA.debugLine="Type ItemData (Name As String, Color As Int, Valu";
;
 //BA.debugLineNum = 158;BA.debugLine="Type ScaleData (Scale As Double, MinVal As Double";
;
 //BA.debugLineNum = 159;BA.debugLine="Type ScaleDataLog(Scale As Double, MantMin As Int";
;
 //BA.debugLineNum = 160;BA.debugLine="Type TextData (TitleFont As B4XFont, SubtitleFont";
;
 //BA.debugLineNum = 161;BA.debugLine="Type LegendData (IncludeLegend As String, TextFon";
;
 //BA.debugLineNum = 162;BA.debugLine="Type ValuesData (Show As Boolean, ShowOnHover As";
;
 //BA.debugLineNum = 163;BA.debugLine="Type NumberFormats(MinimumIntegers As Int, Maximu";
;
 //BA.debugLineNum = 164;BA.debugLine="Type HLine(Value As Double, Color As Int, StrokeW";
;
 //BA.debugLineNum = 165;BA.debugLine="Type ZoomBarData(Active As Boolean, BeginIndex As";
;
 //BA.debugLineNum = 166;BA.debugLine="Type BarData(WickColor As Int, WickWidth As Int,";
;
 //BA.debugLineNum = 167;BA.debugLine="Type BubbleData(x As Int, y As Int, Radius As Int";
;
 //BA.debugLineNum = 169;BA.debugLine="Private mEventName As String 'ignore";
xchart._meventname = RemoteObject.createImmutable("");__ref.setField("_meventname",xchart._meventname);
 //BA.debugLineNum = 170;BA.debugLine="Private mCallBack As Object 'ignore";
xchart._mcallback = RemoteObject.createNew ("Object");__ref.setField("_mcallback",xchart._mcallback);
 //BA.debugLineNum = 171;BA.debugLine="Public mBase As B4XView";
xchart._mbase = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper");__ref.setField("_mbase",xchart._mbase);
 //BA.debugLineNum = 172;BA.debugLine="Private xui As XUI";
xchart._xui = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper.XUI");__ref.setField("_xui",xchart._xui);
 //BA.debugLineNum = 173;BA.debugLine="Public Tag As Object";
xchart._tag = RemoteObject.createNew ("Object");__ref.setField("_tag",xchart._tag);
 //BA.debugLineNum = 177;BA.debugLine="Private LongClickTimer As Timer";
xchart._longclicktimer = RemoteObject.createNew ("anywheresoftware.b4a.objects.Timer");__ref.setField("_longclicktimer",xchart._longclicktimer);
 //BA.debugLineNum = 178;BA.debugLine="Private xpnlGraph As B4XView";
xchart._xpnlgraph = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper");__ref.setField("_xpnlgraph",xchart._xpnlgraph);
 //BA.debugLineNum = 179;BA.debugLine="Private xcvsGraph As B4XCanvas";
xchart._xcvsgraph = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas");__ref.setField("_xcvsgraph",xchart._xcvsgraph);
 //BA.debugLineNum = 180;BA.debugLine="Private xpnlValues As B4XView";
xchart._xpnlvalues = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper");__ref.setField("_xpnlvalues",xchart._xpnlvalues);
 //BA.debugLineNum = 181;BA.debugLine="Private xcvsValues As B4XCanvas";
xchart._xcvsvalues = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas");__ref.setField("_xcvsvalues",xchart._xcvsvalues);
 //BA.debugLineNum = 182;BA.debugLine="Private xpnlCursor As B4XView";
xchart._xpnlcursor = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper");__ref.setField("_xpnlcursor",xchart._xpnlcursor);
 //BA.debugLineNum = 183;BA.debugLine="Private xcvsCursor As B4XCanvas";
xchart._xcvscursor = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas");__ref.setField("_xcvscursor",xchart._xcvscursor);
 //BA.debugLineNum = 184;BA.debugLine="Private xpnlZoomBar As B4XView";
xchart._xpnlzoombar = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper");__ref.setField("_xpnlzoombar",xchart._xpnlzoombar);
 //BA.debugLineNum = 185;BA.debugLine="Private xcvsZoomBar As B4XCanvas";
xchart._xcvszoombar = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas");__ref.setField("_xcvszoombar",xchart._xcvszoombar);
 //BA.debugLineNum = 186;BA.debugLine="Private pthGrid As B4XPath";
xchart._pthgrid = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");__ref.setField("_pthgrid",xchart._pthgrid);
 //BA.debugLineNum = 188;BA.debugLine="Private NbMaxDifferentScales = 4 As Int";
xchart._nbmaxdifferentscales = BA.numberCast(int.class, 4);__ref.setField("_nbmaxdifferentscales",xchart._nbmaxdifferentscales);
 //BA.debugLineNum = 189;BA.debugLine="Private Scale(NbMaxDifferentScales + 1) As ScaleD";
xchart._scale = RemoteObject.createNewArray ("b4a.example.xchart._scaledata", new int[] {RemoteObject.solve(new RemoteObject[] {__ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+",1, 1).<Integer>get().intValue()}, new Object[]{});__ref.setField("_scale",xchart._scale);
 //BA.debugLineNum = 190;BA.debugLine="Private ScaleLog(NbMaxDifferentScales + 1) As Sca";
xchart._scalelog = RemoteObject.createNewArray ("b4a.example.xchart._scaledatalog", new int[] {RemoteObject.solve(new RemoteObject[] {__ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+",1, 1).<Integer>get().intValue()}, new Object[]{});__ref.setField("_scalelog",xchart._scalelog);
 //BA.debugLineNum = 191;BA.debugLine="Private sX, sY(NbMaxDifferentScales) As Int";
xchart._sx = RemoteObject.createImmutable(0);__ref.setField("_sx",xchart._sx);
xchart._sy = RemoteObject.createNewArray ("int", new int[] {__ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ).<Integer>get().intValue()}, new Object[]{});__ref.setField("_sy",xchart._sy);
 //BA.debugLineNum = 192;BA.debugLine="Public Items As List";
xchart._items = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");__ref.setField("_items",xchart._items);
 //BA.debugLineNum = 193;BA.debugLine="Public Points As List";
xchart._points = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");__ref.setField("_points",xchart._points);
 //BA.debugLineNum = 194;BA.debugLine="Private HLines As List";
xchart._hlines = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");__ref.setField("_hlines",xchart._hlines);
 //BA.debugLineNum = 195;BA.debugLine="Private Bubbles As List";
xchart._bubbles = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");__ref.setField("_bubbles",xchart._bubbles);
 //BA.debugLineNum = 196;BA.debugLine="Private Graph As ChartData";
xchart._graph = RemoteObject.createNew ("b4a.example.xchart._chartdata");__ref.setField("_graph",xchart._graph);
 //BA.debugLineNum = 197;BA.debugLine="Private Texts As TextData";
xchart._texts = RemoteObject.createNew ("b4a.example.xchart._textdata");__ref.setField("_texts",xchart._texts);
 //BA.debugLineNum = 198;BA.debugLine="Private Legend As LegendData";
xchart._legend = RemoteObject.createNew ("b4a.example.xchart._legenddata");__ref.setField("_legend",xchart._legend);
 //BA.debugLineNum = 199;BA.debugLine="Private Values As ValuesData";
xchart._values = RemoteObject.createNew ("b4a.example.xchart._valuesdata");__ref.setField("_values",xchart._values);
 //BA.debugLineNum = 200;BA.debugLine="Private Zoom As ZoomBarData";
xchart._zoom = RemoteObject.createNew ("b4a.example.xchart._zoombardata");__ref.setField("_zoom",xchart._zoom);
 //BA.debugLineNum = 201;BA.debugLine="Private Bar As BarData";
xchart._bar = RemoteObject.createNew ("b4a.example.xchart._bardata");__ref.setField("_bar",xchart._bar);
 //BA.debugLineNum = 202;BA.debugLine="Private MinMaxMeanValues(3) As Double";
xchart._minmaxmeanvalues = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});__ref.setField("_minmaxmeanvalues",xchart._minmaxmeanvalues);
 //BA.debugLineNum = 203;BA.debugLine="Private BMVNF As NumberFormats		' Bar Mean Value";
xchart._bmvnf = RemoteObject.createNew ("b4a.example.xchart._numberformats");__ref.setField("_bmvnf",xchart._bmvnf);
 //BA.debugLineNum = 204;BA.debugLine="Private BMVNFUsed As Boolean			' True if a custom";
xchart._bmvnfused = RemoteObject.createImmutable(false);__ref.setField("_bmvnfused",xchart._bmvnfused);
 //BA.debugLineNum = 205;BA.debugLine="Private BarWidth0 = False As Boolean";
xchart._barwidth0 = xchart.__c.getField(true,"False");__ref.setField("_barwidth0",xchart._barwidth0);
 //BA.debugLineNum = 206;BA.debugLine="Private mPiePercentageNbFractions As Int";
xchart._mpiepercentagenbfractions = RemoteObject.createImmutable(0);__ref.setField("_mpiepercentagenbfractions",xchart._mpiepercentagenbfractions);
 //BA.debugLineNum = 207;BA.debugLine="Private mKeepDisplayValues = \"NONE\" As String";
xchart._mkeepdisplayvalues = BA.ObjectToString("NONE");__ref.setField("_mkeepdisplayvalues",xchart._mkeepdisplayvalues);
 //BA.debugLineNum = 208;BA.debugLine="Private mHChartsXScaleOnTop = False As Boolean";
xchart._mhchartsxscaleontop = xchart.__c.getField(true,"False");__ref.setField("_mhchartsxscaleontop",xchart._mhchartsxscaleontop);
 //BA.debugLineNum = 209;BA.debugLine="Private mHChartsTicksTopDown = False As Boolean";
xchart._mhchartstickstopdown = xchart.__c.getField(true,"False");__ref.setField("_mhchartstickstopdown",xchart._mhchartstickstopdown);
 //BA.debugLineNum = 210;BA.debugLine="Private mYXChartDisplayValues = True As Boolean";
xchart._myxchartdisplayvalues = xchart.__c.getField(true,"True");__ref.setField("_myxchartdisplayvalues",xchart._myxchartdisplayvalues);
 //BA.debugLineNum = 211;BA.debugLine="Private mYXChartDisplayPosition = True As String";
xchart._myxchartdisplayposition = BA.ObjectToString(xchart.__c.getField(true,"True"));__ref.setField("_myxchartdisplayposition",xchart._myxchartdisplayposition);
 //BA.debugLineNum = 212;BA.debugLine="Private mYXChartDisplayCrossHair = True As Boolea";
xchart._myxchartdisplaycrosshair = xchart.__c.getField(true,"True");__ref.setField("_myxchartdisplaycrosshair",xchart._myxchartdisplaycrosshair);
 //BA.debugLineNum = 213;BA.debugLine="Private mYXChartCrossHairColor As Int";
xchart._myxchartcrosshaircolor = RemoteObject.createImmutable(0);__ref.setField("_myxchartcrosshaircolor",xchart._myxchartcrosshaircolor);
 //BA.debugLineNum = 214;BA.debugLine="Private mYXChartCrossHairDeltaY As Int";
xchart._myxchartcrosshairdeltay = RemoteObject.createImmutable(0);__ref.setField("_myxchartcrosshairdeltay",xchart._myxchartcrosshairdeltay);
 //BA.debugLineNum = 215;BA.debugLine="Private mMissingDataValue = 1000000000 As Double";
xchart._mmissingdatavalue = BA.numberCast(double.class, 1000000000);__ref.setField("_mmissingdatavalue",xchart._mmissingdatavalue);
 //BA.debugLineNum = 216;BA.debugLine="Private RightScaleWidth As Int";
xchart._rightscalewidth = RemoteObject.createImmutable(0);__ref.setField("_rightscalewidth",xchart._rightscalewidth);
 //BA.debugLineNum = 217;BA.debugLine="Private mBubbleValMinMax(2), mBubbleDiameterMin,";
xchart._mbubblevalminmax = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});__ref.setField("_mbubblevalminmax",xchart._mbubblevalminmax);
xchart._mbubblediametermin = RemoteObject.createImmutable(0);__ref.setField("_mbubblediametermin",xchart._mbubblediametermin);
xchart._mbubblediametermax = RemoteObject.createImmutable(0);__ref.setField("_mbubblediametermax",xchart._mbubblediametermax);
 //BA.debugLineNum = 218;BA.debugLine="Private mBubbleRadiusMin, mBubbleRadiusMax As Int";
xchart._mbubbleradiusmin = RemoteObject.createImmutable(0);__ref.setField("_mbubbleradiusmin",xchart._mbubbleradiusmin);
xchart._mbubbleradiusmax = RemoteObject.createImmutable(0);__ref.setField("_mbubbleradiusmax",xchart._mbubbleradiusmax);
 //BA.debugLineNum = 219;BA.debugLine="Private mBubbleSmallSnap As Boolean";
xchart._mbubblesmallsnap = RemoteObject.createImmutable(false);__ref.setField("_mbubblesmallsnap",xchart._mbubblesmallsnap);
 //BA.debugLineNum = 220;BA.debugLine="End Sub";
return RemoteObject.createImmutable("");
}
public static RemoteObject  _cleardata(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("ClearData (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6917);
if (RapidSub.canDelegate("cleardata")) { return __ref.runUserSub(false, "xchart","cleardata", __ref);}
 BA.debugLineNum = 6917;BA.debugLine="Public Sub ClearData";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6918;BA.debugLine="ClearPoints";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_clearpoints" /*RemoteObject*/ );
 BA.debugLineNum = 6919;BA.debugLine="Items.Clear";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Clear");
 BA.debugLineNum = 6921;BA.debugLine="HLines.Clear";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_hlines" /*RemoteObject*/ ).runVoidMethod ("Clear");
 BA.debugLineNum = 6922;BA.debugLine="Zoom.BeginIndex = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 6923;BA.debugLine="Zoom.EndIndex = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 6924;BA.debugLine="Zoom.NbVisiblePoints = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("NbVisiblePoints" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 6925;BA.debugLine="If Zoom.Active = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Active" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 6926;BA.debugLine="xpnlZoomBar.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 6927;BA.debugLine="xpnlGraph.Height = mBase.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 6928;BA.debugLine="xpnlCursor.Height = mBase.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 6929;BA.debugLine="xcvsGraph.Resize(mBase.Width, mBase.Height)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 6930;BA.debugLine="xcvsCursor.Resize(mBase.Width, mBase.Height)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 };
 BA.debugLineNum = 6932;BA.debugLine="Zoom.Active = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Active" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 6933;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _cleardisplayedvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("ClearDisplayedValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8490);
if (RapidSub.canDelegate("cleardisplayedvalues")) { return __ref.runUserSub(false, "xchart","cleardisplayedvalues", __ref);}
 BA.debugLineNum = 8490;BA.debugLine="Public Sub ClearDisplayedValues";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8494;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("CURSOR"))) { 
 BA.debugLineNum = 8495;BA.debugLine="xcvsValues.ClearRect(xcvsValues.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 };
 BA.debugLineNum = 8497;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("BOTH"))) { 
 BA.debugLineNum = 8498;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 8499;BA.debugLine="xcvsCursor.ClearRect(Values.rectCursor)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ )));
 BA.debugLineNum = 8500;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 };
 BA.debugLineNum = 8502;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _clearpoints(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("ClearPoints (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6936);
if (RapidSub.canDelegate("clearpoints")) { return __ref.runUserSub(false, "xchart","clearpoints", __ref);}
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
 BA.debugLineNum = 6936;BA.debugLine="Public Sub ClearPoints";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6937;BA.debugLine="Points.Clear";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Clear");
 BA.debugLineNum = 6938;BA.debugLine="If (Graph.ChartType = \"YX_CHART\" Or Graph.ChartTy";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("BUBBLE"))))) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6939;BA.debugLine="Private l As Int";
Debug.JustUpdateDeviceLine();
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
 BA.debugLineNum = 6940;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step4 > 0 && _l.<Integer>get().intValue() <= limit4) || (step4 < 0 && _l.<Integer>get().intValue() >= limit4) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step4))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 6941;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 6942;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 6943;BA.debugLine="ID.YXArray.Initialize";
Debug.JustUpdateDeviceLine();
_id.getField(false,"YXArray" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 }
}Debug.locals.put("l", _l);
;
 };
 BA.debugLineNum = 6946;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _designercreateview(RemoteObject __ref,RemoteObject _base,RemoteObject _lbl,RemoteObject _props) throws Exception{
try {
		Debug.PushSubsStack("DesignerCreateView (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,235);
if (RapidSub.canDelegate("designercreateview")) { return __ref.runUserSub(false, "xchart","designercreateview", __ref, _base, _lbl, _props);}
int _i = 0;
Debug.locals.put("Base", _base);
Debug.locals.put("Lbl", _lbl);
Debug.locals.put("Props", _props);
 BA.debugLineNum = 235;BA.debugLine="Public Sub DesignerCreateView (Base As Object, Lbl";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 236;BA.debugLine="mBase = Base";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).setObject (_base);
 BA.debugLineNum = 237;BA.debugLine="Tag = mBase.Tag";
Debug.JustUpdateDeviceLine();
__ref.setField ("_tag" /*RemoteObject*/ ,__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(false,"getTag"));
 BA.debugLineNum = 238;BA.debugLine="mBase.Tag = Me";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(false,"setTag",__ref);
 BA.debugLineNum = 240;BA.debugLine="Scale(sY(0)).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).runVoidMethod ("Initialize");
 BA.debugLineNum = 241;BA.debugLine="Scale(sY(1)).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).runVoidMethod ("Initialize");
 BA.debugLineNum = 242;BA.debugLine="Scale(sY(2)).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).runVoidMethod ("Initialize");
 BA.debugLineNum = 243;BA.debugLine="Scale(sY(3)).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).runVoidMethod ("Initialize");
 BA.debugLineNum = 244;BA.debugLine="Scale(sX).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).runVoidMethod ("Initialize");
 BA.debugLineNum = 245;BA.debugLine="ScaleLog(sY(0)).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).runVoidMethod ("Initialize");
 BA.debugLineNum = 246;BA.debugLine="ScaleLog(sY(1)).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).runVoidMethod ("Initialize");
 BA.debugLineNum = 247;BA.debugLine="ScaleLog(sX).Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).runVoidMethod ("Initialize");
 BA.debugLineNum = 248;BA.debugLine="Items.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_items" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 249;BA.debugLine="Points.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 250;BA.debugLine="HLines.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_hlines" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 251;BA.debugLine="Graph.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 252;BA.debugLine="Texts.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 253;BA.debugLine="Legend.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 254;BA.debugLine="Values.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 255;BA.debugLine="BMVNF.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 256;BA.debugLine="Bubbles.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bubbles" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 257;BA.debugLine="Legend.LineNumbers.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineNumbers" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 258;BA.debugLine="Legend.LineChange.Initialize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineChange" /*RemoteObject*/ ).runVoidMethod ("Initialize");
 BA.debugLineNum = 260;BA.debugLine="Graph.Title = Props.GetDefault(\"Title\", \"\")";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Title" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("Title"))),(Object)((RemoteObject.createImmutable(""))))));
 BA.debugLineNum = 261;BA.debugLine="Graph.Subtitle = Props.GetDefault(\"Subtitle\", \"\")";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Subtitle" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("Subtitle"))),(Object)((RemoteObject.createImmutable(""))))));
 BA.debugLineNum = 262;BA.debugLine="Graph.XAxisName = Props.GetDefault(\"XAxisName\", \"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XAxisName" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("XAxisName"))),(Object)((RemoteObject.createImmutable("X axis"))))));
 BA.debugLineNum = 263;BA.debugLine="Graph.YAxisName = Props.GetDefault(\"YAxisName\", \"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("YAxisName" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YAxisName"))),(Object)((RemoteObject.createImmutable("Y axis"))))));
 BA.debugLineNum = 264;BA.debugLine="Graph.YAxisName2 = Props.GetDefault(\"YAxisName2\",";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("YAxisName2" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YAxisName2"))),(Object)((RemoteObject.createImmutable(""))))));
 BA.debugLineNum = 265;BA.debugLine="Scale(sX).YZeroAxis = Props.GetDefault(\"XZeroAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("YZeroAxis" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("XZeroAxis"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 266;BA.debugLine="Scale(sX).YZeroAxisHighlight = Props.GetDefault(\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("YZeroAxisHighlight" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("XZeroAxisHighlight"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 267;BA.debugLine="For i = 0 To sY.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step30 = 1;
final int limit30 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_sy" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step30 > 0 && _i <= limit30) || (step30 < 0 && _i >= limit30) ;_i = ((int)(0 + _i + step30))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 268;BA.debugLine="Scale(sY(i)).MaxManu = Props.GetDefault(\"YMaxVal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("MaxManu" /*RemoteObject*/ ,BA.numberCast(double.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YMaxValue"))),(Object)(RemoteObject.createImmutable((100))))));
 BA.debugLineNum = 269;BA.debugLine="Scale(sY(i)).MinManu = Props.GetDefault(\"YMinVal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("MinManu" /*RemoteObject*/ ,BA.numberCast(double.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YMinValue"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 270;BA.debugLine="Scale(sY(i)).NbIntervals = Props.GetDefault(\"NbY";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("NbIntervals" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("NbYIntervals"))),(Object)(RemoteObject.createImmutable((10))))));
 BA.debugLineNum = 271;BA.debugLine="Scale(sY(i)).YZeroAxis = Props.GetDefault(\"YZero";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("YZeroAxis" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YZeroAxis"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 272;BA.debugLine="Scale(sY(i)).YZeroAxisHighlight = Props.GetDefau";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("YZeroAxisHighlight" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YZeroAxisHighlight"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 273;BA.debugLine="Scale(sY(i)).Automatic = Props.GetDefault(\"Autom";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("Automatic" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("AutomaticScale"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 274;BA.debugLine="Scale(sY(i)).Different = Props.GetDefault(\"Diffe";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("Different" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DifferentScales"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 275;BA.debugLine="Scale(sY(i)).Logarithmic = Props.GetDefault(\"Log";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("Logarithmic" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("LogarithmicYScale"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 276;BA.debugLine="Scale(sY(i)).ScaleValues = Props.GetDefault(\"Sca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("ScaleValues" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ScaleValues"))),(Object)((RemoteObject.createImmutable("1!2!2.5!5!10"))))));
 BA.debugLineNum = 277;BA.debugLine="Scale(sY(i)).DrawYScale = Props.GetDefault(\"Draw";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("DrawYScale" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DrawYScale"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 278;BA.debugLine="Scale(sY(i)).ReverseYScale = Props.GetDefault(\"R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("ReverseYScale" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ReverseYScale"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 279;BA.debugLine="ScaleLog(sY(i)).ScaleValues = Props.GetDefault(\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("ScaleValues" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ScaleYValuesLog"))),(Object)((RemoteObject.createImmutable("1!2!5!7!10"))))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 281;BA.debugLine="Scale(sX).MaxManu = Props.GetDefault(\"XMaxValue\",";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MaxManu" /*RemoteObject*/ ,BA.numberCast(double.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("XMaxValue"))),(Object)(RemoteObject.createImmutable((100))))));
 BA.debugLineNum = 282;BA.debugLine="Scale(sX).MinManu = Props.GetDefault(\"XMinValue\",";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MinManu" /*RemoteObject*/ ,BA.numberCast(double.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("XMinValue"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 283;BA.debugLine="Scale(sX).NbIntervals = Props.GetDefault(\"NbXInte";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("NbIntervals" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("NbXIntervals"))),(Object)(RemoteObject.createImmutable((10))))));
 BA.debugLineNum = 284;BA.debugLine="Scale(sX).Logarithmic = Props.GetDefault(\"Logarit";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Logarithmic" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("LogarithmicXScale"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 285;BA.debugLine="Scale(sX).ScaleValues = Props.GetDefault(\"ScaleVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("ScaleValues" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ScaleValues"))),(Object)((RemoteObject.createImmutable("1!2!2.5!5!10"))))));
 BA.debugLineNum = 286;BA.debugLine="Scale(sX).DrawXScale = Props.GetDefault(\"DrawXSca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("DrawXScale" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DrawXScale"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 287;BA.debugLine="ScaleLog(sX).ScaleValues = Props.GetDefault(\"Scal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("ScaleValues" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ScaleXValuesLog"))),(Object)((RemoteObject.createImmutable("1!2!5!7!10"))))));
 BA.debugLineNum = 288;BA.debugLine="Graph.ChartType = Props.GetDefault(\"ChartType\", \"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ChartType" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ChartType"))),(Object)((RemoteObject.createImmutable("BAR"))))));
 BA.debugLineNum = 289;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Or Graph.ChartTyp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 290;BA.debugLine="Scale(sX).Automatic = Props.GetDefault(\"Automati";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Automatic" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("AutomaticScale"))),(Object)((xchart.__c.getField(true,"True"))))));
 }else {
 BA.debugLineNum = 292;BA.debugLine="Scale(sX).Automatic = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Automatic" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 };
 BA.debugLineNum = 295;BA.debugLine="Graph.ChartBackgroundColor = xui.PaintOrColorToCo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ChartBackgroundColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ChartBackgroundColor"))),(Object)(RemoteObject.createImmutable((((int)0xffcfdcdc))))))));
 BA.debugLineNum = 296;BA.debugLine="If Graph.ChartBackgroundColor = 16777215 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ ),BA.numberCast(double.class, 16777215))) { 
 BA.debugLineNum = 297;BA.debugLine="Graph.ChartBackgroundColor = xui.Color_Transpare";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ChartBackgroundColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Transparent"));
 };
 BA.debugLineNum = 300;BA.debugLine="Graph.GridFrameColor = xui.PaintOrColorToColor(Pr";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GridFrameColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("GridFrameColor"))),(Object)(RemoteObject.createImmutable((((int)0xff000000))))))));
 BA.debugLineNum = 301;BA.debugLine="Graph.DrawGridFrame = Props.GetDefault(\"DrawGridF";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawGridFrame" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DrawGridFrame"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 302;BA.debugLine="Graph.DrawHorizontalGridLines = Props.GetDefault(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawHorizontalGridLines" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DrawHorizontalGridLines"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 303;BA.debugLine="Graph.DrawVerticalGridLines = Props.GetDefault(\"D";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawVerticalGridLines" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DrawVerticalGridLines"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 304;BA.debugLine="Graph.GridColor = xui.PaintOrColorToColor(Props.G";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GridColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("GridColor"))),(Object)(RemoteObject.createImmutable((((int)0xffa9a9a9))))))));
 BA.debugLineNum = 305;BA.debugLine="Graph.GridColorDark = CalcDarkColor(Graph.GridCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GridColorDark" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_calcdarkcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ ))));
 BA.debugLineNum = 306;BA.debugLine="Graph.GradientColors = Props.GetDefault(\"Gradient";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GradientColors" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("GradientColors"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 307;BA.debugLine="Graph.GradientColorsAlpha = Props.GetDefault(\"Gra";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GradientColorsAlpha" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("GradientColorsAlpha"))),(Object)(RemoteObject.createImmutable((96))))));
 BA.debugLineNum = 308;BA.debugLine="Texts.TitleTextColor = xui.PaintOrColorToColor(Pr";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleTextColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("TitleTextColor"))),(Object)(RemoteObject.createImmutable((((int)0xff000000))))))));
 BA.debugLineNum = 309;BA.debugLine="Texts.SubtitleTextColor = xui.PaintOrColorToColor";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleTextColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("SubtitleTextColor"))),(Object)(RemoteObject.createImmutable((((int)0xff000000))))))));
 BA.debugLineNum = 310;BA.debugLine="Texts.ScaleTextColor = xui.PaintOrColorToColor(Pr";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleTextColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ScaleTextColor"))),(Object)(RemoteObject.createImmutable((((int)0xff000000))))))));
 BA.debugLineNum = 311;BA.debugLine="Texts.AxisTextColor = xui.PaintOrColorToColor(Pro";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisTextColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("AxisTextColor"))),(Object)(RemoteObject.createImmutable((((int)0xff000000))))))));
 BA.debugLineNum = 312;BA.debugLine="Texts.TitleTextSize = Props.GetDefault(\"TitleText";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("TitleTextSize"))),(Object)(RemoteObject.createImmutable((18))))));
 BA.debugLineNum = 313;BA.debugLine="Texts.SubtitleTextSize = Props.GetDefault(\"Subtit";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("SubtitleTextSize"))),(Object)(RemoteObject.createImmutable((16))))));
 BA.debugLineNum = 314;BA.debugLine="Texts.AxisTextSize = Props.GetDefault(\"AxisTextSi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("AxisTextSize"))),(Object)(RemoteObject.createImmutable((14))))));
 BA.debugLineNum = 315;BA.debugLine="Texts.ScaleTextSize = Props.GetDefault(\"ScaleText";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ScaleTextSize"))),(Object)(RemoteObject.createImmutable((12))))));
 BA.debugLineNum = 316;BA.debugLine="Texts.CustomFontName = \"\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("CustomFontName" /*RemoteObject*/ ,BA.ObjectToString(""));
 BA.debugLineNum = 317;BA.debugLine="Texts.CustomFontScale = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("CustomFontScale" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 BA.debugLineNum = 318;BA.debugLine="Legend.TextSize = Props.GetDefault(\"LegendTextSiz";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextSize" /*RemoteObject*/ ,BA.numberCast(float.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("LegendTextSize"))),(Object)(RemoteObject.createImmutable((14))))));
 BA.debugLineNum = 319;BA.debugLine="Texts.AutomaticTextSizes = Props.GetDefault(\"Auto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("AutomaticTextSizes"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 320;BA.debugLine="Graph.XScaleTextOrientation = Props.GetDefault(\"X";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XScaleTextOrientation" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("XScaleTextOrientation"))),(Object)((RemoteObject.createImmutable("HORIZONTAL"))))));
 BA.debugLineNum = 321;BA.debugLine="Legend.IncludeLegend = Props.GetDefault(\"IncludeL";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("IncludeLegend" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("IncludeLegend"))),(Object)((RemoteObject.createImmutable("NONE"))))));
 BA.debugLineNum = 322;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"))) {
case 0: 
case 1: {
 BA.debugLineNum = 324;BA.debugLine="Legend.IncludeLegend = \"NONE\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("IncludeLegend" /*RemoteObject*/ ,BA.ObjectToString("NONE"));
 break; }
}
;
 BA.debugLineNum = 326;BA.debugLine="Legend.BackgroundColor = xui.PaintOrColorToColor(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("BackgroundColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("BackgroundColor"))),(Object)((__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(BA.numberCast(int.class, 102)),(Object)(BA.numberCast(int.class, 255)),(Object)(BA.numberCast(int.class, 255)),(Object)(BA.numberCast(int.class, 255)))))))));
 BA.debugLineNum = 327;BA.debugLine="Legend.TextColor = xui.PaintOrColorToColor(Props.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("LegendTextColor"))),(Object)((__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")))))));
 BA.debugLineNum = 328;BA.debugLine="Graph.IncludeValues = Props.GetDefault(\"IncludeVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeValues" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("IncludeValues"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 329;BA.debugLine="Graph.BarValueOrientation = Props.GetDefault(\"Bar";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarValueOrientation" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("BarValueOrientation"))),(Object)((RemoteObject.createImmutable("HORIZONTAL"))))));
 BA.debugLineNum = 330;BA.debugLine="Graph.BarMarginMode = Props.GetDefault(\"BarMargin";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarMarginMode" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("BarMarginMode"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 331;BA.debugLine="Graph.PieStartAngle = Props.GetDefault(\"PieStartA";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("PieStartAngle" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("PieStartAngle"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 332;BA.debugLine="Graph.PieAddPercentage = Props.GetDefault(\"PieAdd";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("PieAddPercentage" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("PieAddPercentage"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 333;BA.debugLine="Graph.PieGapDegrees = Props.GetDefault(\"PieGapDeg";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("PieGapDegrees" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("PieGapDegrees"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 334;BA.debugLine="mPiePercentageNbFractions = Props.GetDefault(\"Pie";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mpiepercentagenbfractions" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("PiePerentageNbFractions"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 335;BA.debugLine="mPiePercentageNbFractions = Max(mPiePercentageNbF";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mpiepercentagenbfractions" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, __ref.getField(true,"_mpiepercentagenbfractions" /*RemoteObject*/ ))),(Object)(BA.numberCast(double.class, 0)))));
 BA.debugLineNum = 336;BA.debugLine="mPiePercentageNbFractions = Min(mPiePercentageNbF";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mpiepercentagenbfractions" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(true,"_mpiepercentagenbfractions" /*RemoteObject*/ ))),(Object)(BA.numberCast(double.class, 2)))));
 BA.debugLineNum = 337;BA.debugLine="Graph.RadarStartAngle = Props.GetDefault(\"RadarSt";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarStartAngle" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("RadarStartAngle"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 338;BA.debugLine="Graph.RadarDrawScale = Props.GetDefault(\"RadarDra";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarDrawScale" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("RadarDrawScale"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 339;BA.debugLine="Graph.RadarDrawScaleValues = Props.GetDefault(\"Ra";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarDrawScaleValues" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("RadarDrawScaleValues"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 340;BA.debugLine="Graph.RadarScaleType = Props.GetDefault(\"RadarSca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarScaleType" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("RadarScaleType"))),(Object)((RemoteObject.createImmutable("SPIDER"))))));
 BA.debugLineNum = 341;BA.debugLine="Values.Show = Props.GetDefault(\"DisplayValues\", T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Show" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DisplayValues"))),(Object)((xchart.__c.getField(true,"True"))))));
 BA.debugLineNum = 342;BA.debugLine="Values.ShowOnHover = Props.GetDefault(\"DisplayVal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("ShowOnHover" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DisplayValuesOnHover"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 343;BA.debugLine="Values.ShowCursor = Props.GetDefault(\"DisplayCurs";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("ShowCursor" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DisplayCursor"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 344;BA.debugLine="Values.Position = Props.GetDefault(\"ValuesPositio";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Position" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ValuesPosition"))),(Object)((RemoteObject.createImmutable("TOP_LEFT"))))));
 BA.debugLineNum = 345;BA.debugLine="Values.TextSize = Props.GetDefault(\"ValuesTextSiz";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextSize" /*RemoteObject*/ ,BA.numberCast(float.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ValuesTextSize"))),(Object)(RemoteObject.createImmutable((14))))));
 BA.debugLineNum = 346;BA.debugLine="Values.TextColor = xui.PaintOrColorToColor(Props.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ValuesTextColor"))),(Object)(RemoteObject.createImmutable((((int)0xff000000))))))));
 BA.debugLineNum = 347;BA.debugLine="Values.BackgroundColor = xui.PaintOrColorToColor(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("BackgroundColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ValuesBackgroundColor"))),(Object)(RemoteObject.createImmutable((((int)0xaaffffff))))))));
 BA.debugLineNum = 348;BA.debugLine="Graph.IncludeBarMeanLine = Props.GetDefault(\"Incl";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeBarMeanLine" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("IncludeBarMeanLine"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 349;BA.debugLine="Graph.IncludeMinLine = Props.GetDefault(\"IncludeM";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeMinLine" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("IncludeMinLine"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 350;BA.debugLine="Graph.IncludeMaxLine = Props.GetDefault(\"IncludeM";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeMaxLine" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("IncludeMaxLine"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 351;BA.debugLine="Graph.IncludeMeanLine = Props.GetDefault(\"Include";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeMeanLine" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("IncludeMeanLine"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 352;BA.debugLine="Graph.MinLineColor = xui.PaintOrColorToColor(Prop";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("MinLineColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("MinLineColor"))),(Object)(RemoteObject.createImmutable((((int)0xff008000))))))));
 BA.debugLineNum = 353;BA.debugLine="Graph.MaxLineColor = xui.PaintOrColorToColor(Prop";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("MaxLineColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("MaxLineColor"))),(Object)(RemoteObject.createImmutable((((int)0xffff000))))))));
 BA.debugLineNum = 354;BA.debugLine="Graph.MeanLineColor = xui.PaintOrColorToColor(Pro";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("MeanLineColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("MeanLineColor"))),(Object)(RemoteObject.createImmutable((((int)0xffb64a1))))))));
 BA.debugLineNum = 355;BA.debugLine="Graph.DrawOuterFrame = Props.GetDefault(\"DrawOute";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawOuterFrame" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DrawOuterFrame"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 356;BA.debugLine="mKeepDisplayValues = Props.GetDefault(\"KeepDispla";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mkeepdisplayvalues" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("KeepDisplayValues"))),(Object)((RemoteObject.createImmutable("NONE"))))));
 BA.debugLineNum = 357;BA.debugLine="mHChartsXScaleOnTop = Props.GetDefault(\"HChartsXS";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mhchartsxscaleontop" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("HChartsXScaleOnTop"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 358;BA.debugLine="mHChartsTicksTopDown = Props.GetDefault(\"HChartsT";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mhchartstickstopdown" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("HChartsTicksTopDown"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 359;BA.debugLine="mYXChartDisplayValues = Props.GetDefault(\"YXChart";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartdisplayvalues" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YXChartDisplayValues"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 360;BA.debugLine="mYXChartDisplayPosition = Props.GetDefault(\"YXCha";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartdisplayposition" /*RemoteObject*/ ,BA.ObjectToString(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YXChartDisplayPosition"))),(Object)((RemoteObject.createImmutable("CURSOR"))))));
 BA.debugLineNum = 361;BA.debugLine="mYXChartDisplayCrossHair = Props.GetDefault(\"YXCh";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartdisplaycrosshair" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YXChartDisplayCrossHair"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 362;BA.debugLine="mYXChartCrossHairColor = xui.PaintOrColorToColor(";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartcrosshaircolor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YXChartCrossHairColor"))),(Object)((__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")))))));
 BA.debugLineNum = 363;BA.debugLine="mYXChartCrossHairDeltaY =  Props.GetDefault(\"YXCh";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartcrosshairdeltay" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("YXChartCrossHairDeltaY"))),(Object)(RemoteObject.createImmutable((0))))));
 BA.debugLineNum = 364;BA.debugLine="mYXChartCrossHairDeltaY = DipToCurrent(mYXChartCr";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartcrosshairdeltay" /*RemoteObject*/ ,xchart.__c.runMethod(true,"DipToCurrent",(Object)(__ref.getField(true,"_myxchartcrosshairdeltay" /*RemoteObject*/ ))));
 BA.debugLineNum = 365;BA.debugLine="Zoom.ScalesOnZoomedPart = Props.GetDefault(\"Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("ScalesOnZoomedPart" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("ScalesOnZoomedPart"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 366;BA.debugLine="Graph.AreaFillAlphaValue = Props.GetDefault(\"Area";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("AreaFillAlphaValue" /*RemoteObject*/ ,BA.numberCast(int.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("AreaFillAlphaValue"))),(Object)(RemoteObject.createImmutable((64))))));
 BA.debugLineNum = 367;BA.debugLine="Graph.AreaFillAlphaValue = (256 - Graph.AreaFillA";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("AreaFillAlphaValue" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(256),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"AreaFillAlphaValue" /*RemoteObject*/ )}, "-",1, 1)),RemoteObject.createImmutable(16777216)}, "*",0, 1));
 BA.debugLineNum = 368;BA.debugLine="Bar.WickColor = xui.PaintOrColorToColor(Props.Get";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("WickColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("CandleWickColor"))),(Object)(RemoteObject.createImmutable((((int)0xff0000ff))))))));
 BA.debugLineNum = 369;BA.debugLine="Bar.WickWidth = Props.GetDefault(\"CandleWickWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("WickWidth" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {BA.numberCast(double.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("CandleWickWidth"))),(Object)(RemoteObject.createImmutable((2))))),__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"getScale")}, "*",0, 0)));
 BA.debugLineNum = 370;BA.debugLine="Bar.IncreaseColor = xui.PaintOrColorToColor(Props";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("IncreaseColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("IncreaseColor"))),(Object)(RemoteObject.createImmutable((((int)0xff008800))))))));
 BA.debugLineNum = 371;BA.debugLine="Bar.DecreaseColor = xui.PaintOrColorToColor(Props";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("DecreaseColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("DecreaseColor"))),(Object)(RemoteObject.createImmutable((((int)0xffff0000))))))));
 BA.debugLineNum = 372;BA.debugLine="Bar.DrawBodyBorder = Props.GetDefault(\"CandleDraw";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("DrawBodyBorder" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("CandleDrawBodyBorder"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 373;BA.debugLine="Bar.TotalBarColor = xui.PaintOrColorToColor(Props";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("TotalBarColor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"PaintOrColorToColor",(Object)(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("CandleWickColor"))),(Object)(RemoteObject.createImmutable((((int)0xff0000ff))))))));
 BA.debugLineNum = 374;BA.debugLine="Bar.CandleDisplayVolume = Props.GetDefault(\"Candl";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("CandleDisplayVolume" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("CandleDisplayVolume"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 376;BA.debugLine="mBubbleDiameterMin = Props.GetDefault(\"BubbleDiam";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubblediametermin" /*RemoteObject*/ ,BA.numberCast(double.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("BubbleDiameterMin"))),(Object)(RemoteObject.createImmutable((1))))));
 BA.debugLineNum = 377;BA.debugLine="mBubbleDiameterMax = Props.GetDefault(\"BubbleDiam";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubblediametermax" /*RemoteObject*/ ,BA.numberCast(double.class, _props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("BubbleDiameterMax"))),(Object)(RemoteObject.createImmutable((10))))));
 BA.debugLineNum = 378;BA.debugLine="mBubbleSmallSnap = Props.GetDefault(\"BubbleSmallS";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubblesmallsnap" /*RemoteObject*/ ,BA.ObjectToBoolean(_props.runMethod(false,"GetDefault",(Object)(RemoteObject.createImmutable(("BubbleSmallSnap"))),(Object)((xchart.__c.getField(true,"False"))))));
 BA.debugLineNum = 380;BA.debugLine="xpnlGraph = xui.CreatePanel(\"xpnlGraph\")";
Debug.JustUpdateDeviceLine();
__ref.setField ("_xpnlgraph" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreatePanel",__ref.getField(false, "ba"),(Object)(RemoteObject.createImmutable("xpnlGraph"))));
 BA.debugLineNum = 381;BA.debugLine="mBase.AddView(xpnlGraph, 0, 0, mBase.Width, mBase";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runVoidMethod ("AddView",(Object)((__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).getObject())),(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 0)),(Object)(__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth")),(Object)(__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight")));
 BA.debugLineNum = 382;BA.debugLine="xcvsGraph.Initialize(xpnlGraph)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ )));
 BA.debugLineNum = 384;BA.debugLine="xpnlCursor = xui.CreatePanel(\"xpnlCursor\")";
Debug.JustUpdateDeviceLine();
__ref.setField ("_xpnlcursor" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreatePanel",__ref.getField(false, "ba"),(Object)(RemoteObject.createImmutable("xpnlCursor"))));
 BA.debugLineNum = 385;BA.debugLine="mBase.AddView(xpnlCursor, 0, 0, mBase.Width, mBas";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runVoidMethod ("AddView",(Object)((__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getObject())),(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 0)),(Object)(__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth")),(Object)(__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight")));
 BA.debugLineNum = 386;BA.debugLine="xcvsCursor.Initialize(xpnlCursor)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ )));
 BA.debugLineNum = 388;BA.debugLine="xpnlZoomBar = xui.CreatePanel(\"xpnlZoomBar\")";
Debug.JustUpdateDeviceLine();
__ref.setField ("_xpnlzoombar" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreatePanel",__ref.getField(false, "ba"),(Object)(RemoteObject.createImmutable("xpnlZoomBar"))));
 BA.debugLineNum = 389;BA.debugLine="mBase.AddView(xpnlZoomBar, 0, mBase.Height - 20di";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runVoidMethod ("AddView",(Object)((__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).getObject())),(Object)(BA.numberCast(int.class, 0)),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 20)))}, "-",1, 1)),(Object)(__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth")),(Object)(__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight")));
 BA.debugLineNum = 390;BA.debugLine="ZoomBarInit";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoombarinit" /*RemoteObject*/ );
 BA.debugLineNum = 392;BA.debugLine="xpnlValues = xui.CreatePanel(\"\")";
Debug.JustUpdateDeviceLine();
__ref.setField ("_xpnlvalues" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreatePanel",__ref.getField(false, "ba"),(Object)(RemoteObject.createImmutable(""))));
 BA.debugLineNum = 393;BA.debugLine="mBase.AddView(xpnlValues, 0, 0, 100dip, 100dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runVoidMethod ("AddView",(Object)((__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).getObject())),(Object)(BA.numberCast(int.class, 0)),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 100)))),(Object)(xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 100)))));
 BA.debugLineNum = 394;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 395;BA.debugLine="xcvsValues.Initialize(xpnlValues)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ )));
 BA.debugLineNum = 397;BA.debugLine="BMVNFUsed = False";
Debug.JustUpdateDeviceLine();
__ref.setField ("_bmvnfused" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 398;BA.debugLine="BMVNF.MinimumIntegers = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("MinimumIntegers" /*RemoteObject*/ ,BA.numberCast(int.class, 1));
 BA.debugLineNum = 399;BA.debugLine="BMVNF.MaximumFractions = 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("MaximumFractions" /*RemoteObject*/ ,BA.numberCast(int.class, 2));
 BA.debugLineNum = 400;BA.debugLine="BMVNF.MinimumFractions = 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("MinimumFractions" /*RemoteObject*/ ,BA.numberCast(int.class, 2));
 BA.debugLineNum = 401;BA.debugLine="BMVNF.GroupingUsed = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("GroupingUsed" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 403;BA.debugLine="Zoom.SmallStep = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("SmallStep" /*RemoteObject*/ ,BA.numberCast(int.class, 1));
 BA.debugLineNum = 404;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawarea(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawArea (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3930);
if (RapidSub.canDelegate("drawarea")) { return __ref.runUserSub(false, "xchart","drawarea", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _lstcoords = null;
RemoteObject _smax = RemoteObject.createImmutable(0);
RemoteObject _smin = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _ptharea = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _coords = null;
RemoteObject _coords0 = null;
RemoteObject _coords1 = null;
 BA.debugLineNum = 3930;BA.debugLine="Private Sub DrawArea";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3931;BA.debugLine="Private i, ip, l, mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 3932;BA.debugLine="Private lstCoords(Items.Size) As List";
Debug.JustUpdateDeviceLine();
_lstcoords = RemoteObject.createNewArray ("anywheresoftware.b4a.objects.collections.List", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("lstCoords", _lstcoords);
 BA.debugLineNum = 3934;BA.debugLine="xcvsGraph.ClearRect(xcvsGraph.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 3935;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.Ch";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 3937;BA.debugLine="If Items.Size = 1 And (MinMaxMeanValues(0) <> 0 O";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 1)) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 3938;BA.debugLine="Private sMax, sMin, sMean As Double";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.createImmutable(0);Debug.locals.put("sMax", _smax);
_smin = RemoteObject.createImmutable(0);Debug.locals.put("sMin", _smin);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 3939;BA.debugLine="If Graph.IncludeMinLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3940;BA.debugLine="sMin = Graph.Bottom - (MinMaxMeanValues(0) - Sc";
Debug.JustUpdateDeviceLine();
_smin = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMin", _smin);
 BA.debugLineNum = 3941;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMin, Graph.Righ";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smin)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smin)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MinLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3943;BA.debugLine="If Graph.IncludeMaxLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3944;BA.debugLine="sMax = Graph.Bottom - (MinMaxMeanValues(1) - Sc";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMax", _smax);
 BA.debugLineNum = 3945;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMax, Graph.Righ";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smax)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smax)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MaxLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3947;BA.debugLine="If Graph.IncludeMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3948;BA.debugLine="sMean = Graph.Bottom - (MinMaxMeanValues(2) - S";
Debug.JustUpdateDeviceLine();
_smean = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 3949;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMean, Graph.Rig";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 BA.debugLineNum = 3953;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3954;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal * S";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 }else 
{ BA.debugLineNum = 3955;BA.debugLine="Else If Scale(sY(0)).MinVal< 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3956;BA.debugLine="mYAxis0 = Graph.Top";
Debug.JustUpdateDeviceLine();
_myaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ );Debug.locals.put("mYAxis0", _myaxis0);
 }else {
 BA.debugLineNum = 3958;BA.debugLine="mYAxis0 = Graph.Bottom";
Debug.JustUpdateDeviceLine();
_myaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ );Debug.locals.put("mYAxis0", _myaxis0);
 }}
;
 BA.debugLineNum = 3962;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 3963;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step28 = 1;
final int limit28 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step28 > 0 && _l.<Integer>get().intValue() <= limit28) || (step28 < 0 && _l.<Integer>get().intValue() >= limit28) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step28))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 3964;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 3965;BA.debugLine="Private pthArea As B4XPath";
Debug.JustUpdateDeviceLine();
_ptharea = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("pthArea", _ptharea);
 BA.debugLineNum = 3967;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 3968;BA.debugLine="If ID.HideLine = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"HideLine" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3969;BA.debugLine="lstCoords(l).Initialize";
Debug.JustUpdateDeviceLine();
_lstcoords.getArrayElement(false,_l).runVoidMethod ("Initialize");
 BA.debugLineNum = 3970;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step34 = 1;
final int limit34 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step34 > 0 && _i.<Integer>get().intValue() <= limit34) || (step34 < 0 && _i.<Integer>get().intValue() >= limit34) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step34))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3971;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3973;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3974;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3975;BA.debugLine="If PD.YArray(l) <> mMissingDataValue Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 3976;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3977;BA.debugLine="Coords(0) = Graph.Left + ip * Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_ip,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 3978;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3979;BA.debugLine="Coords(1) = Graph.Bottom - (PD.YArray(l) - S";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0)),BA.numberCast(int.class, 1));
 }else {
 BA.debugLineNum = 3981;BA.debugLine="Coords(1) = Graph.Top + (PD.YArray(l) - Scal";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 1));
 };
 BA.debugLineNum = 3983;BA.debugLine="lstCoords(l).Add(Coords)";
Debug.JustUpdateDeviceLine();
_lstcoords.getArrayElement(false,_l).runVoidMethod ("Add",(Object)((_coords)));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3987;BA.debugLine="pthArea.Initialize(Graph.Left, Graph.Bottom)";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))));
 BA.debugLineNum = 3988;BA.debugLine="For i = 0 To lstCoords(l).Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step50 = 1;
final int limit50 = RemoteObject.solve(new RemoteObject[] {_lstcoords.getArrayElement(false,_l).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step50 > 0 && _i.<Integer>get().intValue() <= limit50) || (step50 < 0 && _i.<Integer>get().intValue() >= limit50) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step50))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3989;BA.debugLine="Private Coords0(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 3990;BA.debugLine="Coords0 = lstCoords(l).Get(i)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.getArrayElement(false,_l).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 3991;BA.debugLine="If i = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3992;BA.debugLine="pthArea.Initialize(Coords0(0), mYAxis0)";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _myaxis0)));
 };
 BA.debugLineNum = 3994;BA.debugLine="pthArea.LineTo(Coords0(0), Coords0(1))";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 1)))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3996;BA.debugLine="pthArea.LineTo(Coords0(0), mYAxis0)";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _myaxis0)));
 BA.debugLineNum = 3997;BA.debugLine="pthArea.LineTo(Graph.Left, mYAxis0)";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)));
 BA.debugLineNum = 3999;BA.debugLine="xcvsGraph.DrawPath(pthArea, ID.Color - Graph.Ar";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_ptharea),(Object)(RemoteObject.solve(new RemoteObject[] {_id.getField(true,"Color" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"AreaFillAlphaValue" /*RemoteObject*/ )}, "-",1, 1)),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 };
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4002;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4004;BA.debugLine="DrawGridV	'draws the grid above the paths";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 4007;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4008;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step66 = 1;
final int limit66 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step66 > 0 && _l.<Integer>get().intValue() <= limit66) || (step66 < 0 && _l.<Integer>get().intValue() >= limit66) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step66))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4009;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4010;BA.debugLine="If ID.HideLine = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"HideLine" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4011;BA.debugLine="For i = 1 To lstCoords(l).Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step69 = 1;
final int limit69 = RemoteObject.solve(new RemoteObject[] {_lstcoords.getArrayElement(false,_l).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step69 > 0 && _i.<Integer>get().intValue() <= limit69) || (step69 < 0 && _i.<Integer>get().intValue() >= limit69) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step69))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4012;BA.debugLine="Private Coords0(2), Coords1(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
_coords1 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 4013;BA.debugLine="Coords0 = lstCoords(l).Get(i - 1)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.getArrayElement(false,_l).runMethod(false,"Get",(Object)(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "-",1, 1))));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 4014;BA.debugLine="Coords1 = lstCoords(l).Get(i)";
Debug.JustUpdateDeviceLine();
_coords1 = (_lstcoords.getArrayElement(false,_l).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 4015;BA.debugLine="xcvsGraph.DrawLine(Coords0(0), Coords0(1), Coo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4019;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 4020;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step76 = 1;
final int limit76 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step76 > 0 && _l.<Integer>get().intValue() <= limit76) || (step76 < 0 && _l.<Integer>get().intValue() >= limit76) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step76))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4021;BA.debugLine="For i = 0 To lstCoords(l).Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step77 = 1;
final int limit77 = RemoteObject.solve(new RemoteObject[] {_lstcoords.getArrayElement(false,_l).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step77 > 0 && _i.<Integer>get().intValue() <= limit77) || (step77 < 0 && _i.<Integer>get().intValue() >= limit77) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step77))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4022;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 4023;BA.debugLine="Coords = lstCoords(l).Get(i)";
Debug.JustUpdateDeviceLine();
_coords = (_lstcoords.getArrayElement(false,_l).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 4024;BA.debugLine="DrawPoint(Coords(0), Coords(1), ID.PointColo";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 }
}Debug.locals.put("i", _i);
;
 }
}Debug.locals.put("l", _l);
;
 };
 };
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4030;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4032;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4033;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4034;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4036;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 4040;BA.debugLine="If HLines.Size > 0 And Scale(sY(0)).Different = F";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4041;BA.debugLine="DrawHorizontalLinesValue";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawhorizontallinesvalue" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4044;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Zoom.NbVisi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4045;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4048;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 4049;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarmeanlineh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarMeanLineH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5302);
if (RapidSub.canDelegate("drawbarmeanlineh")) { return __ref.runUserSub(false, "xchart","drawbarmeanlineh", __ref);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _ip0 = RemoteObject.createImmutable(0);
RemoteObject _ip1 = RemoteObject.createImmutable(0);
RemoteObject _nbp = RemoteObject.createImmutable(0);
RemoteObject _total = RemoteObject.createImmutable(0);
RemoteObject _mean = RemoteObject.createImmutable(0);
 BA.debugLineNum = 5302;BA.debugLine="Private Sub DrawBarMeanLineH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5303;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5305;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5306;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5308;BA.debugLine="If PD.YArray.Length > 1 Then Return";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5310;BA.debugLine="Private i, sMean, iP0, iP1, NbP As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
_ip0 = RemoteObject.createImmutable(0);Debug.locals.put("iP0", _ip0);
_ip1 = RemoteObject.createImmutable(0);Debug.locals.put("iP1", _ip1);
_nbp = RemoteObject.createImmutable(0);Debug.locals.put("NbP", _nbp);
 BA.debugLineNum = 5311;BA.debugLine="Private Total, Mean As Double";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.createImmutable(0);Debug.locals.put("Total", _total);
_mean = RemoteObject.createImmutable(0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5312;BA.debugLine="If Zoom.ScalesOnZoomedPart = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ScalesOnZoomedPart" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5313;BA.debugLine="iP0 = 0";
Debug.JustUpdateDeviceLine();
_ip0 = BA.numberCast(int.class, 0);Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5314;BA.debugLine="iP1 = Points.Size - 1";
Debug.JustUpdateDeviceLine();
_ip1 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5315;BA.debugLine="NbP = Points.Size";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize");Debug.locals.put("NbP", _nbp);
 }else {
 BA.debugLineNum = 5317;BA.debugLine="iP0 = Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip0 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ );Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5318;BA.debugLine="iP1 = Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
_ip1 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ );Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5319;BA.debugLine="NbP = Zoom.NbVisiblePoints";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ );Debug.locals.put("NbP", _nbp);
 };
 BA.debugLineNum = 5322;BA.debugLine="For i = iP0 To iP1";
Debug.JustUpdateDeviceLine();
{
final int step16 = 1;
final int limit16 = _ip1.<Integer>get().intValue();
_i = _ip0 ;
for (;(step16 > 0 && _i.<Integer>get().intValue() <= limit16) || (step16 < 0 && _i.<Integer>get().intValue() >= limit16) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step16))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5323;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5324;BA.debugLine="Total = Total + PD.YArray(0)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5326;BA.debugLine="Mean = Total / NbP";
Debug.JustUpdateDeviceLine();
_mean = RemoteObject.solve(new RemoteObject[] {_total,_nbp}, "/",0, 0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5328;BA.debugLine="sMean = Graph.Left + (Mean - Scale(sY(0)).MinVal)";
Debug.JustUpdateDeviceLine();
_smean = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_mean,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 5330;BA.debugLine="xcvsGraph.DrawLine(sMean, Graph.Top, sMean, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 5332;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarmeanlinev(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarMeanLineV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5160);
if (RapidSub.canDelegate("drawbarmeanlinev")) { return __ref.runUserSub(false, "xchart","drawbarmeanlinev", __ref);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _ip0 = RemoteObject.createImmutable(0);
RemoteObject _ip1 = RemoteObject.createImmutable(0);
RemoteObject _nbp = RemoteObject.createImmutable(0);
RemoteObject _total = RemoteObject.createImmutable(0);
RemoteObject _mean = RemoteObject.createImmutable(0);
 BA.debugLineNum = 5160;BA.debugLine="Private Sub DrawBarMeanLineV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5161;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5163;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5164;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5166;BA.debugLine="If PD.YArray.Length > 1 Then Return";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5168;BA.debugLine="Private i, sMean, iP0, iP1, NbP As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
_ip0 = RemoteObject.createImmutable(0);Debug.locals.put("iP0", _ip0);
_ip1 = RemoteObject.createImmutable(0);Debug.locals.put("iP1", _ip1);
_nbp = RemoteObject.createImmutable(0);Debug.locals.put("NbP", _nbp);
 BA.debugLineNum = 5169;BA.debugLine="Private Total, Mean As Double";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.createImmutable(0);Debug.locals.put("Total", _total);
_mean = RemoteObject.createImmutable(0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5170;BA.debugLine="If Zoom.ScalesOnZoomedPart = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ScalesOnZoomedPart" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5171;BA.debugLine="iP0 = 0";
Debug.JustUpdateDeviceLine();
_ip0 = BA.numberCast(int.class, 0);Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5172;BA.debugLine="iP1 = Points.Size - 1";
Debug.JustUpdateDeviceLine();
_ip1 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5173;BA.debugLine="NbP = Points.Size";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize");Debug.locals.put("NbP", _nbp);
 }else {
 BA.debugLineNum = 5175;BA.debugLine="iP0 = Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip0 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ );Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5176;BA.debugLine="iP1 = Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
_ip1 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ );Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5177;BA.debugLine="NbP = Zoom.NbVisiblePoints";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ );Debug.locals.put("NbP", _nbp);
 };
 BA.debugLineNum = 5179;BA.debugLine="For i = iP0 To iP1";
Debug.JustUpdateDeviceLine();
{
final int step16 = 1;
final int limit16 = _ip1.<Integer>get().intValue();
_i = _ip0 ;
for (;(step16 > 0 && _i.<Integer>get().intValue() <= limit16) || (step16 < 0 && _i.<Integer>get().intValue() >= limit16) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step16))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5180;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5181;BA.debugLine="Total = Total + PD.YArray(0)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5183;BA.debugLine="Mean = Total / NbP";
Debug.JustUpdateDeviceLine();
_mean = RemoteObject.solve(new RemoteObject[] {_total,_nbp}, "/",0, 0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5184;BA.debugLine="sMean = Graph.Bottom - (Mean - Scale(sY(0)).MinVa";
Debug.JustUpdateDeviceLine();
_smean = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_mean,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 5186;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMean, Graph.Right";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 5187;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarmeanlinevalueh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarMeanLineValueH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5336);
if (RapidSub.canDelegate("drawbarmeanlinevalueh")) { return __ref.runUserSub(false, "xchart","drawbarmeanlinevalueh", __ref);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _smean0 = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _ip0 = RemoteObject.createImmutable(0);
RemoteObject _ip1 = RemoteObject.createImmutable(0);
RemoteObject _nbp = RemoteObject.createImmutable(0);
RemoteObject _total = RemoteObject.createImmutable(0);
RemoteObject _mean = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _rcttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _rctmean = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _txtw = RemoteObject.createImmutable(0);
RemoteObject _txtx0 = RemoteObject.createImmutable(0);
RemoteObject _txtx1 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 5336;BA.debugLine="Private Sub DrawBarMeanLineValueH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5337;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5339;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5340;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5342;BA.debugLine="If PD.YArray.Length > 1 Then Return";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5344;BA.debugLine="Private i, sMean, sMean0, h, y0, x0, iP0, iP1, Nb";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
_smean0 = RemoteObject.createImmutable(0);Debug.locals.put("sMean0", _smean0);
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_ip0 = RemoteObject.createImmutable(0);Debug.locals.put("iP0", _ip0);
_ip1 = RemoteObject.createImmutable(0);Debug.locals.put("iP1", _ip1);
_nbp = RemoteObject.createImmutable(0);Debug.locals.put("NbP", _nbp);
 BA.debugLineNum = 5345;BA.debugLine="Private Total, Mean As Double";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.createImmutable(0);Debug.locals.put("Total", _total);
_mean = RemoteObject.createImmutable(0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5346;BA.debugLine="If Zoom.ScalesOnZoomedPart = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ScalesOnZoomedPart" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5347;BA.debugLine="iP0 = 0";
Debug.JustUpdateDeviceLine();
_ip0 = BA.numberCast(int.class, 0);Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5348;BA.debugLine="iP1 = Points.Size - 1";
Debug.JustUpdateDeviceLine();
_ip1 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5349;BA.debugLine="NbP = Points.Size";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize");Debug.locals.put("NbP", _nbp);
 }else {
 BA.debugLineNum = 5351;BA.debugLine="iP0 = Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip0 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ );Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5352;BA.debugLine="iP1 = Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
_ip1 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ );Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5353;BA.debugLine="NbP = Zoom.NbVisiblePoints";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ );Debug.locals.put("NbP", _nbp);
 };
 BA.debugLineNum = 5356;BA.debugLine="For i = iP0 To iP1";
Debug.JustUpdateDeviceLine();
{
final int step16 = 1;
final int limit16 = _ip1.<Integer>get().intValue();
_i = _ip0 ;
for (;(step16 > 0 && _i.<Integer>get().intValue() <= limit16) || (step16 < 0 && _i.<Integer>get().intValue() >= limit16) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step16))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5357;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5358;BA.debugLine="Total = Total + PD.YArray(0)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5360;BA.debugLine="Mean = Total / NbP";
Debug.JustUpdateDeviceLine();
_mean = RemoteObject.solve(new RemoteObject[] {_total,_nbp}, "/",0, 0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5361;BA.debugLine="sMean0 = Mean * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_smean0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mean,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("sMean0", _smean0);
 BA.debugLineNum = 5362;BA.debugLine="sMean = Graph.Left + (Mean - Scale(sY(0)).MinVal)";
Debug.JustUpdateDeviceLine();
_smean = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_mean,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 5364;BA.debugLine="If Scale(sY(0)).MinVal = 0 And Scale(sY(0)).MaxVa";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5365;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step24 = 1;
final int limit24 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step24 > 0 && _i.<Integer>get().intValue() <= limit24) || (step24 < 0 && _i.<Integer>get().intValue() >= limit24) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step24))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5366;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5367;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5369;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5370;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5371;BA.debugLine="h = PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5372;BA.debugLine="x0 = sMean + 1.35 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(1.35),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5373;BA.debugLine="If sMean0 > h + 0.75 * Texts.ScaleTextHeight Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_smean0,RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5374;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5375;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - (ip + 0.5";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5377;BA.debugLine="y0 = Graph.Top + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 5379;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5382;BA.debugLine="If i > Zoom.EndIndex Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_i,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5383;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5384;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - 0.5 * Grap";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5386;BA.debugLine="y0 = Graph.Top + Graph.XOffset + 0.5 * Graph.Y";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 };
 }else 
{ BA.debugLineNum = 5389;BA.debugLine="Else if Scale(sY(0)).MinVal < 0 And Scale(sY(0)).";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5390;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step48 = 1;
final int limit48 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step48 > 0 && _i.<Integer>get().intValue() <= limit48) || (step48 < 0 && _i.<Integer>get().intValue() >= limit48) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step48))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5391;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5392;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5394;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5395;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5396;BA.debugLine="h = -PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, -_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)).<Double>get().doubleValue()*__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ ).<Double>get().doubleValue());Debug.locals.put("h", _h);
 BA.debugLineNum = 5397;BA.debugLine="x0 = sMean - 0.3 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5398;BA.debugLine="If -sMean0 > h + 0.3 * Texts.ScaleTextHeight Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.createImmutable(-(double) (0 + _smean0.<Integer>get().intValue())),RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5399;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5400;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - (ip + 0.5";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5402;BA.debugLine="y0 = Graph.Top + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 5404;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5407;BA.debugLine="If i > Zoom.EndIndex Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_i,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5408;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5409;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - 0.5 * Grap";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5411;BA.debugLine="y0 = Graph.Top + Graph.XOffset + 0.5 * Graph.Y";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 };
 }else {
 BA.debugLineNum = 5415;BA.debugLine="If Mean >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_mean,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5416;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step73 = 1;
final int limit73 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step73 > 0 && _i.<Integer>get().intValue() <= limit73) || (step73 < 0 && _i.<Integer>get().intValue() >= limit73) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step73))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5417;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5418;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5420;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5421;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5422;BA.debugLine="h = PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5423;BA.debugLine="x0 = sMean - 1.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(1.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5424;BA.debugLine="If Mean >= 0 And sMean0 > h + 0.75 * Texts.Sca";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_mean,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_smean0,RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5425;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5426;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - (ip  + 0";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5428;BA.debugLine="y0 = Graph.Top + Graph.XOffset + (ip + 0.5)";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 5430;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5433;BA.debugLine="If i > Zoom.EndIndex Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_i,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5434;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5435;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - 0.5 * Gra";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5437;BA.debugLine="y0 = Graph.Top + Graph.XOffset + 0.5 * Graph.";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 };
 }else {
 BA.debugLineNum = 5441;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step97 = 1;
final int limit97 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step97 > 0 && _i.<Integer>get().intValue() <= limit97) || (step97 < 0 && _i.<Integer>get().intValue() >= limit97) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step97))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5442;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5443;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5445;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5446;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5447;BA.debugLine="h = -PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, -_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)).<Double>get().doubleValue()*__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ ).<Double>get().doubleValue());Debug.locals.put("h", _h);
 BA.debugLineNum = 5448;BA.debugLine="x0 = sMean + 0.3 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5449;BA.debugLine="If Mean < 0 And -sMean0 > h + 0.3 * Texts.Scal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_mean,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",RemoteObject.createImmutable(-(double) (0 + _smean0.<Integer>get().intValue())),RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5450;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5451;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - (ip + 0.";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5453;BA.debugLine="y0 = Graph.Top + Graph.XOffset + (ip + 0.5)";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 5455;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5458;BA.debugLine="If i > Zoom.EndIndex Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_i,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5459;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5460;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - 0.5 * Gra";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5462;BA.debugLine="y0 = Graph.Top + Graph.XOffset + 0.5 * Graph.";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y0", _y0);
 };
 };
 };
 }}
;
 BA.debugLineNum = 5468;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 5469;BA.debugLine="Private rctText, rctMean As B4XRect";
Debug.JustUpdateDeviceLine();
_rcttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rctText", _rcttext);
_rctmean = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rctMean", _rctmean);
 BA.debugLineNum = 5470;BA.debugLine="Private txtW, txtX0, txtX1 As Double";
Debug.JustUpdateDeviceLine();
_txtw = RemoteObject.createImmutable(0);Debug.locals.put("txtW", _txtw);
_txtx0 = RemoteObject.createImmutable(0);Debug.locals.put("txtX0", _txtx0);
_txtx1 = RemoteObject.createImmutable(0);Debug.locals.put("txtX1", _txtx1);
 BA.debugLineNum = 5471;BA.debugLine="If BMVNFUsed = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_bmvnfused" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5472;BA.debugLine="txt = NumberFormat3(Mean, 6)";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_mean),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 5474;BA.debugLine="txt = NumberFormat2(Mean, BMVNF.MinimumIntegers,";
Debug.JustUpdateDeviceLine();
_txt = xchart.__c.runMethod(true,"NumberFormat2",(Object)(_mean),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"MinimumIntegers" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"MaximumFractions" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"MinimumFractions" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"GroupingUsed" /*RemoteObject*/ )));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 5476;BA.debugLine="rctText = xcvsGraph.MeasureText(txt, Texts.ScaleF";
Debug.JustUpdateDeviceLine();
_rcttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_txt),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rctText", _rcttext);
 BA.debugLineNum = 5477;BA.debugLine="txtW = 4dip + rctText.Width";
Debug.JustUpdateDeviceLine();
_txtw = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))),_rcttext.runMethod(true,"getWidth")}, "+",1, 0);Debug.locals.put("txtW", _txtw);
 BA.debugLineNum = 5478;BA.debugLine="txtX0 = x0 + 1.2 * rctText.Top";
Debug.JustUpdateDeviceLine();
_txtx0 = RemoteObject.solve(new RemoteObject[] {_x0,RemoteObject.createImmutable(1.2),_rcttext.runMethod(true,"getTop")}, "+*",1, 0);Debug.locals.put("txtX0", _txtx0);
 BA.debugLineNum = 5479;BA.debugLine="txtX1 = txtX0 + 1.3 * rctText.Height";
Debug.JustUpdateDeviceLine();
_txtx1 = RemoteObject.solve(new RemoteObject[] {_txtx0,RemoteObject.createImmutable(1.3),_rcttext.runMethod(true,"getHeight")}, "+*",1, 0);Debug.locals.put("txtX1", _txtx1);
 BA.debugLineNum = 5480;BA.debugLine="rctMean.Initialize(txtX0, y0 - txtW / 2, txtX1, y";
Debug.JustUpdateDeviceLine();
_rctmean.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _txtx0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y0,_txtw,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, _txtx1)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y0,_txtw,RemoteObject.createImmutable(2)}, "+/",1, 0))));
 BA.debugLineNum = 5481;BA.debugLine="If y0 + txtW / 2 + 3dip >= Graph.Bottom Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",RemoteObject.solve(new RemoteObject[] {_y0,_txtw,RemoteObject.createImmutable(2),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3)))}, "+/+",2, 0),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5482;BA.debugLine="rctMean.Top = Graph.Bottom - txtW -3dip";
Debug.JustUpdateDeviceLine();
_rctmean.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_txtw,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3)))}, "--",2, 0)));
 BA.debugLineNum = 5483;BA.debugLine="rctMean.Height = txtW";
Debug.JustUpdateDeviceLine();
_rctmean.runMethod(true,"setHeight",BA.numberCast(float.class, _txtw));
 };
 BA.debugLineNum = 5486;BA.debugLine="xcvsGraph.DrawRect(rctMean, Graph.ChartBackground";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rctmean),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 5487;BA.debugLine="xcvsGraph.DrawTextRotated(txt, x0, y0, Texts.Scal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"CENTER")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 BA.debugLineNum = 5488;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarmeanlinevaluev(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarMeanLineValueV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5191);
if (RapidSub.canDelegate("drawbarmeanlinevaluev")) { return __ref.runUserSub(false, "xchart","drawbarmeanlinevaluev", __ref);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _smean0 = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _yt = RemoteObject.createImmutable(0);
RemoteObject _ip0 = RemoteObject.createImmutable(0);
RemoteObject _ip1 = RemoteObject.createImmutable(0);
RemoteObject _nbp = RemoteObject.createImmutable(0);
RemoteObject _total = RemoteObject.createImmutable(0);
RemoteObject _mean = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _rcttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _rctmean = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _txtw = RemoteObject.createImmutable(0);
RemoteObject _txth = RemoteObject.createImmutable(0);
 BA.debugLineNum = 5191;BA.debugLine="Private Sub DrawBarMeanLineValueV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5192;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5194;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5195;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5197;BA.debugLine="If PD.YArray.Length > 1 Then Return";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5199;BA.debugLine="Private i, sMean, sMean0, h, x0, y0, yt, iP0, iP1";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
_smean0 = RemoteObject.createImmutable(0);Debug.locals.put("sMean0", _smean0);
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
_ip0 = RemoteObject.createImmutable(0);Debug.locals.put("iP0", _ip0);
_ip1 = RemoteObject.createImmutable(0);Debug.locals.put("iP1", _ip1);
_nbp = RemoteObject.createImmutable(0);Debug.locals.put("NbP", _nbp);
 BA.debugLineNum = 5200;BA.debugLine="Private Total, Mean As Double";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.createImmutable(0);Debug.locals.put("Total", _total);
_mean = RemoteObject.createImmutable(0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5201;BA.debugLine="If Zoom.ScalesOnZoomedPart = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ScalesOnZoomedPart" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5202;BA.debugLine="iP0 = 0";
Debug.JustUpdateDeviceLine();
_ip0 = BA.numberCast(int.class, 0);Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5203;BA.debugLine="iP1 = Points.Size - 1";
Debug.JustUpdateDeviceLine();
_ip1 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5204;BA.debugLine="NbP = Points.Size";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize");Debug.locals.put("NbP", _nbp);
 }else {
 BA.debugLineNum = 5206;BA.debugLine="iP0 = Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip0 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ );Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5207;BA.debugLine="iP1 = Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
_ip1 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ );Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 5208;BA.debugLine="NbP = Zoom.NbVisiblePoints";
Debug.JustUpdateDeviceLine();
_nbp = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ );Debug.locals.put("NbP", _nbp);
 };
 BA.debugLineNum = 5211;BA.debugLine="For iP0 = 0 To iP1";
Debug.JustUpdateDeviceLine();
{
final int step16 = 1;
final int limit16 = _ip1.<Integer>get().intValue();
_ip0 = BA.numberCast(int.class, 0) ;
for (;(step16 > 0 && _ip0.<Integer>get().intValue() <= limit16) || (step16 < 0 && _ip0.<Integer>get().intValue() >= limit16) ;_ip0 = RemoteObject.createImmutable((int)(0 + _ip0.<Integer>get().intValue() + step16))  ) {
Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 5212;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5213;BA.debugLine="Total = Total + PD.YArray(0)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("iP0", _ip0);
;
 BA.debugLineNum = 5215;BA.debugLine="Mean = Total / NbP";
Debug.JustUpdateDeviceLine();
_mean = RemoteObject.solve(new RemoteObject[] {_total,_nbp}, "/",0, 0);Debug.locals.put("Mean", _mean);
 BA.debugLineNum = 5216;BA.debugLine="sMean0 = Mean * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_smean0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mean,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("sMean0", _smean0);
 BA.debugLineNum = 5217;BA.debugLine="sMean = Graph.Bottom - (Mean - Scale(sY(0)).MinVa";
Debug.JustUpdateDeviceLine();
_smean = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_mean,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 5219;BA.debugLine="If Scale(sY(0)).MinVal = 0 And Scale(sY(0)).MaxVa";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5220;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step24 = 1;
final int limit24 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step24 > 0 && _i.<Integer>get().intValue() <= limit24) || (step24 < 0 && _i.<Integer>get().intValue() >= limit24) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step24))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5221;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5222;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5224;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5225;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5226;BA.debugLine="h = PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5227;BA.debugLine="If sMean0 > h + 0.75 * Texts.ScaleTextHeight Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_smean0,RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5228;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip  + 0.5)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5229;BA.debugLine="y0 = sMean - 1.35 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(1.35),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 5230;BA.debugLine="yt = sMean - 0.3 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5231;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 }else 
{ BA.debugLineNum = 5234;BA.debugLine="Else if Scale(sY(0)).MinVal < 0 And Scale(sY(0))";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5235;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step38 = 1;
final int limit38 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step38 > 0 && _i.<Integer>get().intValue() <= limit38) || (step38 < 0 && _i.<Integer>get().intValue() >= limit38) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step38))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5236;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5237;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5239;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5240;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5241;BA.debugLine="h = -PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, -_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)).<Double>get().doubleValue()*__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ ).<Double>get().doubleValue());Debug.locals.put("h", _h);
 BA.debugLineNum = 5242;BA.debugLine="If -sMean0 > h + 0.3 * Texts.ScaleTextHeight Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.createImmutable(-(double) (0 + _smean0.<Integer>get().intValue())),RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5243;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip  + 0.5)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5244;BA.debugLine="y0 = sMean + 0.3 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 5245;BA.debugLine="yt = sMean + 1.2 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(1.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5246;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 5250;BA.debugLine="If Mean >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_mean,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5251;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step53 = 1;
final int limit53 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step53 > 0 && _i.<Integer>get().intValue() <= limit53) || (step53 < 0 && _i.<Integer>get().intValue() >= limit53) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step53))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5252;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5253;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5255;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5256;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5257;BA.debugLine="h = PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5258;BA.debugLine="If Mean >= 0 And sMean0 > h + 0.75 * Texts.Sca";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_mean,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_smean0,RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5259;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip  + 0.5)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5260;BA.debugLine="y0 = sMean - 1.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(1.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 5261;BA.debugLine="yt = sMean - 0.3 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5262;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 5266;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step67 = 1;
final int limit67 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step67 > 0 && _i.<Integer>get().intValue() <= limit67) || (step67 < 0 && _i.<Integer>get().intValue() >= limit67) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step67))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5267;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5268;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5270;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5271;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5272;BA.debugLine="h = -PD.YArray(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, -_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)).<Double>get().doubleValue()*__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ ).<Double>get().doubleValue());Debug.locals.put("h", _h);
 BA.debugLineNum = 5273;BA.debugLine="If Mean < 0 And -sMean0 > h + 0.3 * Texts.Scal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_mean,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",RemoteObject.createImmutable(-(double) (0 + _smean0.<Integer>get().intValue())),RemoteObject.solve(new RemoteObject[] {_h,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))) { 
 BA.debugLineNum = 5274;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip  + 0.5)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5275;BA.debugLine="y0 = sMean + 0.3 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 5276;BA.debugLine="yt = sMean + 1.2 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_smean,RemoteObject.createImmutable(1.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5277;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 };
 }}
;
 BA.debugLineNum = 5283;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 5284;BA.debugLine="Private rctText, rctMean As B4XRect";
Debug.JustUpdateDeviceLine();
_rcttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rctText", _rcttext);
_rctmean = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rctMean", _rctmean);
 BA.debugLineNum = 5285;BA.debugLine="Private txtW, txtH As Double";
Debug.JustUpdateDeviceLine();
_txtw = RemoteObject.createImmutable(0);Debug.locals.put("txtW", _txtw);
_txth = RemoteObject.createImmutable(0);Debug.locals.put("txtH", _txth);
 BA.debugLineNum = 5286;BA.debugLine="If BMVNFUsed = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_bmvnfused" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5287;BA.debugLine="txt = NumberFormat3(Mean, 6)";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_mean),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 5289;BA.debugLine="txt = NumberFormat2(Mean, BMVNF.MinimumIntegers,";
Debug.JustUpdateDeviceLine();
_txt = xchart.__c.runMethod(true,"NumberFormat2",(Object)(_mean),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"MinimumIntegers" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"MaximumFractions" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"MinimumFractions" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).getField(true,"GroupingUsed" /*RemoteObject*/ )));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 5291;BA.debugLine="rctText = xcvsGraph.MeasureText(txt, Texts.ScaleF";
Debug.JustUpdateDeviceLine();
_rcttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_txt),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rctText", _rcttext);
 BA.debugLineNum = 5292;BA.debugLine="txtW = 4dip + rctText.Width";
Debug.JustUpdateDeviceLine();
_txtw = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))),_rcttext.runMethod(true,"getWidth")}, "+",1, 0);Debug.locals.put("txtW", _txtw);
 BA.debugLineNum = 5293;BA.debugLine="txtH = 1.2 * rctText.Height";
Debug.JustUpdateDeviceLine();
_txth = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.2),_rcttext.runMethod(true,"getHeight")}, "*",0, 0);Debug.locals.put("txtH", _txth);
 BA.debugLineNum = 5294;BA.debugLine="rctMean.Initialize(x0 - txtW / 2, y0, x0 + txtW /";
Debug.JustUpdateDeviceLine();
_rctmean.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_txtw,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_txtw,RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y0,_txth}, "+",1, 0))));
 BA.debugLineNum = 5295;BA.debugLine="xcvsGraph.DrawRect(rctMean, Graph.ChartBackground";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rctmean),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 5296;BA.debugLine="xcvsGraph.DrawText(txt, x0, yt, Texts.ScaleFont,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _yt)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 5298;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarsh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarsH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4975);
if (RapidSub.canDelegate("drawbarsh")) { return __ref.runUserSub(false, "xchart","drawbarsh", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _j = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _sign = RemoteObject.createImmutable(0);
RemoteObject _cols = null;
RemoteObject _acols = null;
RemoteObject _names = null;
RemoteObject _gradientorientation = RemoteObject.createImmutable("");
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _argb = RemoteObject.declareNull("b4a.example.bitmapcreator._argbcolor");
RemoteObject _bmpcreate = RemoteObject.declareNull("b4a.example.bitmapcreator");
RemoteObject _mxaxis0 = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _py = null;
RemoteObject _r = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _rb = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _bmc1 = RemoteObject.declareNull("b4a.example.bitmapcreator");
 BA.debugLineNum = 4975;BA.debugLine="Private Sub DrawBarsH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4976;BA.debugLine="Private i, j, x, h, y, y0, Sign As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_j = RemoteObject.createImmutable(0);Debug.locals.put("j", _j);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_sign = RemoteObject.createImmutable(0);Debug.locals.put("Sign", _sign);
 BA.debugLineNum = 4977;BA.debugLine="Private Cols(Items.Size), ACols(Items.Size) As In";
Debug.JustUpdateDeviceLine();
_cols = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Cols", _cols);
_acols = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("ACols", _acols);
 BA.debugLineNum = 4978;BA.debugLine="Private Names(Items.Size), GradientOrientation As";
Debug.JustUpdateDeviceLine();
_names = RemoteObject.createNewArray ("String", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Names", _names);
_gradientorientation = RemoteObject.createImmutable("");Debug.locals.put("GradientOrientation", _gradientorientation);
 BA.debugLineNum = 4980;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step4 > 0 && _i.<Integer>get().intValue() <= limit4) || (step4 < 0 && _i.<Integer>get().intValue() >= limit4) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step4))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4981;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 4982;BA.debugLine="ID = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4983;BA.debugLine="Cols(i) = ID.Color";
Debug.JustUpdateDeviceLine();
_cols.setArrayElement (_id.getField(true,"Color" /*RemoteObject*/ ),_i);
 BA.debugLineNum = 4984;BA.debugLine="Private ARGB As ARGBColor";
Debug.JustUpdateDeviceLine();
_argb = RemoteObject.createNew ("b4a.example.bitmapcreator._argbcolor");Debug.locals.put("ARGB", _argb);
 BA.debugLineNum = 4985;BA.debugLine="Private BmpCreate As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmpcreate = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("BmpCreate", _bmpcreate);
 BA.debugLineNum = 4986;BA.debugLine="BmpCreate.Initialize(10, 10)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, 10)),(Object)(BA.numberCast(int.class, 10)));
 BA.debugLineNum = 4987;BA.debugLine="BmpCreate.ColorToARGB(Cols(i), ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(_cols.getArrayElement(true,_i)),(Object)(_argb));
 BA.debugLineNum = 4988;BA.debugLine="ACols(i) = xui.Color_ARGB(Graph.GradientColorsAl";
Debug.JustUpdateDeviceLine();
_acols.setArrayElement (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b"))),_i);
 BA.debugLineNum = 4989;BA.debugLine="Names(i) = ID.Name";
Debug.JustUpdateDeviceLine();
_names.setArrayElement (_id.getField(true,"Name" /*RemoteObject*/ ),_i);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4992;BA.debugLine="If Graph.ChartType = \"H_BAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_BAR"))) { 
 BA.debugLineNum = 4993;BA.debugLine="Private mXAxis0 = Graph.Left - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_mxaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mXAxis0", _mxaxis0);Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 4995;BA.debugLine="If Graph.IncludeBarMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeBarMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4996;BA.debugLine="DrawBarMeanLineH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarmeanlineh" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4999;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outs";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 5000;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step21 = 1;
final int limit21 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step21 > 0 && _i.<Integer>get().intValue() <= limit21) || (step21 < 0 && _i.<Integer>get().intValue() >= limit21) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step21))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5001;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5002;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5004;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5005;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5006;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5007;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5009;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5010;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - (ip + 0.5)";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "--*+/",3, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 5011;BA.debugLine="Sign = -1";
Debug.JustUpdateDeviceLine();
_sign = BA.numberCast(int.class, -(double) (0 + 1));Debug.locals.put("Sign", _sign);
 }else {
 BA.debugLineNum = 5013;BA.debugLine="y0 = Graph.Top + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "++*-/",3, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 5014;BA.debugLine="Sign = 1";
Debug.JustUpdateDeviceLine();
_sign = BA.numberCast(int.class, 1);Debug.locals.put("Sign", _sign);
 };
 BA.debugLineNum = 5017;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step35 = 1;
final int limit35 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step35 > 0 && _j.<Integer>get().intValue() <= limit35) || (step35 < 0 && _j.<Integer>get().intValue() >= limit35) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step35))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 5018;BA.debugLine="Private r, rb As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
_rb = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rb", _rb);
 BA.debugLineNum = 5019;BA.debugLine="y = y0 + j * Graph.BarSubWidth * Sign";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_y0,_j,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),_sign}, "+**",1, 1);Debug.locals.put("y", _y);
 BA.debugLineNum = 5021;BA.debugLine="If Scale(sY(0)).Automatic = False Then ' manua";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5022;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5023;BA.debugLine="h = (py(j) - Scale(sY(0)).MinVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5024;BA.debugLine="r.Initialize(Graph.Left, y + Graph.BarSubWid";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),_sign}, "+*",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 5025;BA.debugLine="GradientOrientation = \"LEFT_RIGHT\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("LEFT_RIGHT");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else 
{ BA.debugLineNum = 5026;BA.debugLine="Else If  Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5027;BA.debugLine="h = (py(j) - Scale(sY(0)).MaxVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5028;BA.debugLine="r.Initialize(Graph.Right + h, y + Graph.BarS";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),_sign}, "+*",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 5029;BA.debugLine="GradientOrientation = \"RIGHT_LEFT\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("RIGHT_LEFT");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 5031;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5032;BA.debugLine="If h > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5033;BA.debugLine="r.Initialize(mXAxis0, y + Graph.BarSubWidth";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),_sign}, "+*",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 5034;BA.debugLine="GradientOrientation = \"LEFT_RIGHT\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("LEFT_RIGHT");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 5036;BA.debugLine="r.Initialize(mXAxis0  + h, y + Graph.BarSub";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),_sign}, "+*",1, 1))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 5037;BA.debugLine="GradientOrientation = \"RIGHT_LEFT\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("RIGHT_LEFT");Debug.locals.put("GradientOrientation", _gradientorientation);
 };
 }}
;
 }else {
 BA.debugLineNum = 5041;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5042;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5043;BA.debugLine="If h < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5044;BA.debugLine="r.Initialize(mXAxis0 + h, y - Graph.BarSubW";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "-",1, 1))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, _y)));
 }else {
 BA.debugLineNum = 5046;BA.debugLine="r.Initialize(mXAxis0, y - Graph.BarSubWidth";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 };
 }else {
 BA.debugLineNum = 5049;BA.debugLine="If h < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5050;BA.debugLine="r.Initialize(mXAxis0 + h, y, mXAxis0, y + G";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))));
 }else {
 BA.debugLineNum = 5052;BA.debugLine="r.Initialize(mXAxis0, y, mXAxis0 + h, y + G";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))));
 };
 };
 };
 BA.debugLineNum = 5056;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5057;BA.debugLine="xcvsGraph.DrawRect(r, Cols(j), True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_cols.getArrayElement(true,_j)),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 5059;BA.debugLine="Private bmc1 As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmc1 = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("bmc1", _bmc1);
 BA.debugLineNum = 5060;BA.debugLine="rb.Initialize(0, 0, Max(1, Abs(h)), Graph.Bar";
Debug.JustUpdateDeviceLine();
_rb.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ))));
 BA.debugLineNum = 5061;BA.debugLine="bmc1.Initialize(Max(1, Abs(h)), Graph.BarSubW";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )));
 BA.debugLineNum = 5062;BA.debugLine="If h > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5063;BA.debugLine="GradientOrientation = \"RIGHT_LEFT\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("RIGHT_LEFT");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 5065;BA.debugLine="GradientOrientation = \"LEFT_RIGHT\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("LEFT_RIGHT");Debug.locals.put("GradientOrientation", _gradientorientation);
 };
 BA.debugLineNum = 5067;BA.debugLine="bmc1.FillGradient(Array As Int(Cols(j), ACols";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_fillgradient",(Object)(RemoteObject.createNewArray("int",new int[] {2},new Object[] {_cols.getArrayElement(true,_j),_acols.getArrayElement(true,_j)})),(Object)(_rb),(Object)(_gradientorientation));
 BA.debugLineNum = 5068;BA.debugLine="xcvsGraph.DrawBitmap(bmc1.Bitmap, r)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawBitmap",(Object)((_bmc1.runMethod(false,"_getbitmap").getObject())),(Object)(_r));
 };
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5072;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 5074;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5075;BA.debugLine="If mXAxis0 = Graph.Left Or mXAxis0 = Graph.Top";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_mxaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("=",_mxaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5076;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 5078;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5079;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 5081;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 BA.debugLineNum = 5086;BA.debugLine="If Graph.IncludeBarMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeBarMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5087;BA.debugLine="DrawBarMeanLineValueH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarmeanlinevalueh" /*RemoteObject*/ );
 };
 BA.debugLineNum = 5090;BA.debugLine="If Graph.IncludeValues = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5091;BA.debugLine="If PD.YArray.Length = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 5092;BA.debugLine="DrawBarValuesSingleH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarvaluessingleh" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 5094;BA.debugLine="DrawBarValuesMultiH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarvaluesmultih" /*RemoteObject*/ );
 };
 };
 }else {
 BA.debugLineNum = 5098;BA.debugLine="Private mXAxis0 = Graph.Left As Int";
Debug.JustUpdateDeviceLine();
_mxaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ );Debug.locals.put("mXAxis0", _mxaxis0);Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 5100;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outs";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 5101;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step114 = 1;
final int limit114 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step114 > 0 && _i.<Integer>get().intValue() <= limit114) || (step114 < 0 && _i.<Integer>get().intValue() >= limit114) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step114))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5102;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5103;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5105;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5106;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5107;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5108;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5109;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - (ip + 0.5)";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "--*-/",3, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 5111;BA.debugLine="y0 = Graph.Top + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "++*-/",3, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 5113;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5115;BA.debugLine="x = mXAxis0";
Debug.JustUpdateDeviceLine();
_x = _mxaxis0;Debug.locals.put("x", _x);
 BA.debugLineNum = 5116;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step127 = 1;
final int limit127 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step127 > 0 && _j.<Integer>get().intValue() <= limit127) || (step127 < 0 && _j.<Integer>get().intValue() >= limit127) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step127))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 5117;BA.debugLine="Private r, rb As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
_rb = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rb", _rb);
 BA.debugLineNum = 5118;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 5119;BA.debugLine="r.Initialize(x, y0, x + h, y0 + Graph.BarWidth";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_h}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "+",1, 1))));
 BA.debugLineNum = 5120;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5121;BA.debugLine="xcvsGraph.DrawRect(r, Cols(j), True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_cols.getArrayElement(true,_j)),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 5123;BA.debugLine="rb.Initialize(0, 0, Max(1, Abs(h)), Graph.Bar";
Debug.JustUpdateDeviceLine();
_rb.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))));
 BA.debugLineNum = 5124;BA.debugLine="Private bmc1 As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmc1 = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("bmc1", _bmc1);
 BA.debugLineNum = 5125;BA.debugLine="bmc1.Initialize(Max(1, Abs(h)), Graph.BarWidt";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )));
 BA.debugLineNum = 5126;BA.debugLine="bmc1.FillGradient(Array As Int(Cols(j), ACols";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_fillgradient",(Object)(RemoteObject.createNewArray("int",new int[] {2},new Object[] {_cols.getArrayElement(true,_j),_acols.getArrayElement(true,_j)})),(Object)(_rb),(Object)(RemoteObject.createImmutable("RIGHT_LEFT")));
 BA.debugLineNum = 5127;BA.debugLine="xcvsGraph.DrawBitmap(bmc1.Bitmap, r)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawBitmap",(Object)((_bmc1.runMethod(false,"_getbitmap").getObject())),(Object)(_r));
 };
 BA.debugLineNum = 5129;BA.debugLine="x = x + h";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.solve(new RemoteObject[] {_x,_h}, "+",1, 1);Debug.locals.put("x", _x);
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5132;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 5134;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5135;BA.debugLine="If mXAxis0 = Graph.Left Or mXAxis0 = Graph.Top";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_mxaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("=",_mxaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5136;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 5138;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5139;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 5141;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 };
 BA.debugLineNum = 5147;BA.debugLine="If HLines.Size > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5148;BA.debugLine="DrawHorizontalLinesValueH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawhorizontallinesvalueh" /*RemoteObject*/ );
 };
 BA.debugLineNum = 5151;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Items.Size";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5152;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 5155;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 5156;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarsv(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarsV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4585);
if (RapidSub.canDelegate("drawbarsv")) { return __ref.runUserSub(false, "xchart","drawbarsv", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _j = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _cols = null;
RemoteObject _acols = null;
RemoteObject _names = null;
RemoteObject _gradientorientation = RemoteObject.createImmutable("");
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _argb = RemoteObject.declareNull("b4a.example.bitmapcreator._argbcolor");
RemoteObject _bmpcreate = RemoteObject.declareNull("b4a.example.bitmapcreator");
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _py = null;
RemoteObject _r = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _rb = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _bmc1 = RemoteObject.declareNull("b4a.example.bitmapcreator");
RemoteObject _barwidth_2 = RemoteObject.createImmutable(0);
RemoteObject _barwidth_28 = RemoteObject.createImmutable(0);
RemoteObject _color = RemoteObject.createImmutable(0);
RemoteObject _acolor = RemoteObject.createImmutable(0);
RemoteObject _acolori = RemoteObject.createImmutable(0);
RemoteObject _acolord = RemoteObject.createImmutable(0);
RemoteObject _volumemax = RemoteObject.createImmutable(0);
RemoteObject _volumescale = RemoteObject.createImmutable(0);
RemoteObject _yo = RemoteObject.createImmutable(0);
RemoteObject _yt = RemoteObject.createImmutable(0);
RemoteObject _yl = RemoteObject.createImmutable(0);
RemoteObject _yc = RemoteObject.createImmutable(0);
RemoteObject _linewidth = RemoteObject.createImmutable(0);
RemoteObject _rc = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _acolort = RemoteObject.createImmutable(0);
RemoteObject _yh = RemoteObject.createImmutable(0);
 BA.debugLineNum = 4585;BA.debugLine="Private Sub DrawBarsV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4586;BA.debugLine="Private i, j, x0, x, h, y As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_j = RemoteObject.createImmutable(0);Debug.locals.put("j", _j);
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 4587;BA.debugLine="Private Cols(Items.Size), ACols(Items.Size) As In";
Debug.JustUpdateDeviceLine();
_cols = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Cols", _cols);
_acols = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("ACols", _acols);
 BA.debugLineNum = 4588;BA.debugLine="Private Names(Items.Size), GradientOrientation As";
Debug.JustUpdateDeviceLine();
_names = RemoteObject.createNewArray ("String", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Names", _names);
_gradientorientation = RemoteObject.createImmutable("");Debug.locals.put("GradientOrientation", _gradientorientation);
 BA.debugLineNum = 4590;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step4 > 0 && _i.<Integer>get().intValue() <= limit4) || (step4 < 0 && _i.<Integer>get().intValue() >= limit4) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step4))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4591;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 4592;BA.debugLine="ID = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4593;BA.debugLine="Cols(i) = ID.Color";
Debug.JustUpdateDeviceLine();
_cols.setArrayElement (_id.getField(true,"Color" /*RemoteObject*/ ),_i);
 BA.debugLineNum = 4594;BA.debugLine="Private ARGB As ARGBColor";
Debug.JustUpdateDeviceLine();
_argb = RemoteObject.createNew ("b4a.example.bitmapcreator._argbcolor");Debug.locals.put("ARGB", _argb);
 BA.debugLineNum = 4595;BA.debugLine="Private BmpCreate As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmpcreate = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("BmpCreate", _bmpcreate);
 BA.debugLineNum = 4596;BA.debugLine="BmpCreate.Initialize(10, 10)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, 10)),(Object)(BA.numberCast(int.class, 10)));
 BA.debugLineNum = 4597;BA.debugLine="BmpCreate.ColorToARGB(Cols(i), ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(_cols.getArrayElement(true,_i)),(Object)(_argb));
 BA.debugLineNum = 4598;BA.debugLine="ACols(i) = xui.Color_ARGB(Graph.GradientColorsAl";
Debug.JustUpdateDeviceLine();
_acols.setArrayElement (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b"))),_i);
 BA.debugLineNum = 4599;BA.debugLine="Names(i) = ID.Name";
Debug.JustUpdateDeviceLine();
_names.setArrayElement (_id.getField(true,"Name" /*RemoteObject*/ ),_i);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4602;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR"),BA.ObjectToString("STACKED_BAR"),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"))) {
case 0: {
 BA.debugLineNum = 4604;BA.debugLine="Private mYAxis0 = Graph.Bottom + Scale(sY(0)).M";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4606;BA.debugLine="If Graph.IncludeBarMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeBarMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4607;BA.debugLine="DrawBarMeanLineV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarmeanlinev" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4610;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing out";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4611;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step22 = 1;
final int limit22 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step22 > 0 && _i.<Integer>get().intValue() <= limit22) || (step22 < 0 && _i.<Integer>get().intValue() >= limit22) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step22))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4612;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4613;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4615;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4616;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4617;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 4618;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "++*-/",3, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4619;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 4621;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step30 = 1;
final int limit30 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step30 > 0 && _j.<Integer>get().intValue() <= limit30) || (step30 < 0 && _j.<Integer>get().intValue() >= limit30) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step30))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 4622;BA.debugLine="Private r, rb As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
_rb = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rb", _rb);
 BA.debugLineNum = 4623;BA.debugLine="x = x0 + j * Graph.BarSubWidth";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.solve(new RemoteObject[] {_x0,_j,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+*",1, 1);Debug.locals.put("x", _x);
 BA.debugLineNum = 4625;BA.debugLine="If Scale(sY(0)).Automatic = False Then ' manu";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4626;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4627;BA.debugLine="h = (py(j) - Scale(sY(0)).MinVal) * Scale(s";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 4628;BA.debugLine="r.Initialize(x, Graph.Bottom - h, x + Graph";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))));
 BA.debugLineNum = 4629;BA.debugLine="GradientOrientation = \"TOP_BOTTOM\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("TOP_BOTTOM");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else 
{ BA.debugLineNum = 4630;BA.debugLine="Else If  Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4631;BA.debugLine="h = (py(j) - Scale(sY(0)).MaxVal) * Scale(s";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 4632;BA.debugLine="r.Initialize(x, Graph.Top, x + Graph.BarSub";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h}, "-",1, 1))));
 BA.debugLineNum = 4633;BA.debugLine="GradientOrientation = \"BOTTOM_TOP\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("BOTTOM_TOP");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 4635;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 4636;BA.debugLine="If h > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4637;BA.debugLine="r.Initialize(x, mYAxis0 - h, x + Graph.Bar";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _myaxis0)));
 BA.debugLineNum = 4638;BA.debugLine="GradientOrientation = \"TOP_BOTTOM\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("TOP_BOTTOM");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 4640;BA.debugLine="r.Initialize(x, mYAxis0, x + Graph.BarSubW";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1))));
 BA.debugLineNum = 4641;BA.debugLine="GradientOrientation = \"BOTTOM_TOP\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("BOTTOM_TOP");Debug.locals.put("GradientOrientation", _gradientorientation);
 };
 }}
;
 }else {
 BA.debugLineNum = 4645;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 4646;BA.debugLine="If h > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4647;BA.debugLine="r.Initialize(x, mYAxis0 - h, x + Graph.BarS";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _myaxis0)));
 }else {
 BA.debugLineNum = 4649;BA.debugLine="r.Initialize(x, mYAxis0, x + Graph.BarSubWi";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1))));
 };
 };
 BA.debugLineNum = 4653;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4654;BA.debugLine="xcvsGraph.DrawRect(r, Cols(j), True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_cols.getArrayElement(true,_j)),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 4656;BA.debugLine="Private bmc1 As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmc1 = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("bmc1", _bmc1);
 BA.debugLineNum = 4657;BA.debugLine="rb.Initialize(0, 0, Graph.BarSubWidth, Max(1";
Debug.JustUpdateDeviceLine();
_rb.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))));
 BA.debugLineNum = 4658;BA.debugLine="bmc1.Initialize(Graph.BarSubWidth, Max(1, Ab";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))));
 BA.debugLineNum = 4659;BA.debugLine="If h > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4660;BA.debugLine="GradientOrientation = \"TOP_BOTTOM\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("TOP_BOTTOM");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 4662;BA.debugLine="GradientOrientation = \"BOTTOM_TOP\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("BOTTOM_TOP");Debug.locals.put("GradientOrientation", _gradientorientation);
 };
 BA.debugLineNum = 4664;BA.debugLine="bmc1.FillGradient(Array As Int(Cols(j), ACol";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_fillgradient",(Object)(RemoteObject.createNewArray("int",new int[] {2},new Object[] {_cols.getArrayElement(true,_j),_acols.getArrayElement(true,_j)})),(Object)(_rb),(Object)(_gradientorientation));
 BA.debugLineNum = 4665;BA.debugLine="xcvsGraph.DrawBitmap(bmc1.Bitmap, r)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawBitmap",(Object)((_bmc1.runMethod(false,"_getbitmap").getObject())),(Object)(_r));
 };
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4669;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4671;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4672;BA.debugLine="If mYAxis0 = Graph.Top Or mYAxis0 = Graph.Bott";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 4673;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4675;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4676;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4678;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 BA.debugLineNum = 4683;BA.debugLine="If Graph.IncludeValues = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4684;BA.debugLine="If PD.YArray.Length = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 4685;BA.debugLine="DrawBarValuesSingleV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarvaluessinglev" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 4687;BA.debugLine="DrawBarValuesMultiV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarvaluesmultiv" /*RemoteObject*/ );
 };
 };
 BA.debugLineNum = 4691;BA.debugLine="If Graph.IncludeBarMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeBarMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4692;BA.debugLine="DrawBarMeanLineValueV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarmeanlinevaluev" /*RemoteObject*/ );
 };
 break; }
case 1: {
 BA.debugLineNum = 4695;BA.debugLine="Private mYAxis0 = Graph.Bottom As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ );Debug.locals.put("mYAxis0", _myaxis0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4697;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing out";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4698;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step101 = 1;
final int limit101 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step101 > 0 && _i.<Integer>get().intValue() <= limit101) || (step101 < 0 && _i.<Integer>get().intValue() >= limit101) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step101))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4699;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4700;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4702;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4703;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4704;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 4705;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "++*-/",3, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4706;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 4708;BA.debugLine="y = mYAxis0";
Debug.JustUpdateDeviceLine();
_y = _myaxis0;Debug.locals.put("y", _y);
 BA.debugLineNum = 4709;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step110 = 1;
final int limit110 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step110 > 0 && _j.<Integer>get().intValue() <= limit110) || (step110 < 0 && _j.<Integer>get().intValue() >= limit110) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step110))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 4710;BA.debugLine="Private r, rb As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
_rb = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rb", _rb);
 BA.debugLineNum = 4711;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 4712;BA.debugLine="r.Initialize(x0, y - h, x0 + Graph.BarWidth,";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_h}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 4713;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4714;BA.debugLine="xcvsGraph.DrawRect(r, Cols(j), True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_cols.getArrayElement(true,_j)),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 4716;BA.debugLine="rb.Initialize(0, 0, Graph.BarWidth, Max(1, A";
Debug.JustUpdateDeviceLine();
_rb.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))));
 BA.debugLineNum = 4717;BA.debugLine="Private bmc1 As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmc1 = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("bmc1", _bmc1);
 BA.debugLineNum = 4718;BA.debugLine="bmc1.Initialize(Graph.BarWidth, Max(1, Abs(h";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 1)),(Object)(xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))))))));
 BA.debugLineNum = 4719;BA.debugLine="bmc1.FillGradient(Array As Int(Cols(j), ACol";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_fillgradient",(Object)(RemoteObject.createNewArray("int",new int[] {2},new Object[] {_cols.getArrayElement(true,_j),_acols.getArrayElement(true,_j)})),(Object)(_rb),(Object)(RemoteObject.createImmutable("TOP_BOTTOM")));
 BA.debugLineNum = 4720;BA.debugLine="xcvsGraph.DrawBitmap(bmc1.Bitmap, r)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawBitmap",(Object)((_bmc1.runMethod(false,"_getbitmap").getObject())),(Object)(_r));
 };
 BA.debugLineNum = 4722;BA.debugLine="y = y - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_y,_h}, "-",1, 1);Debug.locals.put("y", _y);
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4725;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4727;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4728;BA.debugLine="If mYAxis0 = Graph.Top Or mYAxis0 = Graph.Bott";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 4729;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4730;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 }else {
 BA.debugLineNum = 4733;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4734;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4736;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 break; }
case 2: {
 BA.debugLineNum = 4741;BA.debugLine="Private BarWidth_2, BarWidth_28 As Int";
Debug.JustUpdateDeviceLine();
_barwidth_2 = RemoteObject.createImmutable(0);Debug.locals.put("BarWidth_2", _barwidth_2);
_barwidth_28 = RemoteObject.createImmutable(0);Debug.locals.put("BarWidth_28", _barwidth_28);
 BA.debugLineNum = 4742;BA.debugLine="BarWidth_2 = Graph.BarWidth / 2";
Debug.JustUpdateDeviceLine();
_barwidth_2 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("BarWidth_2", _barwidth_2);
 BA.debugLineNum = 4743;BA.debugLine="If BarWidth_2 >= 6dip Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_barwidth_2,BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))))) { 
 BA.debugLineNum = 4744;BA.debugLine="BarWidth_28 = BarWidth_2 * 0.7 'used for CANDL";
Debug.JustUpdateDeviceLine();
_barwidth_28 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_barwidth_2,RemoteObject.createImmutable(0.7)}, "*",0, 0));Debug.locals.put("BarWidth_28", _barwidth_28);
 }else {
 BA.debugLineNum = 4746;BA.debugLine="BarWidth_28 = BarWidth_2";
Debug.JustUpdateDeviceLine();
_barwidth_28 = _barwidth_2;Debug.locals.put("BarWidth_28", _barwidth_28);
 };
 BA.debugLineNum = 4748;BA.debugLine="Private mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4749;BA.debugLine="Private Color, AColor, AColorI, AColorD As Int";
Debug.JustUpdateDeviceLine();
_color = RemoteObject.createImmutable(0);Debug.locals.put("Color", _color);
_acolor = RemoteObject.createImmutable(0);Debug.locals.put("AColor", _acolor);
_acolori = RemoteObject.createImmutable(0);Debug.locals.put("AColorI", _acolori);
_acolord = RemoteObject.createImmutable(0);Debug.locals.put("AColorD", _acolord);
 BA.debugLineNum = 4751;BA.debugLine="Private ARGB As ARGBColor";
Debug.JustUpdateDeviceLine();
_argb = RemoteObject.createNew ("b4a.example.bitmapcreator._argbcolor");Debug.locals.put("ARGB", _argb);
 BA.debugLineNum = 4752;BA.debugLine="Private BmpCreate As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmpcreate = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("BmpCreate", _bmpcreate);
 BA.debugLineNum = 4753;BA.debugLine="BmpCreate.ColorToARGB(Bar.IncreaseColor, ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"IncreaseColor" /*RemoteObject*/ )),(Object)(_argb));
 BA.debugLineNum = 4754;BA.debugLine="AColorI = xui.Color_ARGB(Graph.GradientColorsAl";
Debug.JustUpdateDeviceLine();
_acolori = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b")));Debug.locals.put("AColorI", _acolori);
 BA.debugLineNum = 4755;BA.debugLine="BmpCreate.ColorToARGB(Bar.DecreaseColor, ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ )),(Object)(_argb));
 BA.debugLineNum = 4756;BA.debugLine="AColorD = xui.Color_ARGB(Graph.GradientColorsAl";
Debug.JustUpdateDeviceLine();
_acolord = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b")));Debug.locals.put("AColorD", _acolord);
 BA.debugLineNum = 4758;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal *";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4759;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing out";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4761;BA.debugLine="If Bar.CandleDisplayVolume = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4762;BA.debugLine="Private VolumeMax, VolumeScale As Double";
Debug.JustUpdateDeviceLine();
_volumemax = RemoteObject.createImmutable(0);Debug.locals.put("VolumeMax", _volumemax);
_volumescale = RemoteObject.createImmutable(0);Debug.locals.put("VolumeScale", _volumescale);
 BA.debugLineNum = 4763;BA.debugLine="VolumeMax = -1e10";
Debug.JustUpdateDeviceLine();
_volumemax = BA.numberCast(double.class, -1e10);Debug.locals.put("VolumeMax", _volumemax);
 BA.debugLineNum = 4764;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step161 = 1;
final int limit161 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step161 > 0 && _i.<Integer>get().intValue() <= limit161) || (step161 < 0 && _i.<Integer>get().intValue() >= limit161) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step161))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4765;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4766;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4768;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4769;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4770;BA.debugLine="VolumeMax = Max(VolumeMax, PD.YArray(4))";
Debug.JustUpdateDeviceLine();
_volumemax = xchart.__c.runMethod(true,"Max",(Object)(_volumemax),(Object)(_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 4))));Debug.locals.put("VolumeMax", _volumemax);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4772;BA.debugLine="VolumeScale = 0.2 * Graph.Height / VolumeMax";
Debug.JustUpdateDeviceLine();
_volumescale = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),_volumemax}, "*/",0, 0);Debug.locals.put("VolumeScale", _volumescale);
 };
 BA.debugLineNum = 4775;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step170 = 1;
final int limit170 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step170 > 0 && _i.<Integer>get().intValue() <= limit170) || (step170 < 0 && _i.<Integer>get().intValue() >= limit170) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step170))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4776;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4777;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4779;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4780;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4781;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 4782;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4783;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 4785;BA.debugLine="y = mYAxis0";
Debug.JustUpdateDeviceLine();
_y = _myaxis0;Debug.locals.put("y", _y);
 BA.debugLineNum = 4786;BA.debugLine="Private yo, yt, yl, yc As Int";
Debug.JustUpdateDeviceLine();
_yo = RemoteObject.createImmutable(0);Debug.locals.put("yo", _yo);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
_yl = RemoteObject.createImmutable(0);Debug.locals.put("yl", _yl);
_yc = RemoteObject.createImmutable(0);Debug.locals.put("yc", _yc);
 BA.debugLineNum = 4787;BA.debugLine="yo = Graph.Bottom - (py(0) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_yo = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yo", _yo);
 BA.debugLineNum = 4788;BA.debugLine="yt = Graph.Bottom - (py(1) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 4789;BA.debugLine="yl = Graph.Bottom - (py(2) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_yl = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 2)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yl", _yl);
 BA.debugLineNum = 4790;BA.debugLine="yc = Graph.Bottom - (py(3) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_yc = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 3)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yc", _yc);
 BA.debugLineNum = 4791;BA.debugLine="Private r, rb As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
_rb = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rb", _rb);
 BA.debugLineNum = 4792;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 4793;BA.debugLine="r.Initialize(x0, y - h, x0 + Graph.BarWidth, y";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_h}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 4795;BA.debugLine="Private LineWidth As Int";
Debug.JustUpdateDeviceLine();
_linewidth = RemoteObject.createImmutable(0);Debug.locals.put("LineWidth", _linewidth);
 BA.debugLineNum = 4796;BA.debugLine="LineWidth = Bar.WickWidth";
Debug.JustUpdateDeviceLine();
_linewidth = __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickWidth" /*RemoteObject*/ );Debug.locals.put("LineWidth", _linewidth);
 BA.debugLineNum = 4797;BA.debugLine="If Bar.WickWidth > 0 And Graph.BarWidth < 10di";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickWidth" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("<",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))))) { 
 BA.debugLineNum = 4798;BA.debugLine="LineWidth = 1dip";
Debug.JustUpdateDeviceLine();
_linewidth = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("LineWidth", _linewidth);
 };
 BA.debugLineNum = 4800;BA.debugLine="xcvsGraph.DrawLine(x0, yt, x0, yl, Bar.WickCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _yt)),(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _yl)),(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _linewidth)));
 BA.debugLineNum = 4801;BA.debugLine="If py(3) = py(0) Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_py.getArrayElement(true,BA.numberCast(int.class, 3)),_py.getArrayElement(true,BA.numberCast(int.class, 0)))) { 
 BA.debugLineNum = 4802;BA.debugLine="xcvsGraph.DrawLine(x0 - BarWidth_2, yc, x0 +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "-",1, 1))),(Object)(BA.numberCast(float.class, _yc)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yo)),(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else 
{ BA.debugLineNum = 4803;BA.debugLine="Else If Abs(yc - yo) <= 3dip Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_yc,_yo}, "-",1, 1)))),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3)))))) { 
 BA.debugLineNum = 4804;BA.debugLine="If py(0) > py(3) Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_py.getArrayElement(true,BA.numberCast(int.class, 0)),_py.getArrayElement(true,BA.numberCast(int.class, 3)))) { 
 BA.debugLineNum = 4805;BA.debugLine="yc = (yc + yo) / 2";
Debug.JustUpdateDeviceLine();
_yc = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_yc,_yo}, "+",1, 1)),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("yc", _yc);
 BA.debugLineNum = 4806;BA.debugLine="xcvsGraph.DrawLine(x0 - BarWidth_2, yc, x0 +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "-",1, 1))),(Object)(BA.numberCast(float.class, _yc)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yc)),(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3))))));
 BA.debugLineNum = 4807;BA.debugLine="AColor = AColorD";
Debug.JustUpdateDeviceLine();
_acolor = _acolord;Debug.locals.put("AColor", _acolor);
 }else {
 BA.debugLineNum = 4809;BA.debugLine="yc = (yc + yo) / 2";
Debug.JustUpdateDeviceLine();
_yc = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_yc,_yo}, "+",1, 1)),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("yc", _yc);
 BA.debugLineNum = 4810;BA.debugLine="xcvsGraph.DrawLine(x0 - BarWidth_2, yc, x0 +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "-",1, 1))),(Object)(BA.numberCast(float.class, _yc)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yc)),(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"IncreaseColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3))))));
 BA.debugLineNum = 4811;BA.debugLine="AColor = AColorI";
Debug.JustUpdateDeviceLine();
_acolor = _acolori;Debug.locals.put("AColor", _acolor);
 };
 }else {
 BA.debugLineNum = 4814;BA.debugLine="If py(0) > py(3) Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_py.getArrayElement(true,BA.numberCast(int.class, 0)),_py.getArrayElement(true,BA.numberCast(int.class, 3)))) { 
 BA.debugLineNum = 4815;BA.debugLine="r.Initialize(x0 - BarWidth_2, yo, x0 + BarWi";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "-",1, 1))),(Object)(BA.numberCast(float.class, _yo)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yc)));
 BA.debugLineNum = 4816;BA.debugLine="Color = Bar.DecreaseColor";
Debug.JustUpdateDeviceLine();
_color = __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ );Debug.locals.put("Color", _color);
 BA.debugLineNum = 4817;BA.debugLine="AColor = AColorD";
Debug.JustUpdateDeviceLine();
_acolor = _acolord;Debug.locals.put("AColor", _acolor);
 BA.debugLineNum = 4818;BA.debugLine="GradientOrientation = \"BOTTOM_TOP\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("BOTTOM_TOP");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 4820;BA.debugLine="r.Initialize(x0 - BarWidth_2, yc, x0 + BarWi";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "-",1, 1))),(Object)(BA.numberCast(float.class, _yc)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_2}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yo)));
 BA.debugLineNum = 4821;BA.debugLine="Color = Bar.IncreaseColor";
Debug.JustUpdateDeviceLine();
_color = __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"IncreaseColor" /*RemoteObject*/ );Debug.locals.put("Color", _color);
 BA.debugLineNum = 4822;BA.debugLine="AColor = AColorI";
Debug.JustUpdateDeviceLine();
_acolor = _acolori;Debug.locals.put("AColor", _acolor);
 BA.debugLineNum = 4823;BA.debugLine="GradientOrientation = \"TOP_BOTTOM\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("TOP_BOTTOM");Debug.locals.put("GradientOrientation", _gradientorientation);
 };
 BA.debugLineNum = 4826;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4827;BA.debugLine="xcvsGraph.DrawRect(r, Color, True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_color),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 4829;BA.debugLine="Private bmc1 As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmc1 = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("bmc1", _bmc1);
 BA.debugLineNum = 4830;BA.debugLine="rb.Initialize(0, 0, r.Width, r.Height)";
Debug.JustUpdateDeviceLine();
_rb.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(_r.runMethod(true,"getWidth")),(Object)(_r.runMethod(true,"getHeight")));
 BA.debugLineNum = 4831;BA.debugLine="bmc1.Initialize(r.Width, r.Height)";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, _r.runMethod(true,"getWidth"))),(Object)(BA.numberCast(int.class, _r.runMethod(true,"getHeight"))));
 BA.debugLineNum = 4832;BA.debugLine="bmc1.FillGradient(Array As Int(Color, AColor";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_fillgradient",(Object)(RemoteObject.createNewArray("int",new int[] {2},new Object[] {_color,_acolor})),(Object)(_rb),(Object)(_gradientorientation));
 BA.debugLineNum = 4833;BA.debugLine="xcvsGraph.DrawRect(r, Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4834;BA.debugLine="xcvsGraph.DrawBitmap(bmc1.Bitmap, r)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawBitmap",(Object)((_bmc1.runMethod(false,"_getbitmap").getObject())),(Object)(_r));
 };
 BA.debugLineNum = 4837;BA.debugLine="If Bar.DrawBodyBorder = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DrawBodyBorder" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4838;BA.debugLine="xcvsGraph.DrawRect(r, Bar.WickColor, False,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, _linewidth)));
 };
 }}
;
 BA.debugLineNum = 4841;BA.debugLine="If Bar.CandleDisplayVolume = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4842;BA.debugLine="Private rc As B4XRect";
Debug.JustUpdateDeviceLine();
_rc = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rc", _rc);
 BA.debugLineNum = 4843;BA.debugLine="rc.Initialize(x0 - BarWidth_28, Graph.Bottom";
Debug.JustUpdateDeviceLine();
_rc.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_28}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_py.getArrayElement(true,BA.numberCast(int.class, 4)),_volumescale}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,_barwidth_28}, "+",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))));
 BA.debugLineNum = 4844;BA.debugLine="xcvsGraph.DrawRect(rc, AColor, True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rc),(Object)(_acolor),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4847;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4849;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4850;BA.debugLine="If mYAxis0 = Graph.Top Or mYAxis0 = Graph.Bott";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 4851;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4852;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 }else {
 BA.debugLineNum = 4855;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4856;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4858;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 break; }
case 3: {
 BA.debugLineNum = 4863;BA.debugLine="Private BarWidth_2 = Graph.BarWidth / 2 As Int";
Debug.JustUpdateDeviceLine();
_barwidth_2 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("BarWidth_2", _barwidth_2);Debug.locals.put("BarWidth_2", _barwidth_2);
 BA.debugLineNum = 4864;BA.debugLine="Private mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4865;BA.debugLine="Private AColor, AColorT, AColorI, AColorD As In";
Debug.JustUpdateDeviceLine();
_acolor = RemoteObject.createImmutable(0);Debug.locals.put("AColor", _acolor);
_acolort = RemoteObject.createImmutable(0);Debug.locals.put("AColorT", _acolort);
_acolori = RemoteObject.createImmutable(0);Debug.locals.put("AColorI", _acolori);
_acolord = RemoteObject.createImmutable(0);Debug.locals.put("AColorD", _acolord);
 BA.debugLineNum = 4867;BA.debugLine="Private ARGB As ARGBColor";
Debug.JustUpdateDeviceLine();
_argb = RemoteObject.createNew ("b4a.example.bitmapcreator._argbcolor");Debug.locals.put("ARGB", _argb);
 BA.debugLineNum = 4868;BA.debugLine="Private BmpCreate As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmpcreate = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("BmpCreate", _bmpcreate);
 BA.debugLineNum = 4869;BA.debugLine="BmpCreate.ColorToARGB(Bar.TotalBarColor, ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"TotalBarColor" /*RemoteObject*/ )),(Object)(_argb));
 BA.debugLineNum = 4870;BA.debugLine="AColorT = xui.Color_ARGB(Graph.GradientColorsAl";
Debug.JustUpdateDeviceLine();
_acolort = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b")));Debug.locals.put("AColorT", _acolort);
 BA.debugLineNum = 4871;BA.debugLine="BmpCreate.ColorToARGB(Bar.IncreaseColor, ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"IncreaseColor" /*RemoteObject*/ )),(Object)(_argb));
 BA.debugLineNum = 4872;BA.debugLine="AColorI = xui.Color_ARGB(Graph.GradientColorsAl";
Debug.JustUpdateDeviceLine();
_acolori = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b")));Debug.locals.put("AColorI", _acolori);
 BA.debugLineNum = 4873;BA.debugLine="BmpCreate.ColorToARGB(Bar.DecreaseColor, ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ )),(Object)(_argb));
 BA.debugLineNum = 4874;BA.debugLine="AColorD = xui.Color_ARGB(Graph.GradientColorsAl";
Debug.JustUpdateDeviceLine();
_acolord = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b")));Debug.locals.put("AColorD", _acolord);
 BA.debugLineNum = 4876;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal *";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4877;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing out";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4878;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step265 = 1;
final int limit265 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step265 > 0 && _i.<Integer>get().intValue() <= limit265) || (step265 < 0 && _i.<Integer>get().intValue() >= limit265) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step265))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4879;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4880;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4882;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4883;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4884;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 4885;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "++*-/",3, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4886;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 4888;BA.debugLine="Private yh, yl, yt As Int";
Debug.JustUpdateDeviceLine();
_yh = RemoteObject.createImmutable(0);Debug.locals.put("yh", _yh);
_yl = RemoteObject.createImmutable(0);Debug.locals.put("yl", _yl);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 4889;BA.debugLine="Private r, rb As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
_rb = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rb", _rb);
 BA.debugLineNum = 4890;BA.debugLine="Private Color As Int";
Debug.JustUpdateDeviceLine();
_color = RemoteObject.createImmutable(0);Debug.locals.put("Color", _color);
 BA.debugLineNum = 4892;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 4893;BA.debugLine="If py(0) > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_py.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4894;BA.debugLine="yh = mYAxis0 - py(1)  * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_yh = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yh", _yh);
 BA.debugLineNum = 4895;BA.debugLine="yl = mYAxis0";
Debug.JustUpdateDeviceLine();
_yl = _myaxis0;Debug.locals.put("yl", _yl);
 BA.debugLineNum = 4896;BA.debugLine="yt = yh";
Debug.JustUpdateDeviceLine();
_yt = _yh;Debug.locals.put("yt", _yt);
 }else {
 BA.debugLineNum = 4898;BA.debugLine="yh = mYAxis0";
Debug.JustUpdateDeviceLine();
_yh = _myaxis0;Debug.locals.put("yh", _yh);
 BA.debugLineNum = 4899;BA.debugLine="yl = mYAxis0 - py(1) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_yl = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yl", _yl);
 BA.debugLineNum = 4900;BA.debugLine="yt = yl";
Debug.JustUpdateDeviceLine();
_yt = _yl;Debug.locals.put("yt", _yt);
 };
 BA.debugLineNum = 4902;BA.debugLine="r.Initialize(x0, yh, x0 + Graph.BarWidth, yl)";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _yh)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yl)));
 BA.debugLineNum = 4903;BA.debugLine="Color = Bar.TotalBarColor";
Debug.JustUpdateDeviceLine();
_color = __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"TotalBarColor" /*RemoteObject*/ );Debug.locals.put("Color", _color);
 BA.debugLineNum = 4904;BA.debugLine="AColor = AColorT";
Debug.JustUpdateDeviceLine();
_acolor = _acolort;Debug.locals.put("AColor", _acolor);
 }else {
 BA.debugLineNum = 4906;BA.debugLine="If py(0) > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_py.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4907;BA.debugLine="yh = mYAxis0 - (Max(py(1) - py(0), py(1))) *";
Debug.JustUpdateDeviceLine();
_yh = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,(xchart.__c.runMethod(true,"Max",(Object)(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 1))))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yh", _yh);
 BA.debugLineNum = 4908;BA.debugLine="yl = mYAxis0 - (Min(py(1) - py(0), py(1))) *";
Debug.JustUpdateDeviceLine();
_yl = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,(xchart.__c.runMethod(true,"Min",(Object)(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 1))))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yl", _yl);
 BA.debugLineNum = 4909;BA.debugLine="yt = mYAxis0 - (py(1) - py(0)) * Scale(sY(0)";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 4910;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 4911;BA.debugLine="r.Initialize(x0, yh, x0 + Graph.BarWidth, yl";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _yh)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yl)));
 BA.debugLineNum = 4912;BA.debugLine="Color = Bar.IncreaseColor";
Debug.JustUpdateDeviceLine();
_color = __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"IncreaseColor" /*RemoteObject*/ );Debug.locals.put("Color", _color);
 BA.debugLineNum = 4913;BA.debugLine="AColor = AColorI";
Debug.JustUpdateDeviceLine();
_acolor = _acolori;Debug.locals.put("AColor", _acolor);
 }else {
 BA.debugLineNum = 4915;BA.debugLine="yh = mYAxis0 - (Max(py(1) - py(0), py(1))) *";
Debug.JustUpdateDeviceLine();
_yh = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,(xchart.__c.runMethod(true,"Max",(Object)(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 1))))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yh", _yh);
 BA.debugLineNum = 4916;BA.debugLine="yl = mYAxis0 - (Min(py(1) - py(0), py(1))) *";
Debug.JustUpdateDeviceLine();
_yl = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,(xchart.__c.runMethod(true,"Min",(Object)(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 1))))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yl", _yl);
 BA.debugLineNum = 4917;BA.debugLine="yt = mYAxis0 - (py(1) - py(0)) * Scale(sY(0)";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 4918;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 4919;BA.debugLine="r.Initialize(x0, yh, x0 + Graph.BarWidth, yl";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _yh)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yl)));
 BA.debugLineNum = 4920;BA.debugLine="Color = Bar.DecreaseColor";
Debug.JustUpdateDeviceLine();
_color = __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ );Debug.locals.put("Color", _color);
 BA.debugLineNum = 4921;BA.debugLine="AColor = AColorD";
Debug.JustUpdateDeviceLine();
_acolor = _acolord;Debug.locals.put("AColor", _acolor);
 };
 };
 BA.debugLineNum = 4924;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4925;BA.debugLine="xcvsGraph.DrawRect(r, Color, True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_color),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 4927;BA.debugLine="Private bmc1 As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmc1 = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("bmc1", _bmc1);
 BA.debugLineNum = 4928;BA.debugLine="rb.Initialize(0, 0, r.Width, r.Height)";
Debug.JustUpdateDeviceLine();
_rb.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(_r.runMethod(true,"getWidth")),(Object)(_r.runMethod(true,"getHeight")));
 BA.debugLineNum = 4929;BA.debugLine="bmc1.Initialize(r.Width, r.Height)";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, _r.runMethod(true,"getWidth"))),(Object)(BA.numberCast(int.class, _r.runMethod(true,"getHeight"))));
 BA.debugLineNum = 4930;BA.debugLine="If py(0) > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_py.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4931;BA.debugLine="GradientOrientation = \"TOP_BOTTOM\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("TOP_BOTTOM");Debug.locals.put("GradientOrientation", _gradientorientation);
 }else {
 BA.debugLineNum = 4933;BA.debugLine="GradientOrientation = \"BOTTOM_TOP\"";
Debug.JustUpdateDeviceLine();
_gradientorientation = BA.ObjectToString("BOTTOM_TOP");Debug.locals.put("GradientOrientation", _gradientorientation);
 };
 BA.debugLineNum = 4935;BA.debugLine="bmc1.FillGradient(Array As Int(Color, AColor)";
Debug.JustUpdateDeviceLine();
_bmc1.runVoidMethod ("_fillgradient",(Object)(RemoteObject.createNewArray("int",new int[] {2},new Object[] {_color,_acolor})),(Object)(_rb),(Object)(_gradientorientation));
 BA.debugLineNum = 4936;BA.debugLine="xcvsGraph.DrawBitmap(bmc1.Bitmap, r)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawBitmap",(Object)((_bmc1.runMethod(false,"_getbitmap").getObject())),(Object)(_r));
 };
 BA.debugLineNum = 4938;BA.debugLine="If i > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_i,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4939;BA.debugLine="xcvsGraph.DrawLine(x0 - Graph.XInterval, yt,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "-",1, 0))),(Object)(BA.numberCast(float.class, _yt)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yt)),(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4942;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4944;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4945;BA.debugLine="If mYAxis0 = Graph.Top Or mYAxis0 = Graph.Bott";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("=",_myaxis0,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 4946;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4947;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 }else {
 BA.debugLineNum = 4950;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4951;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4953;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 BA.debugLineNum = 4958;BA.debugLine="If Graph.IncludeValues = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4959;BA.debugLine="DrawWaterfallValues";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawwaterfallvalues" /*RemoteObject*/ );
 };
 break; }
}
;
 BA.debugLineNum = 4963;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Items.Size";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4964;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4967;BA.debugLine="If HLines.Size > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4968;BA.debugLine="DrawHorizontalLinesValue";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawhorizontallinesvalue" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4971;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 4972;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarvaluesmultih(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarValuesMultiH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6387);
if (RapidSub.canDelegate("drawbarvaluesmultih")) { return __ref.runUserSub(false, "xchart","drawbarvaluesmultih", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _xt = RemoteObject.createImmutable(0);
RemoteObject _dx = RemoteObject.createImmutable(0);
RemoteObject _yt = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _col = RemoteObject.createImmutable(0);
RemoteObject _mxaxis0 = RemoteObject.createImmutable(0);
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _recttextbackground = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _textwidth = RemoteObject.createImmutable(0);
RemoteObject _valtext = RemoteObject.createImmutable("");
RemoteObject _localtextsize = RemoteObject.createImmutable(0f);
RemoteObject _localtextheight = RemoteObject.createImmutable(0);
RemoteObject _localfont = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _textalignment = RemoteObject.createImmutable("");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _py = null;
int _j = 0;
 BA.debugLineNum = 6387;BA.debugLine="Private Sub DrawBarValuesMultiH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6388;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 6390;BA.debugLine="Private i, x, xt, dx, yt, y0 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_xt = RemoteObject.createImmutable(0);Debug.locals.put("xt", _xt);
_dx = RemoteObject.createImmutable(0);Debug.locals.put("dx", _dx);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
 BA.debugLineNum = 6391;BA.debugLine="Private h As Double";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
 BA.debugLineNum = 6392;BA.debugLine="Private Col As Int";
Debug.JustUpdateDeviceLine();
_col = RemoteObject.createImmutable(0);Debug.locals.put("Col", _col);
 BA.debugLineNum = 6393;BA.debugLine="Private mXAxis0 As Int";
Debug.JustUpdateDeviceLine();
_mxaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 6394;BA.debugLine="mXAxis0 = Graph.Left - Scale(sY(0)).MinVal * Scal";
Debug.JustUpdateDeviceLine();
_mxaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 6395;BA.debugLine="Private rectText, rectTextBackground As B4XRect";
Debug.JustUpdateDeviceLine();
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
_recttextbackground = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectTextBackground", _recttextbackground);
 BA.debugLineNum = 6396;BA.debugLine="Private TextWidth As Int";
Debug.JustUpdateDeviceLine();
_textwidth = RemoteObject.createImmutable(0);Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 6397;BA.debugLine="Private valText As String";
Debug.JustUpdateDeviceLine();
_valtext = RemoteObject.createImmutable("");Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 6398;BA.debugLine="Private LocalTextSize As Float";
Debug.JustUpdateDeviceLine();
_localtextsize = RemoteObject.createImmutable(0f);Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6399;BA.debugLine="Private LocalTextHeight As Int";
Debug.JustUpdateDeviceLine();
_localtextheight = RemoteObject.createImmutable(0);Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6400;BA.debugLine="Private LocalFont As B4XFont";
Debug.JustUpdateDeviceLine();
_localfont = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6401;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 6403;BA.debugLine="ID = Items.Get(0)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 6405;BA.debugLine="LocalFont = Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ );Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6406;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_localtextheight = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ );Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6407;BA.debugLine="LocalTextSize = Texts.ScaleTextSize";
Debug.JustUpdateDeviceLine();
_localtextsize = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ );Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6409;BA.debugLine="Private TextAlignment As String";
Debug.JustUpdateDeviceLine();
_textalignment = RemoteObject.createImmutable("");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6412;BA.debugLine="If Texts.ScaleTextHeight * 1.5 + 4dip > Graph.Bar";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "*+",1, 0),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 6413;BA.debugLine="rectText = xcvsGraph.MeasureText(\"10\", Texts.Sca";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("10")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6414;BA.debugLine="LocalTextSize = Min(Texts.ScaleTextSize, Texts.S";
Debug.JustUpdateDeviceLine();
_localtextsize = BA.numberCast(float.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.2)}, "*//",0, 0))));Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6415;BA.debugLine="LocalFont = xui.CreateFont2(Texts.ScaleFont, Loc";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_localtextsize));Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6416;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight * LocalT";
Debug.JustUpdateDeviceLine();
_localtextheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_localtextsize,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ )}, "*/",0, 0));Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6417;BA.debugLine="If LocalTextSize < 6 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_localtextsize,BA.numberCast(double.class, 6))) { 
 BA.debugLineNum = 6418;BA.debugLine="Log(\"Bar value text size too small\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99895967",RemoteObject.createImmutable("Bar value text size too small"),0);
 BA.debugLineNum = 6419;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 };
 BA.debugLineNum = 6423;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step29 = 1;
final int limit29 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step29 > 0 && _i.<Integer>get().intValue() <= limit29) || (step29 < 0 && _i.<Integer>get().intValue() >= limit29) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step29))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6424;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6425;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 6427;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 6428;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6429;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 6430;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 6431;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 6432;BA.debugLine="y0 = Graph.Bottom - Graph.XOffset - (ip + 0.5)";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "--*+/-/",4, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 6434;BA.debugLine="y0 = Graph.Top + Graph.XOffset + (ip + 0.5) * G";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "++*-/+/",4, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 6436;BA.debugLine="For j = 0 To py.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step41 = 1;
final int limit41 = RemoteObject.solve(new RemoteObject[] {_py.getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = 0 ;
for (;(step41 > 0 && _j <= limit41) || (step41 < 0 && _j >= limit41) ;_j = ((int)(0 + _j + step41))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 6437;BA.debugLine="If py(0) >= Scale(sY(0)).MinVal And py(0) <= Sc";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )) && RemoteObject.solveBoolean("k",_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 6438;BA.debugLine="ID = Items.Get(j)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _j))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 6439;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 6440;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, _j)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0);Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6442;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6443;BA.debugLine="h = (py(j) - Scale(sY(0)).MinVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, _j)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0);Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6445;BA.debugLine="h = (py(j) - Scale(sY(0)).MaxVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, _j)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0);Debug.locals.put("h", _h);
 };
 };
 BA.debugLineNum = 6448;BA.debugLine="valText = NumberFormat3(py(j), Values.MaxDigit";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, _j))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 6449;BA.debugLine="rectText = xcvsGraph.MeasureText(valText, Loca";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_valtext),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6450;BA.debugLine="TextWidth = rectText.Width + 0.5 * LocalTextHe";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),RemoteObject.createImmutable(0.5),_localtextheight}, "+*",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 6451;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 6452;BA.debugLine="yt = y0 - rectText.CenterY - j * Graph.BarSub";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y0,_recttext.runMethod(true,"getCenterY"),RemoteObject.createImmutable(_j),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("yt", _yt);
 }else {
 BA.debugLineNum = 6454;BA.debugLine="yt = y0 - rectText.CenterY + j * Graph.BarSub";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y0,_recttext.runMethod(true,"getCenterY"),RemoteObject.createImmutable(_j),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "-+*",2, 0));Debug.locals.put("yt", _yt);
 };
 BA.debugLineNum = 6456;BA.debugLine="rectTextBackground.Initialize(x, yt + 1.1 * re";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_yt,RemoteObject.createImmutable(1.1),_recttext.runMethod(true,"getTop")}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_yt,RemoteObject.createImmutable(0.1),_recttext.runMethod(true,"getTop")}, "-*",1, 0))));
 BA.debugLineNum = 6457;BA.debugLine="rectTextBackground.Width = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setWidth",_textwidth);
 BA.debugLineNum = 6458;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(_h)),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 6459;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 6460;BA.debugLine="xt = mXAxis0 + h / 2";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h,RemoteObject.createImmutable(2)}, "+/",1, 0));Debug.locals.put("xt", _xt);
 }else {
 BA.debugLineNum = 6462;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6463;BA.debugLine="xt = Graph.Left + h / 2";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "+/",1, 0));Debug.locals.put("xt", _xt);
 }else 
{ BA.debugLineNum = 6464;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6465;BA.debugLine="xt = Graph.Right + h / 2";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "+/",1, 0));Debug.locals.put("xt", _xt);
 }}
;
 };
 BA.debugLineNum = 6468;BA.debugLine="TextAlignment = \"CENTER\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("CENTER");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6469;BA.debugLine="Col = GetContrastColor(ID.Color)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(_id.getField(true,"Color" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 6471;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 6472;BA.debugLine="x = mXAxis0 + h";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 0));Debug.locals.put("x", _x);
 }else {
 BA.debugLineNum = 6474;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6475;BA.debugLine="x = Graph.Left + h";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_h}, "+",1, 0));Debug.locals.put("x", _x);
 }else 
{ BA.debugLineNum = 6476;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6477;BA.debugLine="x = Graph.Right + h";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_h}, "+",1, 0));Debug.locals.put("x", _x);
 }}
;
 };
 BA.debugLineNum = 6480;BA.debugLine="dx = 0.25 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_dx = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.25),_localtextheight}, "*",0, 0));Debug.locals.put("dx", _dx);
 BA.debugLineNum = 6481;BA.debugLine="If h = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6482;BA.debugLine="If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6483;BA.debugLine="xt = x - dx - 2dip";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6484;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6485;BA.debugLine="rectTextBackground.Left = x - TextWidth - 2";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 BA.debugLineNum = 6486;BA.debugLine="rectTextBackground.Right = rectTextBackgrou";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 }else {
 BA.debugLineNum = 6488;BA.debugLine="xt = x + dx + 2dip";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6489;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6490;BA.debugLine="rectTextBackground.Left = x + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 BA.debugLineNum = 6491;BA.debugLine="rectTextBackground.Right = rectTextBackgrou";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 };
 }else 
{ BA.debugLineNum = 6493;BA.debugLine="Else If h > 0  Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6494;BA.debugLine="If Abs(h) + TextWidth < Graph.Right - mXAxis";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(_h)),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_mxaxis0}, "-",1, 1)))) { 
 BA.debugLineNum = 6495;BA.debugLine="xt = x + dx";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6496;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6497;BA.debugLine="rectTextBackground.Left = xt - dx";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xt,_dx}, "-",1, 1)));
 }else {
 BA.debugLineNum = 6499;BA.debugLine="xt = mXAxis0 + dx";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_mxaxis0,_dx}, "+",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6500;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6501;BA.debugLine="rectTextBackground.Left = xt - TextWidth -";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xt,_textwidth,_dx}, "--",2, 1)));
 };
 }else {
 BA.debugLineNum = 6504;BA.debugLine="If Abs(h) + TextWidth < mXAxis0 - Graph.Left";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(_h)),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1)))) { 
 BA.debugLineNum = 6505;BA.debugLine="xt = x - dx";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6506;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6507;BA.debugLine="rectTextBackground.Left = xt - TextWidth +";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xt,_textwidth,_dx}, "-+",2, 1)));
 }else {
 BA.debugLineNum = 6509;BA.debugLine="xt = mXAxis0 + dx";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_mxaxis0,_dx}, "+",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6510;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6511;BA.debugLine="rectTextBackground.Left = xt - dx";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xt,_dx}, "-",1, 1)));
 };
 }}
;
 BA.debugLineNum = 6514;BA.debugLine="rectTextBackground.Right = rectTextBackground";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 BA.debugLineNum = 6515;BA.debugLine="rectTextBackground.Width = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setWidth",_textwidth);
 BA.debugLineNum = 6517;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6518;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 6520;BA.debugLine="xcvsGraph.DrawText(valText, xt, yt, LocalFont,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _xt)),(Object)(BA.numberCast(float.class, _yt)),(Object)(_localfont),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),_textalignment)));
 };
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 6524;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarvaluesmultiv(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarValuesMultiV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5564);
if (RapidSub.canDelegate("drawbarvaluesmultiv")) { return __ref.runUserSub(false, "xchart","drawbarvaluesmultiv", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _j = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _xt = RemoteObject.createImmutable(0);
RemoteObject _dy = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _yt = RemoteObject.createImmutable(0);
RemoteObject _col = RemoteObject.createImmutable(0);
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _recttextbackground = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _textwidth = RemoteObject.createImmutable(0);
RemoteObject _localbarvalueorientation = RemoteObject.createImmutable("");
RemoteObject _valtext = RemoteObject.createImmutable("");
RemoteObject _localtextsize = RemoteObject.createImmutable(0f);
RemoteObject _localtextheight = RemoteObject.createImmutable(0);
RemoteObject _localfont = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _forexit = RemoteObject.createImmutable(false);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _py = null;
RemoteObject _textalignment = RemoteObject.createImmutable("");
 BA.debugLineNum = 5564;BA.debugLine="Private Sub DrawBarValuesMultiV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5565;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5567;BA.debugLine="Private i, ip, j, h, x, x0, xt, dy, y, yt As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_j = RemoteObject.createImmutable(0);Debug.locals.put("j", _j);
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_xt = RemoteObject.createImmutable(0);Debug.locals.put("xt", _xt);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5568;BA.debugLine="Private Col As Int";
Debug.JustUpdateDeviceLine();
_col = RemoteObject.createImmutable(0);Debug.locals.put("Col", _col);
 BA.debugLineNum = 5569;BA.debugLine="Private mYAxis0 = Graph.Bottom + Scale(sY(0)).Min";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 5570;BA.debugLine="Private rectText, rectTextBackground As B4XRect";
Debug.JustUpdateDeviceLine();
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
_recttextbackground = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectTextBackground", _recttextbackground);
 BA.debugLineNum = 5571;BA.debugLine="Private TextWidth As Int";
Debug.JustUpdateDeviceLine();
_textwidth = RemoteObject.createImmutable(0);Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 5572;BA.debugLine="Private LocalBarValueOrientation As String";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = RemoteObject.createImmutable("");Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 5573;BA.debugLine="Private valText As String";
Debug.JustUpdateDeviceLine();
_valtext = RemoteObject.createImmutable("");Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 5574;BA.debugLine="Private LocalTextSize As Float";
Debug.JustUpdateDeviceLine();
_localtextsize = RemoteObject.createImmutable(0f);Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 5575;BA.debugLine="Private LocalTextHeight As Int";
Debug.JustUpdateDeviceLine();
_localtextheight = RemoteObject.createImmutable(0);Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 5576;BA.debugLine="Private LocalFont As B4XFont";
Debug.JustUpdateDeviceLine();
_localfont = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 5577;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 5578;BA.debugLine="Private ForExit = False As Boolean";
Debug.JustUpdateDeviceLine();
_forexit = xchart.__c.getField(true,"False");Debug.locals.put("ForExit", _forexit);Debug.locals.put("ForExit", _forexit);
 BA.debugLineNum = 5579;BA.debugLine="ID = Items.Get(0)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 5581;BA.debugLine="LocalBarValueOrientation = Graph.BarValueOrientat";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarValueOrientation" /*RemoteObject*/ );Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 5582;BA.debugLine="LocalFont = Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ );Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 5583;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_localtextheight = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ );Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 5584;BA.debugLine="LocalTextSize = Texts.ScaleTextSize";
Debug.JustUpdateDeviceLine();
_localtextsize = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ );Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 5586;BA.debugLine="If Graph.BarValueOrientation = \"HORIZONTAL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarValueOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"))) { 
 BA.debugLineNum = 5588;BA.debugLine="For i = 0 To Points.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step20 = 1;
final int limit20 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step20 > 0 && _i.<Integer>get().intValue() <= limit20) || (step20 < 0 && _i.<Integer>get().intValue() >= limit20) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step20))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5589;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5590;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5591;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5592;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5593;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step25 = 1;
final int limit25 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step25 > 0 && _j.<Integer>get().intValue() <= limit25) || (step25 < 0 && _j.<Integer>get().intValue() >= limit25) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step25))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 5594;BA.debugLine="rectText = xcvsGraph.MeasureText(NumberFormat3";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,_j)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 5595;BA.debugLine="TextWidth = rectText.Width + 1.5 * Texts.Scale";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 5596;BA.debugLine="If TextWidth + 0.1 * Texts.ScaleTextHeight > G";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {_textwidth,RemoteObject.createImmutable(0.1),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5597;BA.debugLine="LocalBarValueOrientation = \"VERTICAL\"";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = BA.ObjectToString("VERTICAL");Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 5598;BA.debugLine="Log(\"xChart BarValueOrientation set to VERTIC";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99633826",RemoteObject.createImmutable("xChart BarValueOrientation set to VERTICAL"),0);
 BA.debugLineNum = 5599;BA.debugLine="ForExit = True";
Debug.JustUpdateDeviceLine();
_forexit = xchart.__c.getField(true,"True");Debug.locals.put("ForExit", _forexit);
 BA.debugLineNum = 5600;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("j", _j);
;
 BA.debugLineNum = 5603;BA.debugLine="If ForExit = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_forexit,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5604;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 5609;BA.debugLine="If LocalBarValueOrientation = \"VERTICAL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_localbarvalueorientation,BA.ObjectToString("VERTICAL"))) { 
 BA.debugLineNum = 5610;BA.debugLine="Private TextAlignment As String";
Debug.JustUpdateDeviceLine();
_textalignment = RemoteObject.createImmutable("");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5613;BA.debugLine="If Texts.ScaleTextHeight * 1.5 + 4dip > Graph.Ba";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "*+",1, 0),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5614;BA.debugLine="rectText = xcvsGraph.MeasureText(\"10\", Texts.Sc";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("10")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 5615;BA.debugLine="LocalTextSize = Min(Texts.ScaleTextSize, Texts.";
Debug.JustUpdateDeviceLine();
_localtextsize = BA.numberCast(float.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.2)}, "*//",0, 0))));Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 5616;BA.debugLine="LocalFont = xui.CreateFont2(Texts.ScaleFont, Lo";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_localtextsize));Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 5617;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight * Local";
Debug.JustUpdateDeviceLine();
_localtextheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_localtextsize,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ )}, "*/",0, 0));Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 5618;BA.debugLine="If LocalTextSize < 6 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_localtextsize,BA.numberCast(double.class, 6))) { 
 BA.debugLineNum = 5619;BA.debugLine="Log(\"Bar value text size too small\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99633847",RemoteObject.createImmutable("Bar value text size too small"),0);
 BA.debugLineNum = 5620;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 };
 BA.debugLineNum = 5624;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step52 = 1;
final int limit52 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step52 > 0 && _i.<Integer>get().intValue() <= limit52) || (step52 < 0 && _i.<Integer>get().intValue() >= limit52) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step52))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5625;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5627;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5628;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5629;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5630;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5632;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2),RemoteObject.createImmutable(0.43),_localtextheight}, "++*-/+/+*",5, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5633;BA.debugLine="For j = 0 To py.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step59 = 1;
final int limit59 = RemoteObject.solve(new RemoteObject[] {_py.getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step59 > 0 && _j.<Integer>get().intValue() <= limit59) || (step59 < 0 && _j.<Integer>get().intValue() >= limit59) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step59))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 5634;BA.debugLine="If py(0) >= Scale(sY(0)).MinVal And py(0) <= S";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )) && RemoteObject.solveBoolean("k",_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 5635;BA.debugLine="ID = Items.Get(j)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_j)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 5636;BA.debugLine="xt = x0 + j * Graph.BarSubWidth";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x0,_j,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+*",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 5637;BA.debugLine="x = xt - 0.9 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xt,RemoteObject.createImmutable(0.9),_localtextheight}, "-*",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 5638;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5639;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5641;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5642;BA.debugLine="h = (py(j) - Scale(sY(0)).MinVal) * Scale(s";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5644;BA.debugLine="h = (py(j) - Scale(sY(0)).MaxVal) * Scale(s";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 };
 BA.debugLineNum = 5647;BA.debugLine="valText = NumberFormat3(py(j), Values.MaxDigi";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,_j)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 5648;BA.debugLine="rectText = xcvsGraph.MeasureText(valText, Loc";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_valtext),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 5649;BA.debugLine="TextWidth = rectText.Width + 0.5 * LocalTextH";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),RemoteObject.createImmutable(0.5),_localtextheight}, "+*",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 5650;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 5651;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(s";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5652;BA.debugLine="yt = mYAxis0 - h / 2";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("yt", _yt);
 }else {
 BA.debugLineNum = 5654;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5655;BA.debugLine="yt = Graph.Bottom - h / 2";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("yt", _yt);
 }else 
{ BA.debugLineNum = 5656;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5657;BA.debugLine="yt = Graph.Top - h / 2";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("yt", _yt);
 }}
;
 };
 BA.debugLineNum = 5660;BA.debugLine="TextAlignment = \"CENTER\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("CENTER");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5661;BA.debugLine="Col = GetContrastColor(ID.Color)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(_id.getField(true,"Color" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 5663;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(s";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5664;BA.debugLine="y = mYAxis0 - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5666;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5667;BA.debugLine="y = Graph.Bottom - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else 
{ BA.debugLineNum = 5668;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5669;BA.debugLine="y = Graph.Top - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }}
;
 };
 BA.debugLineNum = 5672;BA.debugLine="dy = 0.25 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_dy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.25),_localtextheight}, "*",0, 0));Debug.locals.put("dy", _dy);
 BA.debugLineNum = 5673;BA.debugLine="rectTextBackground.Initialize(x, y, x + Loca";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "+",1, 1))));
 BA.debugLineNum = 5674;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 BA.debugLineNum = 5675;BA.debugLine="If h = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5676;BA.debugLine="If Scale(sY(0)).MinVal < 0 And Scale(sY(0))";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5677;BA.debugLine="yt = y + dy + 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5678;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5679;BA.debugLine="rectTextBackground.Top = y + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 }else {
 BA.debugLineNum = 5681;BA.debugLine="yt = y - dy - 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5682;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5683;BA.debugLine="rectTextBackground.Top = y - TextWidth - 2";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 };
 }else 
{ BA.debugLineNum = 5685;BA.debugLine="Else If h > 0  Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5686;BA.debugLine="If Abs(h) + TextWidth > mYAxis0 - Graph.Top";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 1)))) { 
 BA.debugLineNum = 5687;BA.debugLine="yt = mYAxis0 + dy + 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_myaxis0,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5688;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5689;BA.debugLine="rectTextBackground.Top = mYAxis0 + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 }else {
 BA.debugLineNum = 5691;BA.debugLine="yt = y - dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "-",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5692;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5693;BA.debugLine="rectTextBackground.Top = y - TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "-",1, 1)));
 };
 }else {
 BA.debugLineNum = 5696;BA.debugLine="If Abs(h) + TextWidth > Graph.Bottom - mYAx";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_myaxis0}, "-",1, 1)))) { 
 BA.debugLineNum = 5697;BA.debugLine="yt = mYAxis0 - dy- 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_myaxis0,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5698;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5699;BA.debugLine="rectTextBackground.Top = mYAxis0 - TextWid";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 }else {
 BA.debugLineNum = 5701;BA.debugLine="yt = y + dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5702;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5703;BA.debugLine="rectTextBackground.Top = y";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, _y));
 };
 }}
;
 BA.debugLineNum = 5706;BA.debugLine="rectTextBackground.Bottom = rectTextBackgrou";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setBottom",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getTop"),_textwidth}, "+",1, 0)));
 BA.debugLineNum = 5707;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 BA.debugLineNum = 5709;BA.debugLine="Col = GetContrastColor(Graph.ChartBackground";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 5710;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 5712;BA.debugLine="xcvsGraph.DrawTextRotated(valText, xt, yt, Lo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _xt)),(Object)(BA.numberCast(float.class, _yt)),(Object)(_localfont),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),_textalignment)),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 };
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 5717;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step142 = 1;
final int limit142 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step142 > 0 && _i.<Integer>get().intValue() <= limit142) || (step142 < 0 && _i.<Integer>get().intValue() >= limit142) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step142))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5718;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5720;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5721;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5722;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5723;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5724;BA.debugLine="x0 = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "++*-/+/",4, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 5725;BA.debugLine="For j = 0 To py.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step149 = 1;
final int limit149 = RemoteObject.solve(new RemoteObject[] {_py.getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step149 > 0 && _j.<Integer>get().intValue() <= limit149) || (step149 < 0 && _j.<Integer>get().intValue() >= limit149) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step149))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 5726;BA.debugLine="ID = Items.Get(j)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_j)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 5727;BA.debugLine="xt = x0 + j * Graph.BarSubWidth";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x0,_j,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ )}, "+*",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 5728;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5729;BA.debugLine="h = py(j) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5731;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5732;BA.debugLine="h = (py(j) - Scale(sY(0)).MinVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5734;BA.debugLine="h = (py(j) - Scale(sY(0)).MaxVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,_j),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 };
 BA.debugLineNum = 5737;BA.debugLine="valText = NumberFormat3(py(j), Values.MaxDigit";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,_j)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 5738;BA.debugLine="rectText = xcvsGraph.MeasureText(valText, Loca";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_valtext),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 5739;BA.debugLine="TextWidth = rectText.Width + 0.5 * LocalTextHe";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),RemoteObject.createImmutable(0.5),_localtextheight}, "+*",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 5740;BA.debugLine="If Abs(h) > 2.25 * Texts.ScaleTextHeight Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2.25),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 5741;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5742;BA.debugLine="y = mYAxis0 - h / 2";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5744;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5745;BA.debugLine="y = Graph.Bottom - h / 2";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("y", _y);
 }else 
{ BA.debugLineNum = 5746;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5747;BA.debugLine="y = Graph.Top - h / 2";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("y", _y);
 }}
;
 };
 BA.debugLineNum = 5750;BA.debugLine="If h >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5751;BA.debugLine="y = y + 0.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5753;BA.debugLine="y = y + 0.38 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.38),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 5755;BA.debugLine="Col = GetContrastColor(ID.Color)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(_id.getField(true,"Color" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 5757;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5758;BA.debugLine="y = mYAxis0 - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5760;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5761;BA.debugLine="y = Graph.Bottom - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else 
{ BA.debugLineNum = 5762;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5763;BA.debugLine="y = Graph.Top - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }}
;
 };
 BA.debugLineNum = 5766;BA.debugLine="If h = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5767;BA.debugLine="If Scale(sY(0)).MinVal < 0 And Scale(sY(0)).";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5768;BA.debugLine="y = y + 1.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5770;BA.debugLine="y = y - 1.5 * Texts.ScaleTextHeight / 3";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(3)}, "-*/",1, 0));Debug.locals.put("y", _y);
 };
 }else 
{ BA.debugLineNum = 5772;BA.debugLine="Else If h > 0  Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5773;BA.debugLine="y = y - 1.5 * Texts.ScaleTextHeight / 3";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(3)}, "-*/",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5775;BA.debugLine="y = y + 1.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 }}
;
 BA.debugLineNum = 5777;BA.debugLine="rectTextBackground.Initialize(xt - TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xt,_textwidth,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.1),_recttext.runMethod(true,"getTop")}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xt,_textwidth,RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.1),_recttext.runMethod(true,"getTop")}, "-*",1, 0))));
 BA.debugLineNum = 5778;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 5779;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 5781;BA.debugLine="xcvsGraph.DrawText(valText, xt, y, Texts.Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _xt)),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 5785;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarvaluessingleh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarValuesSingleH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6251);
if (RapidSub.canDelegate("drawbarvaluessingleh")) { return __ref.runUserSub(false, "xchart","drawbarvaluessingleh", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _xt = RemoteObject.createImmutable(0);
RemoteObject _dx = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _yt = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _col = RemoteObject.createImmutable(0);
RemoteObject _mxaxis0 = RemoteObject.createImmutable(0);
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _recttextbackground = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _textwidth = RemoteObject.createImmutable(0);
RemoteObject _valtext = RemoteObject.createImmutable("");
RemoteObject _localtextsize = RemoteObject.createImmutable(0f);
RemoteObject _localtextheight = RemoteObject.createImmutable(0);
RemoteObject _localfont = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _textalignment = RemoteObject.createImmutable("");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _py = null;
 BA.debugLineNum = 6251;BA.debugLine="Private Sub DrawBarValuesSingleH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6252;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 6254;BA.debugLine="Private i, x, xt, dx, y, yt As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_xt = RemoteObject.createImmutable(0);Debug.locals.put("xt", _xt);
_dx = RemoteObject.createImmutable(0);Debug.locals.put("dx", _dx);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6255;BA.debugLine="Private h As Double";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
 BA.debugLineNum = 6256;BA.debugLine="Private Col As Int";
Debug.JustUpdateDeviceLine();
_col = RemoteObject.createImmutable(0);Debug.locals.put("Col", _col);
 BA.debugLineNum = 6257;BA.debugLine="Private mXAxis0 As Int";
Debug.JustUpdateDeviceLine();
_mxaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 6258;BA.debugLine="Private rectText, rectTextBackground As B4XRect";
Debug.JustUpdateDeviceLine();
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
_recttextbackground = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectTextBackground", _recttextbackground);
 BA.debugLineNum = 6259;BA.debugLine="Private TextWidth As Int";
Debug.JustUpdateDeviceLine();
_textwidth = RemoteObject.createImmutable(0);Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 6260;BA.debugLine="Private valText As String";
Debug.JustUpdateDeviceLine();
_valtext = RemoteObject.createImmutable("");Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 6261;BA.debugLine="Private LocalTextSize As Float";
Debug.JustUpdateDeviceLine();
_localtextsize = RemoteObject.createImmutable(0f);Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6262;BA.debugLine="Private LocalTextHeight As Int";
Debug.JustUpdateDeviceLine();
_localtextheight = RemoteObject.createImmutable(0);Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6263;BA.debugLine="Private LocalFont As B4XFont";
Debug.JustUpdateDeviceLine();
_localfont = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6264;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 6266;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6267;BA.debugLine="mXAxis0 = Graph.Left";
Debug.JustUpdateDeviceLine();
_mxaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ );Debug.locals.put("mXAxis0", _mxaxis0);
 }else 
{ BA.debugLineNum = 6268;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6269;BA.debugLine="mXAxis0 = Graph.Right";
Debug.JustUpdateDeviceLine();
_mxaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ );Debug.locals.put("mXAxis0", _mxaxis0);
 }else {
 BA.debugLineNum = 6271;BA.debugLine="mXAxis0 = Graph.Left - Scale(sY(0)).MinVal * Sca";
Debug.JustUpdateDeviceLine();
_mxaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mXAxis0", _mxaxis0);
 }}
;
 BA.debugLineNum = 6274;BA.debugLine="ID = Items.Get(0)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 6276;BA.debugLine="LocalFont = Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ );Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6277;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_localtextheight = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ );Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6278;BA.debugLine="LocalTextSize = Texts.ScaleTextSize";
Debug.JustUpdateDeviceLine();
_localtextsize = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ );Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6280;BA.debugLine="Private TextAlignment As String";
Debug.JustUpdateDeviceLine();
_textalignment = RemoteObject.createImmutable("");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6283;BA.debugLine="If Texts.ScaleTextHeight * 1.5 + 4dip > Graph.Bar";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "*+",1, 0),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 6284;BA.debugLine="rectText = xcvsGraph.MeasureText(\"10\", Texts.Sca";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("10")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6285;BA.debugLine="LocalTextSize = Min(Texts.ScaleTextSize, Texts.S";
Debug.JustUpdateDeviceLine();
_localtextsize = BA.numberCast(float.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.2)}, "*//",0, 0))));Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6286;BA.debugLine="LocalFont = xui.CreateFont2(Texts.ScaleFont, Loc";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_localtextsize));Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6287;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight * LocalT";
Debug.JustUpdateDeviceLine();
_localtextheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_localtextsize,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ )}, "*/",0, 0));Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6288;BA.debugLine="If LocalTextSize < 6 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_localtextsize,BA.numberCast(double.class, 6))) { 
 BA.debugLineNum = 6289;BA.debugLine="Log(\"Bar value text size too small\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99830438",RemoteObject.createImmutable("Bar value text size too small"),0);
 BA.debugLineNum = 6290;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 };
 BA.debugLineNum = 6294;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step35 = 1;
final int limit35 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step35 > 0 && _i.<Integer>get().intValue() <= limit35) || (step35 < 0 && _i.<Integer>get().intValue() >= limit35) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step35))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6295;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6296;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 6298;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 6299;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6300;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 6301;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 6302;BA.debugLine="valText = NumberFormat3(py(0), Values.MaxDigits)";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 6304;BA.debugLine="If py(0) >= Scale(sY(0)).MinVal And py(0) <= Sca";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )) && RemoteObject.solveBoolean("k",_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 6305;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 6306;BA.debugLine="yt = Graph.Bottom - Graph.XOffset - (ip + 0.5)";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("yt", _yt);
 }else {
 BA.debugLineNum = 6308;BA.debugLine="yt = Graph.Top + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("yt", _yt);
 };
 BA.debugLineNum = 6310;BA.debugLine="y = yt - 0.7 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yt,RemoteObject.createImmutable(0.7),_localtextheight}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6311;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(0";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 6312;BA.debugLine="h = py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0);Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6314;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6315;BA.debugLine="h = (py(0) - Scale(sY(0)).MinVal) * Scale(sY(";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0);Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6317;BA.debugLine="h = (py(0) - Scale(sY(0)).MaxVal) * Scale(sY(";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0);Debug.locals.put("h", _h);
 };
 };
 BA.debugLineNum = 6320;BA.debugLine="rectText = xcvsGraph.MeasureText(py(0), LocalFo";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.NumberToString(_py.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6321;BA.debugLine="yt = yt - rectText.CenterY";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yt,_recttext.runMethod(true,"getCenterY")}, "-",1, 0));Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6322;BA.debugLine="TextWidth = rectText.Width + LocalTextHeight";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),_localtextheight}, "+",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 6323;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(_h)),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 6324;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 6325;BA.debugLine="xt = mXAxis0 + h / 2";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h,RemoteObject.createImmutable(2)}, "+/",1, 0));Debug.locals.put("xt", _xt);
 }else {
 BA.debugLineNum = 6327;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6328;BA.debugLine="xt = Graph.Left + h / 2";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "+/",1, 0));Debug.locals.put("xt", _xt);
 }else 
{ BA.debugLineNum = 6329;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6330;BA.debugLine="xt = Graph.Right + h / 2";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "+/",1, 0));Debug.locals.put("xt", _xt);
 }}
;
 };
 BA.debugLineNum = 6333;BA.debugLine="TextAlignment = \"CENTER\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("CENTER");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6334;BA.debugLine="Col = GetContrastColor(ID.Color)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(_id.getField(true,"Color" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 6336;BA.debugLine="x = mXAxis0 + h";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h}, "+",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 6337;BA.debugLine="dx = 0.5 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_dx = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.5),_localtextheight}, "*",0, 0));Debug.locals.put("dx", _dx);
 BA.debugLineNum = 6338;BA.debugLine="rectTextBackground.Initialize(x, y, x + TextWi";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.4),_localtextheight}, "+*",1, 0))));
 BA.debugLineNum = 6339;BA.debugLine="rectTextBackground.Width = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setWidth",_textwidth);
 BA.debugLineNum = 6340;BA.debugLine="If h = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6341;BA.debugLine="If Scale(sY(0)).MinVal < 0 And Scale(sY(0)).M";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6342;BA.debugLine="xt = x - dx + 2dip";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-+",2, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6343;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6344;BA.debugLine="rectTextBackground.Left = x - TextWidth - 2d";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 BA.debugLineNum = 6345;BA.debugLine="rectTextBackground.Right = rectTextBackgroun";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 }else {
 BA.debugLineNum = 6347;BA.debugLine="xt = x + dx - 2dip";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+-",2, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6348;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6349;BA.debugLine="rectTextBackground.Left = x + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 BA.debugLineNum = 6350;BA.debugLine="rectTextBackground.Right = rectTextBackgroun";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 };
 }else 
{ BA.debugLineNum = 6352;BA.debugLine="Else If h < 0  Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6353;BA.debugLine="If Abs(h) + TextWidth > mXAxis0 - Graph.Left";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(_h)),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1)))) { 
 BA.debugLineNum = 6354;BA.debugLine="xt = mXAxis0 + h + dx + 2dip";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h,_dx,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+++",3, 0));Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6355;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6356;BA.debugLine="rectTextBackground.Left = mXAxis0 + h + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 0)));
 BA.debugLineNum = 6357;BA.debugLine="rectTextBackground.Right = rectTextBackgroun";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 }else {
 BA.debugLineNum = 6359;BA.debugLine="xt = x - dx";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6360;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6361;BA.debugLine="rectTextBackground.Left = x - TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth}, "-",1, 1)));
 BA.debugLineNum = 6362;BA.debugLine="rectTextBackground.Right = rectTextBackgroun";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 };
 }else {
 BA.debugLineNum = 6365;BA.debugLine="If Abs(h) + TextWidth > Graph.Right - mXAxis0";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(_h)),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_mxaxis0}, "-",1, 1)))) { 
 BA.debugLineNum = 6366;BA.debugLine="xt = mXAxis0  + h - dx - 2dip";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h,_dx,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+--",3, 0));Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6367;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6368;BA.debugLine="rectTextBackground.Left = mXAxis0  + h - Tex";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_mxaxis0,_h,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+--",3, 0)));
 BA.debugLineNum = 6369;BA.debugLine="rectTextBackground.Right = rectTextBackgroun";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 }else {
 BA.debugLineNum = 6371;BA.debugLine="xt = x + dx";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1);Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6372;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6373;BA.debugLine="rectTextBackground.Left = x";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setLeft",BA.numberCast(float.class, _x));
 BA.debugLineNum = 6374;BA.debugLine="rectTextBackground.Right = rectTextBackgroun";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setRight",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_recttextbackground.runMethod(true,"getLeft"),_textwidth}, "+",1, 0)));
 };
 }}
;
 BA.debugLineNum = 6378;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroundCo";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6379;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph.C";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 6381;BA.debugLine="xcvsGraph.DrawText(valText, xt, yt, LocalFont,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _xt)),(Object)(BA.numberCast(float.class, _yt)),(Object)(_localfont),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),_textalignment)));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 6384;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbarvaluessinglev(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBarValuesSingleV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5788);
if (RapidSub.canDelegate("drawbarvaluessinglev")) { return __ref.runUserSub(false, "xchart","drawbarvaluessinglev", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _xt = RemoteObject.createImmutable(0);
RemoteObject _dy = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _yt = RemoteObject.createImmutable(0);
RemoteObject _col = RemoteObject.createImmutable(0);
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _recttextbackground = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _textwidth = RemoteObject.createImmutable(0);
RemoteObject _localbarvalueorientation = RemoteObject.createImmutable("");
RemoteObject _valtext = RemoteObject.createImmutable("");
RemoteObject _localtextsize = RemoteObject.createImmutable(0f);
RemoteObject _localtextheight = RemoteObject.createImmutable(0);
RemoteObject _localfont = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _py = null;
RemoteObject _textalignment = RemoteObject.createImmutable("");
 BA.debugLineNum = 5788;BA.debugLine="Private Sub DrawBarValuesSingleV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5789;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 5791;BA.debugLine="Private i, ip, h, x, xt, dy, y, yt As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_xt = RemoteObject.createImmutable(0);Debug.locals.put("xt", _xt);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5792;BA.debugLine="Private Col As Int";
Debug.JustUpdateDeviceLine();
_col = RemoteObject.createImmutable(0);Debug.locals.put("Col", _col);
 BA.debugLineNum = 5793;BA.debugLine="Private mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 5794;BA.debugLine="Private rectText, rectTextBackground As B4XRect";
Debug.JustUpdateDeviceLine();
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
_recttextbackground = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectTextBackground", _recttextbackground);
 BA.debugLineNum = 5795;BA.debugLine="Private TextWidth As Int";
Debug.JustUpdateDeviceLine();
_textwidth = RemoteObject.createImmutable(0);Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 5796;BA.debugLine="Private LocalBarValueOrientation As String";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = RemoteObject.createImmutable("");Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 5797;BA.debugLine="Private valText As String";
Debug.JustUpdateDeviceLine();
_valtext = RemoteObject.createImmutable("");Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 5798;BA.debugLine="Private LocalTextSize As Float";
Debug.JustUpdateDeviceLine();
_localtextsize = RemoteObject.createImmutable(0f);Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 5799;BA.debugLine="Private LocalTextHeight As Int";
Debug.JustUpdateDeviceLine();
_localtextheight = RemoteObject.createImmutable(0);Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 5800;BA.debugLine="Private LocalFont As B4XFont";
Debug.JustUpdateDeviceLine();
_localfont = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 5801;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 5803;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal * Sc";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 5805;BA.debugLine="ID = Items.Get(0)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 5807;BA.debugLine="LocalBarValueOrientation = Graph.BarValueOrientat";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarValueOrientation" /*RemoteObject*/ );Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 5808;BA.debugLine="LocalFont = Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ );Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 5809;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_localtextheight = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ );Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 5810;BA.debugLine="LocalTextSize = Texts.ScaleTextSize";
Debug.JustUpdateDeviceLine();
_localtextsize = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ );Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 5812;BA.debugLine="If Graph.BarValueOrientation = \"HORIZONTAL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarValueOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"))) { 
 BA.debugLineNum = 5813;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step20 = 1;
final int limit20 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step20 > 0 && _i.<Integer>get().intValue() <= limit20) || (step20 < 0 && _i.<Integer>get().intValue() >= limit20) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step20))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5814;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5816;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5817;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5818;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5819;BA.debugLine="rectText = xcvsGraph.MeasureText(NumberFormat3(";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 5820;BA.debugLine="TextWidth = rectText.Width + 1.5 * Texts.ScaleT";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 5821;BA.debugLine="If TextWidth + 0.1 * Texts.ScaleTextHeight > Gr";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {_textwidth,RemoteObject.createImmutable(0.1),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 5822;BA.debugLine="LocalBarValueOrientation = \"VERTICAL\"";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = BA.ObjectToString("VERTICAL");Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 5823;BA.debugLine="Log(\"xChart BarValueOrientation set to VERTICA";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99699363",RemoteObject.createImmutable("xChart BarValueOrientation set to VERTICAL"),0);
 BA.debugLineNum = 5824;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 5829;BA.debugLine="If LocalBarValueOrientation = \"VERTICAL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_localbarvalueorientation,BA.ObjectToString("VERTICAL"))) { 
 BA.debugLineNum = 5830;BA.debugLine="Private TextAlignment As String";
Debug.JustUpdateDeviceLine();
_textalignment = RemoteObject.createImmutable("");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5833;BA.debugLine="If Texts.ScaleTextHeight * 1.5 + 4dip > Graph.Ba";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "*+",1, 0),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 5834;BA.debugLine="rectText = xcvsGraph.MeasureText(\"10\", Texts.Sc";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("10")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 5835;BA.debugLine="LocalTextSize = Min(Texts.ScaleTextSize, Texts.";
Debug.JustUpdateDeviceLine();
_localtextsize = BA.numberCast(float.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.2)}, "*//",0, 0))));Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 5836;BA.debugLine="LocalFont = xui.CreateFont2(Texts.ScaleFont, Lo";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_localtextsize));Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 5837;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight * Local";
Debug.JustUpdateDeviceLine();
_localtextheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_localtextsize,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ )}, "*/",0, 0));Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 5838;BA.debugLine="If LocalTextSize < 6 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_localtextsize,BA.numberCast(double.class, 6))) { 
 BA.debugLineNum = 5839;BA.debugLine="Log(\"Bar value text size too small\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99699379",RemoteObject.createImmutable("Bar value text size too small"),0);
 BA.debugLineNum = 5840;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 };
 BA.debugLineNum = 5844;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step46 = 1;
final int limit46 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step46 > 0 && _i.<Integer>get().intValue() <= limit46) || (step46 < 0 && _i.<Integer>get().intValue() >= limit46) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step46))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5845;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5847;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5848;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5849;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5850;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5851;BA.debugLine="valText = NumberFormat3(py(0), Values.MaxDigits";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 5853;BA.debugLine="If py(0) >= Round2(Scale(sY(0)).MinVal, 14) And";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_py.getArrayElement(true,BA.numberCast(int.class, 0)),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 14)))) && RemoteObject.solveBoolean("k",_py.getArrayElement(true,BA.numberCast(int.class, 0)),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 14))))) { 
 BA.debugLineNum = 5854;BA.debugLine="xt = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),RemoteObject.createImmutable(0.4),_localtextheight}, "++*+*",3, 0));Debug.locals.put("xt", _xt);
 BA.debugLineNum = 5855;BA.debugLine="x = xt - 0.9 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xt,RemoteObject.createImmutable(0.9),_localtextheight}, "-*",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 5856;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5857;BA.debugLine="h = py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5859;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5860;BA.debugLine="h = (py(0) - Scale(sY(0)).MinVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5862;BA.debugLine="h = (py(0) - Scale(sY(0)).MaxVal) * Scale(sY";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 };
 BA.debugLineNum = 5865;BA.debugLine="rectText = xcvsGraph.MeasureText(valText, Loca";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_valtext),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 5866;BA.debugLine="TextWidth = rectText.Width + LocalTextHeight";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),_localtextheight}, "+",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 5867;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 5868;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5869;BA.debugLine="yt = mYAxis0 - h / 2";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("yt", _yt);
 }else {
 BA.debugLineNum = 5871;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5872;BA.debugLine="yt = Graph.Bottom - h / 2";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("yt", _yt);
 }else 
{ BA.debugLineNum = 5873;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5874;BA.debugLine="yt = Graph.Top - h / 2";
Debug.JustUpdateDeviceLine();
_yt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("yt", _yt);
 }}
;
 };
 BA.debugLineNum = 5877;BA.debugLine="TextAlignment = \"CENTER\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("CENTER");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5878;BA.debugLine="Col = GetContrastColor(ID.Color)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(_id.getField(true,"Color" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 5880;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5881;BA.debugLine="y = mYAxis0 - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5883;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5884;BA.debugLine="y = Graph.Bottom - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else 
{ BA.debugLineNum = 5885;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5886;BA.debugLine="y = Graph.Top - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }}
;
 };
 BA.debugLineNum = 5889;BA.debugLine="dy = 0.25 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_dy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.25),_localtextheight}, "*",0, 0));Debug.locals.put("dy", _dy);
 BA.debugLineNum = 5890;BA.debugLine="rectTextBackground.Initialize(x, y, x + Local";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "+",1, 1))));
 BA.debugLineNum = 5891;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 BA.debugLineNum = 5892;BA.debugLine="If h = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5893;BA.debugLine="If Scale(sY(0)).MinVal < 0 And Scale(sY(0)).";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5894;BA.debugLine="yt = y + dy + 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5895;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5896;BA.debugLine="rectTextBackground.Top = y + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 BA.debugLineNum = 5897;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 }else {
 BA.debugLineNum = 5899;BA.debugLine="yt = y - dy - 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5900;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5901;BA.debugLine="rectTextBackground.Top = y - TextWidth - 2d";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 BA.debugLineNum = 5902;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 };
 }else 
{ BA.debugLineNum = 5904;BA.debugLine="Else If h > 0  Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5905;BA.debugLine="If Abs(h) + TextWidth > mYAxis0 - Graph.Top";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 1)))) { 
 BA.debugLineNum = 5906;BA.debugLine="yt = mYAxis0 + dy + 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_myaxis0,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5907;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5908;BA.debugLine="rectTextBackground.Top = mYAxis0 + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 BA.debugLineNum = 5909;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 }else {
 BA.debugLineNum = 5911;BA.debugLine="yt = y - dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "-",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5912;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5913;BA.debugLine="rectTextBackground.Top = y - TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "-",1, 1)));
 BA.debugLineNum = 5914;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 };
 }else {
 BA.debugLineNum = 5917;BA.debugLine="If Abs(h) + TextWidth > Graph.Bottom - mYAxi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),_textwidth}, "+",1, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_myaxis0}, "-",1, 1)))) { 
 BA.debugLineNum = 5918;BA.debugLine="yt = mYAxis0 - dy- 2dip";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_myaxis0,_dy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5919;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5920;BA.debugLine="rectTextBackground.Top = mYAxis0 - TextWidt";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 BA.debugLineNum = 5921;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 }else {
 BA.debugLineNum = 5923;BA.debugLine="yt = y + dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 5924;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 5925;BA.debugLine="rectTextBackground.Top = y";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, _y));
 BA.debugLineNum = 5926;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 };
 }}
;
 BA.debugLineNum = 5930;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 5931;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 5933;BA.debugLine="xcvsGraph.DrawTextRotated(valText, xt, yt, Loc";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _xt)),(Object)(BA.numberCast(float.class, _yt)),(Object)(_localfont),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),_textalignment)),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 };
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 5937;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step136 = 1;
final int limit136 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step136 > 0 && _i.<Integer>get().intValue() <= limit136) || (step136 < 0 && _i.<Integer>get().intValue() >= limit136) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step136))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5938;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5940;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 5941;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 5942;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 5943;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 5944;BA.debugLine="valText = NumberFormat3(py(0), Values.MaxDigits";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 5946;BA.debugLine="x = Graph.Left + Graph.XOffset + (ip + 0.5) * G";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 5947;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(0";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5948;BA.debugLine="h = py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5950;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5951;BA.debugLine="h = (py(0) - Scale(sY(0)).MinVal) * Scale(sY(";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 5953;BA.debugLine="h = (py(0) - Scale(sY(0)).MaxVal) * Scale(sY(";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 };
 BA.debugLineNum = 5956;BA.debugLine="If Abs(h) > 2.25 * Texts.ScaleTextHeight Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2.25),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 5957;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5958;BA.debugLine="y = mYAxis0 - h / 2";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5960;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5961;BA.debugLine="y = Graph.Bottom - h / 2";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("y", _y);
 }else 
{ BA.debugLineNum = 5962;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5963;BA.debugLine="y = Graph.Top - h / 2";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h,RemoteObject.createImmutable(2)}, "-/",1, 0));Debug.locals.put("y", _y);
 }}
;
 };
 BA.debugLineNum = 5966;BA.debugLine="If h >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5967;BA.debugLine="y = y + 0.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5969;BA.debugLine="y = y + 0.38 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.38),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 5971;BA.debugLine="Col = GetContrastColor(ID.Color)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(_id.getField(true,"Color" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 5973;BA.debugLine="If Scale(sY(0)).Automatic = True Or (Scale(sY(";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 5974;BA.debugLine="y = mYAxis0 - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_myaxis0,_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5976;BA.debugLine="If Scale(sY(0)).MinVal >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5977;BA.debugLine="y = Graph.Bottom - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }else 
{ BA.debugLineNum = 5978;BA.debugLine="Else If Scale(sY(0)).MaxVal <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5979;BA.debugLine="y = Graph.Top - h";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_h}, "-",1, 1);Debug.locals.put("y", _y);
 }}
;
 };
 BA.debugLineNum = 5982;BA.debugLine="If h = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5983;BA.debugLine="If Scale(sY(0)).MinVal < 0 And Scale(sY(0)).M";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5984;BA.debugLine="y = y + 1.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5986;BA.debugLine="y = y - 1.5 * Texts.ScaleTextHeight / 3";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(3)}, "-*/",1, 0));Debug.locals.put("y", _y);
 };
 }else 
{ BA.debugLineNum = 5988;BA.debugLine="Else If h > 0  Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_h,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 5989;BA.debugLine="y = y - 1.5 * Texts.ScaleTextHeight / 3";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(3)}, "-*/",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 5991;BA.debugLine="y = y + 1.45 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 }}
;
 BA.debugLineNum = 5994;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroundCo";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 5995;BA.debugLine="rectTextBackground.Initialize(x - TextWidth /";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.1),_recttext.runMethod(true,"getTop")}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.1),_recttext.runMethod(true,"getTop")}, "-*",1, 0))));
 BA.debugLineNum = 5996;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph.C";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 5998;BA.debugLine="xcvsGraph.DrawText(valText, x, y, Texts.ScaleFo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 6001;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbubblecircle(RemoteObject __ref,RemoteObject _x,RemoteObject _y,RemoteObject _val,RemoteObject _bd) throws Exception{
try {
		Debug.PushSubsStack("DrawBubbleCircle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4569);
if (RapidSub.canDelegate("drawbubblecircle")) { return __ref.runUserSub(false, "xchart","drawbubblecircle", __ref, _x, _y, _val, _bd);}
RemoteObject _radius = RemoteObject.createImmutable(0);
RemoteObject _col = RemoteObject.createImmutable(0);
Debug.locals.put("x", _x);
Debug.locals.put("y", _y);
Debug.locals.put("Val", _val);
Debug.locals.put("BD", _bd);
 BA.debugLineNum = 4569;BA.debugLine="Private Sub DrawBubbleCircle(x As Int, y As Int, V";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4570;BA.debugLine="Private Radius, col As Int";
Debug.JustUpdateDeviceLine();
_radius = RemoteObject.createImmutable(0);Debug.locals.put("Radius", _radius);
_col = RemoteObject.createImmutable(0);Debug.locals.put("col", _col);
 BA.debugLineNum = 4572;BA.debugLine="col = BD.Color - Graph.AreaFillAlphaValue";
Debug.JustUpdateDeviceLine();
_col = RemoteObject.solve(new RemoteObject[] {_bd.getField(true,"Color" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"AreaFillAlphaValue" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("col", _col);
 BA.debugLineNum = 4573;BA.debugLine="Radius = Max(mBubbleRadiusMin, mBubbleRadiusMax *";
Debug.JustUpdateDeviceLine();
_radius = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, __ref.getField(true,"_mbubbleradiusmin" /*RemoteObject*/ ))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(true,"_mbubbleradiusmax" /*RemoteObject*/ ),xchart.__c.runMethod(true,"Sqrt",(Object)(RemoteObject.solve(new RemoteObject[] {_val,__ref.getField(false,"_mbubblevalminmax" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))}, "/",0, 0))),RemoteObject.createImmutable(2)}, "*/",0, 0))));Debug.locals.put("Radius", _radius);
 BA.debugLineNum = 4575;BA.debugLine="xcvsGraph.DrawCircle(x, y, Radius, col, True, 1di";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _radius)),(Object)(_col),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4576;BA.debugLine="xcvsGraph.DrawCircle(x, y, Radius, BD.Color, Fals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _radius)),(Object)(_bd.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4578;BA.debugLine="BD.x = x";
Debug.JustUpdateDeviceLine();
_bd.setField ("x" /*RemoteObject*/ ,_x);
 BA.debugLineNum = 4579;BA.debugLine="BD.y = y";
Debug.JustUpdateDeviceLine();
_bd.setField ("y" /*RemoteObject*/ ,_y);
 BA.debugLineNum = 4580;BA.debugLine="BD.Radius = Radius";
Debug.JustUpdateDeviceLine();
_bd.setField ("Radius" /*RemoteObject*/ ,_radius);
 BA.debugLineNum = 4581;BA.debugLine="Bubbles.Add(BD)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bubbles" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((_bd)));
 BA.debugLineNum = 4582;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbubbles(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawBubbles (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4501);
if (RapidSub.canDelegate("drawbubbles")) { return __ref.runUserSub(false, "xchart","drawbubbles", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _yxval = null;
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _bd = RemoteObject.declareNull("b4a.example.xchart._bubbledata");
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _mxaxis0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 4501;BA.debugLine="Private Sub DrawBubbles";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4502;BA.debugLine="Private i, l As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
 BA.debugLineNum = 4503;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 4504;BA.debugLine="Private yxVal() As Double";
Debug.JustUpdateDeviceLine();
_yxval = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4505;BA.debugLine="Private x0, y0 As Int";
Debug.JustUpdateDeviceLine();
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
 BA.debugLineNum = 4507;BA.debugLine="If Items.Size = 0 Then Return";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 4509;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4511;BA.debugLine="mBubbleRadiusMin = mBubbleDiameterMin * Min(Graph";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubbleradiusmin" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(true,"_mbubblediametermin" /*RemoteObject*/ ),xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ))),(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )))),RemoteObject.createImmutable(100)}, "*/",0, 0)));
 BA.debugLineNum = 4512;BA.debugLine="mBubbleRadiusMax = mBubbleDiameterMax * Min(Graph";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubbleradiusmax" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(true,"_mbubblediametermax" /*RemoteObject*/ ),xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ))),(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )))),RemoteObject.createImmutable(100)}, "*/",0, 0)));
 BA.debugLineNum = 4514;BA.debugLine="Bubbles.Clear";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bubbles" /*RemoteObject*/ ).runVoidMethod ("Clear");
 BA.debugLineNum = 4515;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step10 = 1;
final int limit10 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step10 > 0 && _l.<Integer>get().intValue() <= limit10) || (step10 < 0 && _l.<Integer>get().intValue() >= limit10) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step10))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4516;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4517;BA.debugLine="For i = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step12 = 1;
final int limit12 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step12 > 0 && _i.<Integer>get().intValue() <= limit12) || (step12 < 0 && _i.<Integer>get().intValue() >= limit12) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step12))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4518;BA.debugLine="yxVal = ID.YXArray.Get(i)";
Debug.JustUpdateDeviceLine();
_yxval = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4519;BA.debugLine="x0 = Graph.Left + (yxVal(0) - Scale(sX).MinVal)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4520;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4521;BA.debugLine="y0 = Graph.Bottom - (yxVal(1) - Scale(sY(0)).M";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 4523;BA.debugLine="y0 = Graph.Top + (yxVal(1) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 4525;BA.debugLine="Private BD As BubbleData";
Debug.JustUpdateDeviceLine();
_bd = RemoteObject.createNew ("b4a.example.xchart._bubbledata");Debug.locals.put("BD", _bd);
 BA.debugLineNum = 4526;BA.debugLine="BD.Initialize";
Debug.JustUpdateDeviceLine();
_bd.runVoidMethod ("Initialize");
 BA.debugLineNum = 4527;BA.debugLine="BD.ItemIndex = l";
Debug.JustUpdateDeviceLine();
_bd.setField ("ItemIndex" /*RemoteObject*/ ,_l);
 BA.debugLineNum = 4528;BA.debugLine="BD.PointIndex = i";
Debug.JustUpdateDeviceLine();
_bd.setField ("PointIndex" /*RemoteObject*/ ,_i);
 BA.debugLineNum = 4529;BA.debugLine="BD.Color = ID.Color";
Debug.JustUpdateDeviceLine();
_bd.setField ("Color" /*RemoteObject*/ ,_id.getField(true,"Color" /*RemoteObject*/ ));
 BA.debugLineNum = 4530;BA.debugLine="DrawBubbleCircle(x0, y0, yxVal(2), BD)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbubblecircle" /*RemoteObject*/ ,(Object)(_x0),(Object)(_y0),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 2))),(Object)(_bd));
 }
}Debug.locals.put("i", _i);
;
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4533;BA.debugLine="Bubbles.SortType(\"Radius\", True)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bubbles" /*RemoteObject*/ ).runVoidMethod ("SortType",(Object)(BA.ObjectToString("Radius")),(Object)(xchart.__c.getField(true,"True")));
 BA.debugLineNum = 4535;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4537;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4538;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4539;BA.debugLine="Private mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4540;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4541;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal *";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 }else {
 BA.debugLineNum = 4543;BA.debugLine="mYAxis0 = Graph.Top - Scale(sY(0)).MinVal * Sca";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 };
 BA.debugLineNum = 4545;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4546;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4548;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 4552;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4553;BA.debugLine="If Scale(sX).MinVal< 0 And Scale(sX).MaxVal > 0 T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4554;BA.debugLine="Private mXAxis0 = Graph.Left - Scale(sX).MinVal";
Debug.JustUpdateDeviceLine();
_mxaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mXAxis0", _mxaxis0);Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 4555;BA.debugLine="If Scale(sX).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4556;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis0,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4558;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis0,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 4562;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And (Zoom.NbVis";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("BUBBLE")))))) { 
 BA.debugLineNum = 4563;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4566;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 4567;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawbubblevalues(RemoteObject __ref,RemoteObject _cursx,RemoteObject _cursy) throws Exception{
try {
		Debug.PushSubsStack("DrawBubbleValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8738);
if (RapidSub.canDelegate("drawbubblevalues")) { return __ref.runUserSub(false, "xchart","drawbubblevalues", __ref, _cursx, _cursy);}
RemoteObject _pointx = RemoteObject.createImmutable(0);
RemoteObject _pointy = RemoteObject.createImmutable(0);
RemoteObject _ib = RemoteObject.createImmutable(0);
RemoteObject _radius = RemoteObject.createImmutable(0);
RemoteObject _found = RemoteObject.createImmutable(false);
RemoteObject _bd = RemoteObject.declareNull("b4a.example.xchart._bubbledata");
RemoteObject _cx = RemoteObject.createImmutable(0);
RemoteObject _cy = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _yx = null;
RemoteObject _rectdisplay = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _wcurvename = RemoteObject.createImmutable(0);
RemoteObject _wtextx = RemoteObject.createImmutable(0);
RemoteObject _wtexty = RemoteObject.createImmutable(0);
RemoteObject _wtextval = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _yrecttop = RemoteObject.createImmutable(0);
RemoteObject _texttop = RemoteObject.createImmutable(0);
RemoteObject _textleft = RemoteObject.createImmutable(0);
RemoteObject _hdisplay = RemoteObject.createImmutable(0);
RemoteObject _wdisplay = RemoteObject.createImmutable(0);
RemoteObject _txtx = RemoteObject.createImmutable("");
RemoteObject _txty = RemoteObject.createImmutable("");
RemoteObject _txtval = RemoteObject.createImmutable("");
Debug.locals.put("CursX", _cursx);
Debug.locals.put("CursY", _cursy);
 BA.debugLineNum = 8738;BA.debugLine="Private Sub DrawBubbleValues(CursX As Float, CursY";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8739;BA.debugLine="Private PointX, PointY As Double";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.createImmutable(0);Debug.locals.put("PointX", _pointx);
_pointy = RemoteObject.createImmutable(0);Debug.locals.put("PointY", _pointy);
 BA.debugLineNum = 8740;BA.debugLine="Private ib As Int";
Debug.JustUpdateDeviceLine();
_ib = RemoteObject.createImmutable(0);Debug.locals.put("ib", _ib);
 BA.debugLineNum = 8741;BA.debugLine="Private Radius As Int";
Debug.JustUpdateDeviceLine();
_radius = RemoteObject.createImmutable(0);Debug.locals.put("Radius", _radius);
 BA.debugLineNum = 8742;BA.debugLine="Private Found = False As Boolean";
Debug.JustUpdateDeviceLine();
_found = xchart.__c.getField(true,"False");Debug.locals.put("Found", _found);Debug.locals.put("Found", _found);
 BA.debugLineNum = 8744;BA.debugLine="PointX = Scale(sX).MinVal + (CursX - Graph.Left)";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursx,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointX", _pointx);
 BA.debugLineNum = 8746;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8747;BA.debugLine="PointY = Scale(sY(0)).MaxVal - (CursY - Graph.To";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursy,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-/",1, 0);Debug.locals.put("PointY", _pointy);
 }else {
 BA.debugLineNum = 8749;BA.debugLine="PointY = Scale(sY(0)).MinVal + (CursY - Graph.To";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursy,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointY", _pointy);
 };
 BA.debugLineNum = 8752;BA.debugLine="For ib = 0 To Bubbles.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step11 = 1;
final int limit11 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_bubbles" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ib = BA.numberCast(int.class, 0) ;
for (;(step11 > 0 && _ib.<Integer>get().intValue() <= limit11) || (step11 < 0 && _ib.<Integer>get().intValue() >= limit11) ;_ib = RemoteObject.createImmutable((int)(0 + _ib.<Integer>get().intValue() + step11))  ) {
Debug.locals.put("ib", _ib);
 BA.debugLineNum = 8753;BA.debugLine="Private BD As BubbleData";
Debug.JustUpdateDeviceLine();
_bd = RemoteObject.createNew ("b4a.example.xchart._bubbledata");Debug.locals.put("BD", _bd);
 BA.debugLineNum = 8755;BA.debugLine="BD = Bubbles.Get(ib)";
Debug.JustUpdateDeviceLine();
_bd = (__ref.getField(false,"_bubbles" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ib)));Debug.locals.put("BD", _bd);
 BA.debugLineNum = 8757;BA.debugLine="Radius = Sqrt((CursX - BD.x) * (CursX - BD.x) +";
Debug.JustUpdateDeviceLine();
_radius = BA.numberCast(int.class, xchart.__c.runMethod(true,"Sqrt",(Object)(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_cursx,_bd.getField(true,"x" /*RemoteObject*/ )}, "-",1, 0)),(RemoteObject.solve(new RemoteObject[] {_cursx,_bd.getField(true,"x" /*RemoteObject*/ )}, "-",1, 0)),(RemoteObject.solve(new RemoteObject[] {_cursy,_bd.getField(true,"y" /*RemoteObject*/ )}, "-",1, 0)),(RemoteObject.solve(new RemoteObject[] {_cursy,_bd.getField(true,"y" /*RemoteObject*/ )}, "-",1, 0))}, "*+*",1, 0))));Debug.locals.put("Radius", _radius);
 BA.debugLineNum = 8758;BA.debugLine="If mBubbleSmallSnap = False And Radius <= BD.Rad";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mbubblesmallsnap" /*RemoteObject*/ ),xchart.__c.getField(true,"False")) && RemoteObject.solveBoolean("k",_radius,BA.numberCast(double.class, _bd.getField(true,"Radius" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mbubblesmallsnap" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("k",_radius,BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3)))))) { 
 BA.debugLineNum = 8759;BA.debugLine="Found = True";
Debug.JustUpdateDeviceLine();
_found = xchart.__c.getField(true,"True");Debug.locals.put("Found", _found);
 BA.debugLineNum = 8760;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ib", _ib);
;
 BA.debugLineNum = 8764;BA.debugLine="xcvsCursor.ClearRect(xcvsCursor.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 8765;BA.debugLine="xcvsValues.ClearRect(xcvsValues.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 8767;BA.debugLine="If mYXChartDisplayCrossHair = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplaycrosshair" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8768;BA.debugLine="If Found = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8769;BA.debugLine="xcvsCursor.DrawLine(CursX, Graph.Top, CursX, Gr";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(_cursx),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(_cursx),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(true,"_myxchartcrosshaircolor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 8770;BA.debugLine="xcvsCursor.DrawLine(Graph.Left, CursY, Graph.Ri";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(_cursy),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(_cursy),(Object)(__ref.getField(true,"_myxchartcrosshaircolor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 8772;BA.debugLine="Private cx, cy As Int";
Debug.JustUpdateDeviceLine();
_cx = RemoteObject.createImmutable(0);Debug.locals.put("cx", _cx);
_cy = RemoteObject.createImmutable(0);Debug.locals.put("cy", _cy);
 BA.debugLineNum = 8773;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 8774;BA.debugLine="Private YX() As Double";
Debug.JustUpdateDeviceLine();
_yx = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8775;BA.debugLine="ID = Items.Get(BD.ItemIndex)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_bd.getField(true,"ItemIndex" /*RemoteObject*/ ))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 8776;BA.debugLine="YX = ID.YXArray.Get(BD.PointIndex)";
Debug.JustUpdateDeviceLine();
_yx = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_bd.getField(true,"PointIndex" /*RemoteObject*/ ))));Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8777;BA.debugLine="cx = (YX(0) - Scale(sX).MinVal) * Scale(sX).Sca";
Debug.JustUpdateDeviceLine();
_cx = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "*+",1, 0));Debug.locals.put("cx", _cx);
 BA.debugLineNum = 8778;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8779;BA.debugLine="cy =  Graph.Bottom - (YX(1) - Scale(sY(0)).Min";
Debug.JustUpdateDeviceLine();
_cy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("cy", _cy);
 }else {
 BA.debugLineNum = 8781;BA.debugLine="cy =  Graph.Top + (YX(1) - Scale(sY(0)).MinVal";
Debug.JustUpdateDeviceLine();
_cy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("cy", _cy);
 };
 BA.debugLineNum = 8783;BA.debugLine="xcvsCursor.DrawLine(cx, Graph.Top, cx, Graph.Bo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _cx)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _cx)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(_bd.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 8784;BA.debugLine="xcvsCursor.DrawLine(Graph.Left, cy, Graph.Right";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _cy)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _cy)),(Object)(_bd.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 8788;BA.debugLine="If mYXChartDisplayValues = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplayvalues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8789;BA.debugLine="Private rectDisplay, rectText As B4XRect";
Debug.JustUpdateDeviceLine();
_rectdisplay = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectDisplay", _rectdisplay);
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 8790;BA.debugLine="Private wCurveName, wTextX, wTextY,wTextVal As I";
Debug.JustUpdateDeviceLine();
_wcurvename = RemoteObject.createImmutable(0);Debug.locals.put("wCurveName", _wcurvename);
_wtextx = RemoteObject.createImmutable(0);Debug.locals.put("wTextX", _wtextx);
_wtexty = RemoteObject.createImmutable(0);Debug.locals.put("wTextY", _wtexty);
_wtextval = RemoteObject.createImmutable(0);Debug.locals.put("wTextVal", _wtextval);
 BA.debugLineNum = 8791;BA.debugLine="Private x, y, yRectTop, TextTop, TextLeft, hDisp";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_yrecttop = RemoteObject.createImmutable(0);Debug.locals.put("yRectTop", _yrecttop);
_texttop = RemoteObject.createImmutable(0);Debug.locals.put("TextTop", _texttop);
_textleft = RemoteObject.createImmutable(0);Debug.locals.put("TextLeft", _textleft);
_hdisplay = RemoteObject.createImmutable(0);Debug.locals.put("hDisplay", _hdisplay);
_wdisplay = RemoteObject.createImmutable(0);Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8792;BA.debugLine="Private txtX, txtY, txtVal As String";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.createImmutable("");Debug.locals.put("txtX", _txtx);
_txty = RemoteObject.createImmutable("");Debug.locals.put("txtY", _txty);
_txtval = RemoteObject.createImmutable("");Debug.locals.put("txtVal", _txtval);
 BA.debugLineNum = 8794;BA.debugLine="rectText = xcvsCursor.MeasureText(\"My\", Texts.Sc";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("My")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 8795;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8796;BA.debugLine="txtX = \"       x = \" & NumberFormat3(YX(0), 6)";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.concat(RemoteObject.createImmutable("       x = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtX", _txtx);
 BA.debugLineNum = 8797;BA.debugLine="txtY = \"       y = \" & NumberFormat3(YX(1), 6)";
Debug.JustUpdateDeviceLine();
_txty = RemoteObject.concat(RemoteObject.createImmutable("       y = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtY", _txty);
 BA.debugLineNum = 8798;BA.debugLine="txtVal = \"value = \" & NumberFormat3(YX(2), 6)";
Debug.JustUpdateDeviceLine();
_txtval = RemoteObject.concat(RemoteObject.createImmutable("value = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 2))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtVal", _txtval);
 BA.debugLineNum = 8799;BA.debugLine="wCurveName = MeasureTextWidth(ID.Name, Texts.Sc";
Debug.JustUpdateDeviceLine();
_wcurvename = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_id.getField(true,"Name" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wCurveName", _wcurvename);
 BA.debugLineNum = 8800;BA.debugLine="wTextX = MeasureTextWidth(txtX, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtextx = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txtx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextX", _wtextx);
 BA.debugLineNum = 8801;BA.debugLine="wTextY = MeasureTextWidth(txtY, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtexty = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txty),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextY", _wtexty);
 BA.debugLineNum = 8802;BA.debugLine="wTextVal = MeasureTextWidth(txtVal, Texts.Scale";
Debug.JustUpdateDeviceLine();
_wtextval = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txtval),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextVal", _wtextval);
 BA.debugLineNum = 8803;BA.debugLine="wDisplay = Max(wCurveName, wTextX)";
Debug.JustUpdateDeviceLine();
_wdisplay = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _wcurvename)),(Object)(BA.numberCast(double.class, _wtextx))));Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8804;BA.debugLine="wDisplay = Max(wTextVal, wDisplay)";
Debug.JustUpdateDeviceLine();
_wdisplay = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _wtextval)),(Object)(BA.numberCast(double.class, _wdisplay))));Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8805;BA.debugLine="wDisplay = Max(wTextY, wDisplay) + 10dip";
Debug.JustUpdateDeviceLine();
_wdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _wtexty)),(Object)(BA.numberCast(double.class, _wdisplay))),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 0));Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8806;BA.debugLine="hDisplay = 4.2 * rectText.Height + 10dip";
Debug.JustUpdateDeviceLine();
_hdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(4.2),_recttext.runMethod(true,"getHeight"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "*+",1, 0));Debug.locals.put("hDisplay", _hdisplay);
 }else {
 BA.debugLineNum = 8808;BA.debugLine="txtX = \"x = \" & NumberFormat3(PointX, 6)";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.concat(RemoteObject.createImmutable("x = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_pointx),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtX", _txtx);
 BA.debugLineNum = 8809;BA.debugLine="txtY = \"y = \" & NumberFormat3(PointY, 6)";
Debug.JustUpdateDeviceLine();
_txty = RemoteObject.concat(RemoteObject.createImmutable("y = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_pointy),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtY", _txty);
 BA.debugLineNum = 8810;BA.debugLine="wTextX = MeasureTextWidth(txtX, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtextx = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txtx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextX", _wtextx);
 BA.debugLineNum = 8811;BA.debugLine="wTextY = MeasureTextWidth(txtY, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtexty = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txty),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextY", _wtexty);
 BA.debugLineNum = 8812;BA.debugLine="wDisplay = Max(wTextX, wTextY) + 10dip";
Debug.JustUpdateDeviceLine();
_wdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _wtextx)),(Object)(BA.numberCast(double.class, _wtexty))),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 0));Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8813;BA.debugLine="hDisplay = 2 * rectText.Height + 10dip";
Debug.JustUpdateDeviceLine();
_hdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),_recttext.runMethod(true,"getHeight"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "*+",1, 0));Debug.locals.put("hDisplay", _hdisplay);
 };
 BA.debugLineNum = 8816;BA.debugLine="If mYXChartDisplayPosition = \"CORNERS\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplayposition" /*RemoteObject*/ ),BA.ObjectToString("CORNERS"))) { 
 BA.debugLineNum = 8817;BA.debugLine="yRectTop = Graph.Top + 2dip '2dip to be insides";
Debug.JustUpdateDeviceLine();
_yrecttop = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1);Debug.locals.put("yRectTop", _yrecttop);
 BA.debugLineNum = 8818;BA.debugLine="TextTop = yRectTop + 5dip";
Debug.JustUpdateDeviceLine();
_texttop = RemoteObject.solve(new RemoteObject[] {_yrecttop,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextTop", _texttop);
 BA.debugLineNum = 8819;BA.debugLine="If CursX < (Graph.Left + Graph.Right) / 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_cursx,RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ )}, "+",1, 1)),RemoteObject.createImmutable(2)}, "/",0, 0))) { 
 BA.debugLineNum = 8820;BA.debugLine="TextLeft = Graph.Left + 5dip";
Debug.JustUpdateDeviceLine();
_textleft = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextLeft", _textleft);
 BA.debugLineNum = 8821;BA.debugLine="rectDisplay.Initialize(Graph.Left + 2dip, yRec";
Debug.JustUpdateDeviceLine();
_rectdisplay.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yrecttop)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_wdisplay}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_yrecttop,_hdisplay}, "+",1, 1))));
 }else {
 BA.debugLineNum = 8823;BA.debugLine="TextLeft = Graph.Right - wDisplay + 3dip	'3dip";
Debug.JustUpdateDeviceLine();
_textleft = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_wdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3)))}, "-+",2, 1);Debug.locals.put("TextLeft", _textleft);
 BA.debugLineNum = 8824;BA.debugLine="rectDisplay.Initialize(Graph.Right - wDisplay";
Debug.JustUpdateDeviceLine();
_rectdisplay.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_wdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1))),(Object)(BA.numberCast(float.class, _yrecttop)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_yrecttop,_hdisplay}, "+",1, 1))));
 };
 }else {
 BA.debugLineNum = 8833;BA.debugLine="x = Max(Graph.Left + 5dip, CursX - wDisplay / 2";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1))),(Object)(RemoteObject.solve(new RemoteObject[] {_cursx,_wdisplay,RemoteObject.createImmutable(2)}, "-/",1, 0))));Debug.locals.put("x", _x);
 BA.debugLineNum = 8834;BA.debugLine="x = Min(Graph.Right - 5dip - wDisplay, x)";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))),_wdisplay}, "--",2, 1))),(Object)(BA.numberCast(double.class, _x))));Debug.locals.put("x", _x);
 BA.debugLineNum = 8835;BA.debugLine="TextLeft = x + 5dip";
Debug.JustUpdateDeviceLine();
_textleft = RemoteObject.solve(new RemoteObject[] {_x,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextLeft", _textleft);
 BA.debugLineNum = 8836;BA.debugLine="If CursY > Graph.Top + hDisplay + 10dip Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_cursy,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_hdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "++",2, 1)))) { 
 BA.debugLineNum = 8837;BA.debugLine="y = CursY - hDisplay - 10dip";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_cursy,_hdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "--",2, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 8839;BA.debugLine="y = CursY + 10dip";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_cursy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 0));Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 8841;BA.debugLine="rectDisplay.Initialize(x, y, x + wDisplay, y +";
Debug.JustUpdateDeviceLine();
_rectdisplay.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_wdisplay}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_hdisplay}, "+",1, 1))));
 BA.debugLineNum = 8842;BA.debugLine="TextTop = y + 5dip";
Debug.JustUpdateDeviceLine();
_texttop = RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextTop", _texttop);
 };
 BA.debugLineNum = 8846;BA.debugLine="xcvsValues.DrawRect(rectDisplay, Values.Backgrou";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rectdisplay),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"BackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 BA.debugLineNum = 8848;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8849;BA.debugLine="xcvsValues.DrawText(ID.Name, TextLeft, TextTop";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_id.getField(true,"Name" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop")}, "-",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8850;BA.debugLine="xcvsValues.DrawText(txtVal, TextLeft, TextTop -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txtval),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop"),_recttext.runMethod(true,"getHeight")}, "-+",2, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8851;BA.debugLine="xcvsValues.DrawText(txtX, TextLeft, TextTop - r";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txtx),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop"),RemoteObject.createImmutable(2.1),_recttext.runMethod(true,"getHeight")}, "-+*",2, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8852;BA.debugLine="xcvsValues.DrawText(txtY, TextLeft,  TextTop -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txty),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop"),RemoteObject.createImmutable(3.2),_recttext.runMethod(true,"getHeight")}, "-+*",2, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8853;BA.debugLine="xcvsCursor.DrawCircle(BD.x, BD.y, BD.Radius, BD";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _bd.getField(true,"x" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _bd.getField(true,"y" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _bd.getField(true,"Radius" /*RemoteObject*/ ))),(Object)(_bd.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 8855;BA.debugLine="xcvsValues.DrawText(txtX, TextLeft, TextTop - r";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txtx),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop")}, "-",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8856;BA.debugLine="xcvsValues.DrawText(txtY, TextLeft,  TextTop -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txty),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop"),_recttext.runMethod(true,"getHeight")}, "-+",2, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 };
 };
 BA.debugLineNum = 8859;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 8860;BA.debugLine="xcvsValues.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 8861;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawchart(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawChart (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3004);
if (RapidSub.canDelegate("drawchart")) { return __ref.runUserSub(false, "xchart","drawchart", __ref);}
 BA.debugLineNum = 3004;BA.debugLine="Public Sub DrawChart";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3005;BA.debugLine="InitChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initchart" /*RemoteObject*/ );
 BA.debugLineNum = 3007;BA.debugLine="If Graph.Error = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Error" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3008;BA.debugLine="DrawError";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawerror" /*RemoteObject*/ );
 BA.debugLineNum = 3009;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 3012;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("H_LINE"),BA.ObjectToString("BAR"),BA.ObjectToString("H_BAR"),BA.ObjectToString("STACKED_BAR"),BA.ObjectToString("H_STACKED_BAR"),BA.ObjectToString("PIE"),BA.ObjectToString("YX_CHART"),BA.ObjectToString("BUBBLE"),BA.ObjectToString("RADAR"),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"))) {
case 0: {
 BA.debugLineNum = 3014;BA.debugLine="GetXIntervals";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getxintervals" /*RemoteObject*/ );
 BA.debugLineNum = 3015;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 3016;BA.debugLine="If Scale(sY(0)).Logarithmic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3017;BA.debugLine="DrawLinesLog";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlineslog" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 3019;BA.debugLine="If Items.Size > 1 And Items.Size <= NbMaxDiffe";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 1)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3020;BA.debugLine="DrawLinesNScales";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlinesnscales" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 3022;BA.debugLine="DrawLinesV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlinesv" /*RemoteObject*/ );
 };
 };
 break; }
case 1: {
 BA.debugLineNum = 3026;BA.debugLine="GetXIntervals";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getxintervals" /*RemoteObject*/ );
 BA.debugLineNum = 3028;BA.debugLine="DrawArea";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawarea" /*RemoteObject*/ );
 break; }
case 2: {
 BA.debugLineNum = 3030;BA.debugLine="GetXIntervals";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getxintervals" /*RemoteObject*/ );
 BA.debugLineNum = 3032;BA.debugLine="DrawStackedArea";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawstackedarea" /*RemoteObject*/ );
 break; }
case 3: {
 BA.debugLineNum = 3034;BA.debugLine="GetXIntervals";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getxintervals" /*RemoteObject*/ );
 BA.debugLineNum = 3035;BA.debugLine="DrawGridH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridh" /*RemoteObject*/ );
 BA.debugLineNum = 3036;BA.debugLine="DrawLinesH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlinesh" /*RemoteObject*/ );
 break; }
case 4: {
 BA.debugLineNum = 3038;BA.debugLine="If BarWidth0 = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3039;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 3040;BA.debugLine="DrawBarsV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarsv" /*RemoteObject*/ );
 };
 break; }
case 5: {
 BA.debugLineNum = 3043;BA.debugLine="If BarWidth0 = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3044;BA.debugLine="DrawGridH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridh" /*RemoteObject*/ );
 BA.debugLineNum = 3045;BA.debugLine="DrawBarsH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarsh" /*RemoteObject*/ );
 };
 break; }
case 6: {
 BA.debugLineNum = 3048;BA.debugLine="If BarWidth0 = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3049;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 3050;BA.debugLine="DrawBarsV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarsv" /*RemoteObject*/ );
 };
 break; }
case 7: {
 BA.debugLineNum = 3053;BA.debugLine="If BarWidth0 = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3054;BA.debugLine="DrawGridH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridh" /*RemoteObject*/ );
 BA.debugLineNum = 3055;BA.debugLine="DrawBarsH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarsh" /*RemoteObject*/ );
 };
 break; }
case 8: {
 BA.debugLineNum = 3058;BA.debugLine="DrawPies";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpies" /*RemoteObject*/ );
 break; }
case 9: {
 BA.debugLineNum = 3060;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 3061;BA.debugLine="If Items.Size <= NbMaxDifferentScales And Scale";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3062;BA.debugLine="DrawYXLinesNScales";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawyxlinesnscales" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 3064;BA.debugLine="DrawYXLines";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawyxlines" /*RemoteObject*/ );
 };
 break; }
case 10: {
 BA.debugLineNum = 3067;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 3068;BA.debugLine="DrawBubbles";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbubbles" /*RemoteObject*/ );
 break; }
case 11: {
 BA.debugLineNum = 3070;BA.debugLine="DrawRadar";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawradar" /*RemoteObject*/ );
 break; }
case 12: {
 BA.debugLineNum = 3072;BA.debugLine="If BarWidth0 = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3073;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 3074;BA.debugLine="DrawBarsV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarsv" /*RemoteObject*/ );
 };
 break; }
case 13: {
 BA.debugLineNum = 3077;BA.debugLine="If BarWidth0 = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3078;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 3079;BA.debugLine="DrawBarsV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbarsv" /*RemoteObject*/ );
 };
 break; }
}
;
 BA.debugLineNum = 3086;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawemptychart(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawEmptyChart (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2998);
if (RapidSub.canDelegate("drawemptychart")) { return __ref.runUserSub(false, "xchart","drawemptychart", __ref);}
 BA.debugLineNum = 2998;BA.debugLine="Public Sub DrawEmptyChart";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2999;BA.debugLine="xcvsGraph.ClearRect(xcvsGraph.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 3000;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.Ch";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 3001;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawerror(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawError (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3088);
if (RapidSub.canDelegate("drawerror")) { return __ref.runUserSub(false, "xchart","drawerror", __ref);}
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3088;BA.debugLine="Private Sub DrawError";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3089;BA.debugLine="Private x, y As Double";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 3090;BA.debugLine="xcvsGraph.ClearRect(xcvsGraph.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 3091;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.Ch";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 3093;BA.debugLine="x = xcvsGraph.TargetRect.CenterX";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(double.class, __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect").runMethod(true,"getCenterX"));Debug.locals.put("x", _x);
 BA.debugLineNum = 3094;BA.debugLine="y = xcvsGraph.TargetRect.CenterY - 1.5 * Texts.Ti";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect").runMethod(true,"getCenterY"),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "-*-*",2, 0);Debug.locals.put("y", _y);
 BA.debugLineNum = 3096;BA.debugLine="xcvsGraph.DrawText(\"E R R O R\", x, y, Texts.Title";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("E R R O R")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 3097;BA.debugLine="y = y + 1.5 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0);Debug.locals.put("y", _y);
 BA.debugLineNum = 3098;BA.debugLine="xcvsGraph.DrawText(Graph.Title & \"  \" & Graph.Cha";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(RemoteObject.concat(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),RemoteObject.createImmutable("  "),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable(" chart"))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 3099;BA.debugLine="y = y + 1.5 * Texts.SubtitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0);Debug.locals.put("y", _y);
 BA.debugLineNum = 3100;BA.debugLine="xcvsGraph.DrawText(Graph.ErrorText, x, y, Texts.S";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ErrorText" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 3101;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawgridh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawGridH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3179);
if (RapidSub.canDelegate("drawgridh")) { return __ref.runUserSub(false, "xchart","drawgridh", __ref);}
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _rctouter = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
 BA.debugLineNum = 3179;BA.debugLine="Private Sub DrawGridH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3180;BA.debugLine="Private x1, y As Int";
Debug.JustUpdateDeviceLine();
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 3182;BA.debugLine="xcvsGraph.ClearRect(xcvsGraph.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 3183;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.Ch";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 3184;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 3185;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3186;BA.debugLine="DrawScaleYH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawscaleyh" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3188;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3189;BA.debugLine="If Graph.ChartType = \"H_LINE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_LINE"))) { 
 BA.debugLineNum = 3190;BA.debugLine="DrawScaleXHLine";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawscalexhline" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 3192;BA.debugLine="DrawScaleXH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawscalexh" /*RemoteObject*/ );
 };
 };
 BA.debugLineNum = 3196;BA.debugLine="y = 0.45 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3197;BA.debugLine="If Graph.Title <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3198;BA.debugLine="y = y + 0.9 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3200;BA.debugLine="xcvsGraph.DrawText(Graph.Title, xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 BA.debugLineNum = 3203;BA.debugLine="If Graph.Subtitle <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3204;BA.debugLine="y = y + 1.5 * Texts.SubtitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3206;BA.debugLine="xcvsGraph.DrawText(Graph.Subtitle, xpnlGraph.Wid";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 BA.debugLineNum = 3209;BA.debugLine="y = xpnlGraph.Height - 0.38 * Texts.AxisTextHeigh";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),RemoteObject.createImmutable(0.38),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3210;BA.debugLine="If Legend.IncludeLegend = \"BOTTOM\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM"))) { 
 BA.debugLineNum = 3211;BA.debugLine="y = y - Legend.Height - 0.75 * Legend.TextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 3214;BA.debugLine="If Graph.YAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3215;BA.debugLine="If mHChartsXScaleOnTop = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartsxscaleontop" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3216;BA.debugLine="xcvsGraph.DrawText(Graph.YAxisName, Graph.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }else {
 BA.debugLineNum = 3218;BA.debugLine="y = Graph.Top - 4dip - 1.5 * Texts.ScaleTextHei";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3219;BA.debugLine="xcvsGraph.DrawText(Graph.YAxisName, Graph.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 };
 BA.debugLineNum = 3223;BA.debugLine="x1 = 1.5 * Texts.AxisTextHeight";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 3224;BA.debugLine="If xui.IsB4i Then x1 = 1.2 * Texts.AxisTextHeight";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"getIsB4i").<Boolean>get().booleanValue()) { 
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("x1", _x1);};
 BA.debugLineNum = 3225;BA.debugLine="If Graph.XAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3226;BA.debugLine="xcvsGraph.DrawTextRotated(Graph.XAxisName, x1, G";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"CENTER")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 };
 BA.debugLineNum = 3229;BA.debugLine="If Graph.DrawGridFrame = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawGridFrame" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3230;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3235;BA.debugLine="If Graph.DrawOuterFrame = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawOuterFrame" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3236;BA.debugLine="Private rctOuter As B4XRect";
Debug.JustUpdateDeviceLine();
_rctouter = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rctOuter", _rctouter);
 BA.debugLineNum = 3237;BA.debugLine="rctOuter.Initialize(0, 0, xpnlCursor.Width, xpnl";
Debug.JustUpdateDeviceLine();
_rctouter.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 3238;BA.debugLine="xcvsGraph.DrawRect(rctOuter, Graph.GridFrameColo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rctouter),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))))));
 };
 BA.debugLineNum = 3240;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawgridv(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawGridV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3104);
if (RapidSub.canDelegate("drawgridv")) { return __ref.runUserSub(false, "xchart","drawgridv", __ref);}
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
int _i = 0;
RemoteObject _rctouter = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
 BA.debugLineNum = 3104;BA.debugLine="Private Sub DrawGridV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3105;BA.debugLine="Private x1, y As Int";
Debug.JustUpdateDeviceLine();
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 3107;BA.debugLine="If Graph.ChartType <> \"AREA\" And Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("STACKED_AREA"))) { 
 BA.debugLineNum = 3108;BA.debugLine="xcvsGraph.ClearRect(xcvsGraph.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 3109;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.C";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3111;BA.debugLine="If Scale(sY(0)).Logarithmic = True And (Graph.Cha";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("YX_CHART")))))) { 
 BA.debugLineNum = 3112;BA.debugLine="ScaleLog(sY(0)).Scale = Graph.Height / (ScaleLog";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ )}, "-",1, 1))}, "/",0, 0));
 BA.debugLineNum = 3113;BA.debugLine="DrawYScaleLog";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawyscalelog" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 3115;BA.debugLine="If (Graph.ChartType = \"LINE\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("STACKED_AREA"))))) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3116;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step11 = 1;
final int limit11 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step11 > 0 && _i <= limit11) || (step11 < 0 && _i >= limit11) ;_i = ((int)(0 + _i + step11))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3117;BA.debugLine="Scale(sY(i)).Scale = Graph.Height / (Scale(sY(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3119;BA.debugLine="DrawScalesY";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawscalesy" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 3121;BA.debugLine="Scale(sY(0)).Scale = Graph.Height / (Scale(sY(0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 BA.debugLineNum = 3122;BA.debugLine="DrawScaleY";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawscaley" /*RemoteObject*/ );
 };
 };
 BA.debugLineNum = 3125;BA.debugLine="If Scale(sX).Logarithmic = True And Graph.ChartTy";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART"))) { 
 BA.debugLineNum = 3126;BA.debugLine="ScaleLog(sX).Scale = Graph.Width / (ScaleLog(sX)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "+--",3, 0))}, "/",0, 0));
 BA.debugLineNum = 3127;BA.debugLine="DrawXScaleLog";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawxscalelog" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 3129;BA.debugLine="DrawScaleX";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawscalex" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3131;BA.debugLine="If Graph.ChartType = \"BUBBLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 3132;BA.debugLine="DrawScaleX";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawscalex" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3135;BA.debugLine="y = 0.45 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.45),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3136;BA.debugLine="If Graph.Title <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3137;BA.debugLine="y = y + 0.9 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3138;BA.debugLine="xcvsGraph.DrawText(Graph.Title, Graph.Left + Gra";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 BA.debugLineNum = 3141;BA.debugLine="If Graph.Subtitle <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3142;BA.debugLine="y = y + 1.5 * Texts.SubtitleTextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3143;BA.debugLine="xcvsGraph.DrawText(Graph.Subtitle, Graph.Left +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 BA.debugLineNum = 3146;BA.debugLine="y = xpnlGraph.Height - 0.38 * Texts.AxisTextHeigh";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),RemoteObject.createImmutable(0.38),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3147;BA.debugLine="If Legend.IncludeLegend = \"BOTTOM\" And Graph.Chart";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("WATERFALL"))) { 
 BA.debugLineNum = 3148;BA.debugLine="y = y - Legend.Height - 0.75 * Legend.TextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 3151;BA.debugLine="If Graph.XAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3152;BA.debugLine="xcvsGraph.DrawText(Graph.XAxisName, Graph.Left +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 BA.debugLineNum = 3155;BA.debugLine="x1 = 1.5 * Texts.AxisTextHeight";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 3156;BA.debugLine="If xui.IsB4i Then x1 = 1.2 * Texts.AxisTextHeight";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"getIsB4i").<Boolean>get().booleanValue()) { 
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("x1", _x1);};
 BA.debugLineNum = 3157;BA.debugLine="If Graph.YAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 3158;BA.debugLine="xcvsGraph.DrawTextRotated(Graph.YAxisName, x1, G";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"CENTER")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 };
 BA.debugLineNum = 3160;BA.debugLine="If Graph.YAxisName2 <> \"\" And Items.Size <= NbMax";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName2" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3161;BA.debugLine="x1 = Graph.Right + RightScaleWidth + 2.2 * Texts";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(true,"_rightscalewidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 3162;BA.debugLine="xcvsGraph.DrawTextRotated(Graph.YAxisName2, x1,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName2" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"CENTER")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 };
 BA.debugLineNum = 3165;BA.debugLine="If Graph.DrawGridFrame = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawGridFrame" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3166;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3167;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, Graph.Bottom, Gra";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3168;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, Graph.Top, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3171;BA.debugLine="If Graph.DrawOuterFrame = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawOuterFrame" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3172;BA.debugLine="Private rctOuter As B4XRect";
Debug.JustUpdateDeviceLine();
_rctouter = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rctOuter", _rctouter);
 BA.debugLineNum = 3173;BA.debugLine="rctOuter.Initialize(0, 0, xpnlCursor.Width, xpnl";
Debug.JustUpdateDeviceLine();
_rctouter.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 3174;BA.debugLine="xcvsGraph.DrawRect(rctOuter, Graph.GridFrameColo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rctouter),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))))));
 };
 BA.debugLineNum = 3176;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawhorizontallines(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawHorizontalLines (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5491);
if (RapidSub.canDelegate("drawhorizontallines")) { return __ref.runUserSub(false, "xchart","drawhorizontallines", __ref);}
RemoteObject _y = RemoteObject.createImmutable(0);
int _i = 0;
RemoteObject _hl = RemoteObject.declareNull("b4a.example.xchart._hline");
 BA.debugLineNum = 5491;BA.debugLine="Private Sub DrawHorizontalLines";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5492;BA.debugLine="Private y As Int";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 5494;BA.debugLine="For i = 0 To HLines.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step2 = 1;
final int limit2 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step2 > 0 && _i <= limit2) || (step2 < 0 && _i >= limit2) ;_i = ((int)(0 + _i + step2))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5495;BA.debugLine="Private HL As HLine";
Debug.JustUpdateDeviceLine();
_hl = RemoteObject.createNew ("b4a.example.xchart._hline");Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5496;BA.debugLine="HL = HLines.Get(i)";
Debug.JustUpdateDeviceLine();
_hl = (__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5497;BA.debugLine="y = Graph.Bottom - (HL.Value - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_hl.getField(true,"Value" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 5498;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, y, Graph.Right, y";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(_hl.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _hl.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5500;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawhorizontallinesh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawHorizontalLinesH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5526);
if (RapidSub.canDelegate("drawhorizontallinesh")) { return __ref.runUserSub(false, "xchart","drawhorizontallinesh", __ref);}
int _i = 0;
RemoteObject _hl = RemoteObject.declareNull("b4a.example.xchart._hline");
RemoteObject _x = RemoteObject.createImmutable(0);
 BA.debugLineNum = 5526;BA.debugLine="Private Sub DrawHorizontalLinesH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5527;BA.debugLine="For i = 0 To HLines.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step1 = 1;
final int limit1 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step1 > 0 && _i <= limit1) || (step1 < 0 && _i >= limit1) ;_i = ((int)(0 + _i + step1))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5528;BA.debugLine="Private HL As HLine";
Debug.JustUpdateDeviceLine();
_hl = RemoteObject.createNew ("b4a.example.xchart._hline");Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5529;BA.debugLine="Private x As Int";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
 BA.debugLineNum = 5530;BA.debugLine="HL = HLines.Get(i)";
Debug.JustUpdateDeviceLine();
_hl = (__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5531;BA.debugLine="x = Graph.Left + (HL.Value - Scale(sY(0)).MinVal";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_hl.getField(true,"Value" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 5532;BA.debugLine="xcvsGraph.DrawLine(x, Graph.Top, x, Graph.Bottom";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(_hl.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _hl.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5534;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawhorizontallinesvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawHorizontalLinesValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5503);
if (RapidSub.canDelegate("drawhorizontallinesvalue")) { return __ref.runUserSub(false, "xchart","drawhorizontallinesvalue", __ref);}
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
int _i = 0;
RemoteObject _hl = RemoteObject.declareNull("b4a.example.xchart._hline");
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _rct = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _rct1 = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
 BA.debugLineNum = 5503;BA.debugLine="Private Sub DrawHorizontalLinesValue";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5504;BA.debugLine="Private y, y1 As Int";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
 BA.debugLineNum = 5506;BA.debugLine="For i = 0 To HLines.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step2 = 1;
final int limit2 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step2 > 0 && _i <= limit2) || (step2 < 0 && _i >= limit2) ;_i = ((int)(0 + _i + step2))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5507;BA.debugLine="Private HL As HLine";
Debug.JustUpdateDeviceLine();
_hl = RemoteObject.createNew ("b4a.example.xchart._hline");Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5508;BA.debugLine="Private x As Int";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
 BA.debugLineNum = 5509;BA.debugLine="HL = HLines.Get(i)";
Debug.JustUpdateDeviceLine();
_hl = (__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5510;BA.debugLine="y = Graph.Bottom - (HL.Value - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_hl.getField(true,"Value" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 5512;BA.debugLine="If HL.DisplayValue = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_hl.getField(true,"DisplayValue" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5513;BA.debugLine="Private rct, rct1 As B4XRect";
Debug.JustUpdateDeviceLine();
_rct = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rct", _rct);
_rct1 = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rct1", _rct1);
 BA.debugLineNum = 5514;BA.debugLine="x = Graph.Left + 10dip";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 1);Debug.locals.put("x", _x);
 BA.debugLineNum = 5515;BA.debugLine="rct = xcvsGraph.MeasureText(HL.Value, Texts.Sca";
Debug.JustUpdateDeviceLine();
_rct = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.NumberToString(_hl.getField(true,"Value" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rct", _rct);
 BA.debugLineNum = 5516;BA.debugLine="y1 = y  - rct.CenterY";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,_rct.runMethod(true,"getCenterY")}, "-",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 5517;BA.debugLine="rct1.Initialize(x - 0.3 * rct.Height, y1 + rct.";
Debug.JustUpdateDeviceLine();
_rct1.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,RemoteObject.createImmutable(0.3),_rct.runMethod(true,"getHeight")}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y1,_rct.runMethod(true,"getTop"),RemoteObject.createImmutable(0.2),_rct.runMethod(true,"getHeight")}, "+-*",2, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_rct.runMethod(true,"getWidth"),RemoteObject.createImmutable(0.3),_rct.runMethod(true,"getHeight")}, "++*",2, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y1,_rct.runMethod(true,"getBottom"),RemoteObject.createImmutable(0.2),_rct.runMethod(true,"getHeight")}, "++*",2, 0))));
 BA.debugLineNum = 5518;BA.debugLine="xcvsGraph.DrawRect(rct1, Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rct1),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 5519;BA.debugLine="xcvsGraph.DrawText(HL.Value, rct1.CenterX, y1,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.NumberToString(_hl.getField(true,"Value" /*RemoteObject*/ ))),(Object)(_rct1.runMethod(true,"getCenterX")),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_hl.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5522;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawhorizontallinesvalueh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawHorizontalLinesValueH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,5538);
if (RapidSub.canDelegate("drawhorizontallinesvalueh")) { return __ref.runUserSub(false, "xchart","drawhorizontallinesvalueh", __ref);}
int _i = 0;
RemoteObject _hl = RemoteObject.declareNull("b4a.example.xchart._hline");
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _rct = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _rct1 = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
 BA.debugLineNum = 5538;BA.debugLine="Private Sub DrawHorizontalLinesValueH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 5539;BA.debugLine="For i = 0 To HLines.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step1 = 1;
final int limit1 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step1 > 0 && _i <= limit1) || (step1 < 0 && _i >= limit1) ;_i = ((int)(0 + _i + step1))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 5540;BA.debugLine="Private HL As HLine";
Debug.JustUpdateDeviceLine();
_hl = RemoteObject.createNew ("b4a.example.xchart._hline");Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5541;BA.debugLine="Private x, x1, y As Int";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 5542;BA.debugLine="HL = HLines.Get(i)";
Debug.JustUpdateDeviceLine();
_hl = (__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("HL", _hl);
 BA.debugLineNum = 5543;BA.debugLine="x = Graph.Left + (HL.Value - Scale(sY(0)).MinVal";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_hl.getField(true,"Value" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 5545;BA.debugLine="If HL.DisplayValue = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_hl.getField(true,"DisplayValue" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 5546;BA.debugLine="Private rct, rct1 As B4XRect";
Debug.JustUpdateDeviceLine();
_rct = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rct", _rct);
_rct1 = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rct1", _rct1);
 BA.debugLineNum = 5547;BA.debugLine="rct = xcvsGraph.MeasureText(HL.Value, Texts.Sca";
Debug.JustUpdateDeviceLine();
_rct = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.NumberToString(_hl.getField(true,"Value" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rct", _rct);
 BA.debugLineNum = 5548;BA.debugLine="If mHChartsXScaleOnTop = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartsxscaleontop" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 5549;BA.debugLine="y = Graph.Bottom - 10dip";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "-",1, 1);Debug.locals.put("y", _y);
 BA.debugLineNum = 5550;BA.debugLine="x1 = x - rct.CenterY";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_x,_rct.runMethod(true,"getCenterY")}, "-",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 5551;BA.debugLine="rct1.Initialize(x1 - 1.1 * rct.Height, y - 1.1";
Debug.JustUpdateDeviceLine();
_rct1.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x1,RemoteObject.createImmutable(1.1),_rct.runMethod(true,"getHeight")}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.1),_rct.runMethod(true,"getWidth")}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x1,RemoteObject.createImmutable(0.1),_rct.runMethod(true,"getHeight")}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.1),_rct.runMethod(true,"getWidth")}, "+*",1, 0))));
 }else {
 BA.debugLineNum = 5553;BA.debugLine="y = Graph.Top + 10dip";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 1);Debug.locals.put("y", _y);
 BA.debugLineNum = 5554;BA.debugLine="x1 = x - rct.CenterY";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_x,_rct.runMethod(true,"getCenterY")}, "-",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 5555;BA.debugLine="rct1.Initialize(x1 - 1.1 * rct.Height, y - 1.1";
Debug.JustUpdateDeviceLine();
_rct1.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x1,RemoteObject.createImmutable(1.1),_rct.runMethod(true,"getHeight")}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.1),_rct.runMethod(true,"getWidth")}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x1,RemoteObject.createImmutable(0.1),_rct.runMethod(true,"getHeight")}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.1),_rct.runMethod(true,"getWidth")}, "+*",1, 0))));
 };
 BA.debugLineNum = 5557;BA.debugLine="xcvsGraph.DrawRect(rct1, Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rct1),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 5558;BA.debugLine="xcvsGraph.DrawTextRotated(HL.Value, x1, y, Text";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(BA.NumberToString(_hl.getField(true,"Value" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_hl.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"LEFT")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 5561;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawitemvalues(RemoteObject __ref,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("DrawItemValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,997);
if (RapidSub.canDelegate("drawitemvalues")) { return __ref.runUserSub(false, "xchart","drawitemvalues", __ref, _x, _y);}
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _index = RemoteObject.createImmutable(0);
RemoteObject _rectvalues1 = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _angle = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _total = RemoteObject.createImmutable(0);
RemoteObject _top = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _nb = RemoteObject.createImmutable(0);
RemoteObject _scientificdisplay = RemoteObject.createImmutable(false);
RemoteObject _xcursor = RemoteObject.createImmutable(0);
 BA.debugLineNum = 997;BA.debugLine="Private Sub DrawItemValues(x As Int, y As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 998;BA.debugLine="Private x1, y1 As Int";
Debug.JustUpdateDeviceLine();
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
 BA.debugLineNum = 1000;BA.debugLine="If Graph.ChartType = \"PIE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE"))) { 
 BA.debugLineNum = 1001;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 1004;BA.debugLine="Private Index As Int";
Debug.JustUpdateDeviceLine();
_index = RemoteObject.createImmutable(0);Debug.locals.put("Index", _index);
 BA.debugLineNum = 1005;BA.debugLine="xcvsValues.ClearRect(Values.rectValues)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectValues" /*RemoteObject*/ )));
 BA.debugLineNum = 1006;BA.debugLine="xcvsCursor.ClearRect(Values.rectCursor)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ )));
 BA.debugLineNum = 1007;BA.debugLine="Private rectValues1 As B4XRect";
Debug.JustUpdateDeviceLine();
_rectvalues1 = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectValues1", _rectvalues1);
 BA.debugLineNum = 1008;BA.debugLine="rectValues1.Initialize(Values.rectValues.Left - 1";
Debug.JustUpdateDeviceLine();
_rectvalues1.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectValues" /*RemoteObject*/ ).runMethod(true,"getLeft"),RemoteObject.createImmutable(1)}, "-",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectValues" /*RemoteObject*/ ).runMethod(true,"getTop")),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectValues" /*RemoteObject*/ ).runMethod(true,"getRight")),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectValues" /*RemoteObject*/ ).runMethod(true,"getBottom")));
 BA.debugLineNum = 1009;BA.debugLine="xcvsValues.DrawRect(rectValues1, Values.Backgroun";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rectvalues1),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"BackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 BA.debugLineNum = 1010;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR"),BA.ObjectToString("STACKED_BAR"),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"),BA.ObjectToString("H_BAR"),BA.ObjectToString("H_STACKED_BAR"),BA.ObjectToString("LINE"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("H_LINE"),BA.ObjectToString("RADAR"))) {
case 0: 
case 1: 
case 2: 
case 3: {
 BA.debugLineNum = 1012;BA.debugLine="Index =(x - Graph.Left - Graph.XOffset) / Graph";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ )}, "--",2, 1)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "/",0, 0));Debug.locals.put("Index", _index);
 break; }
case 4: 
case 5: {
 BA.debugLineNum = 1014;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1015;BA.debugLine="Index =(Graph.Bottom - y) / Graph.YInterval";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_y}, "-",1, 1)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "/",0, 0));Debug.locals.put("Index", _index);
 }else {
 BA.debugLineNum = 1017;BA.debugLine="Index =(y - Graph.Top) / Graph.YInterval";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 1)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "/",0, 0));Debug.locals.put("Index", _index);
 };
 break; }
case 6: 
case 7: 
case 8: {
 BA.debugLineNum = 1020;BA.debugLine="Index = (x - Graph.Left) / Scale(sX).Scale + 0.";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5)}, "/+",1, 0));Debug.locals.put("Index", _index);
 break; }
case 9: {
 BA.debugLineNum = 1022;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1023;BA.debugLine="Index = (Graph.Bottom - y) / Scale(sX).Scale +";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_y}, "-",1, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5)}, "/+",1, 0));Debug.locals.put("Index", _index);
 }else {
 BA.debugLineNum = 1025;BA.debugLine="Index = (y - Graph.Top) / Scale(sX).Scale + 0.";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5)}, "/+",1, 0));Debug.locals.put("Index", _index);
 };
 break; }
case 10: {
 BA.debugLineNum = 1028;BA.debugLine="Private Angle As Double";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.createImmutable(0);Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 1029;BA.debugLine="Angle = (ATan2D(y - Graph.CenterY, x - Graph.Ce";
Debug.JustUpdateDeviceLine();
_angle = (RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"ATan2D",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ )}, "-",1, 1))),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ )}, "-",1, 1)))),RemoteObject.createImmutable(360),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ )}, "+-",2, 0));Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 1030;BA.debugLine="If Angle < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_angle,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1031;BA.debugLine="Angle = Angle + 360";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.solve(new RemoteObject[] {_angle,RemoteObject.createImmutable(360)}, "+",1, 0);Debug.locals.put("Angle", _angle);
 }else 
{ BA.debugLineNum = 1032;BA.debugLine="Else If Angle > 360 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_angle,BA.numberCast(double.class, 360))) { 
 BA.debugLineNum = 1033;BA.debugLine="Angle = Angle - 360";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.solve(new RemoteObject[] {_angle,RemoteObject.createImmutable(360)}, "-",1, 0);Debug.locals.put("Angle", _angle);
 }}
;
 BA.debugLineNum = 1035;BA.debugLine="Index = Angle * Zoom.NbVisiblePoints / 360 + 0.";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_angle,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(360),RemoteObject.createImmutable(0.5)}, "*/+",1, 0));Debug.locals.put("Index", _index);
 BA.debugLineNum = 1036;BA.debugLine="Angle = 360 / Zoom.NbVisiblePoints * Index + Gr";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(360),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),_index,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ )}, "/*+",1, 0);Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 1037;BA.debugLine="x1 = Graph.CenterX + CosD(Angle) * Graph.Radius";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),xchart.__c.runMethod(true,"CosD",(Object)(_angle)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 1038;BA.debugLine="y1 = Graph.CenterY + SinD(Angle) * Graph.Radius";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),xchart.__c.runMethod(true,"SinD",(Object)(_angle)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y1", _y1);
 break; }
}
;
 BA.debugLineNum = 1040;BA.debugLine="If Index = Zoom.NbVisiblePoints Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_index,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 1041;BA.debugLine="Index = Index - 1";
Debug.JustUpdateDeviceLine();
_index = RemoteObject.solve(new RemoteObject[] {_index,RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("Index", _index);
 };
 BA.debugLineNum = 1043;BA.debugLine="Index = Max(Index, 0)";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _index)),(Object)(BA.numberCast(double.class, 0))));Debug.locals.put("Index", _index);
 BA.debugLineNum = 1044;BA.debugLine="Index = Min(Index, Zoom.NbVisiblePoints - 1)";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, _index)),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1)))));Debug.locals.put("Index", _index);
 BA.debugLineNum = 1045;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1046;BA.debugLine="PD = Points.Get(Index + Zoom.BeginIndex)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(RemoteObject.solve(new RemoteObject[] {_index,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "+",1, 1))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1047;BA.debugLine="Private h, i, x, y As Int";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 1048;BA.debugLine="h = Values.TextHeight * 1.3";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.3)}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 1049;BA.debugLine="x = Values.MidPont";
Debug.JustUpdateDeviceLine();
_x = __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MidPont" /*RemoteObject*/ );Debug.locals.put("x", _x);
 BA.debugLineNum = 1050;BA.debugLine="y = 1.2 * Values.TextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.2),__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 1052;BA.debugLine="If Values.Show = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1053;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 };
 BA.debugLineNum = 1055;BA.debugLine="If Values.Show = True Or Values.ShowCursor = True";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"ShowCursor" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"ShowOnHover" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1056;BA.debugLine="Private Total = 0 As Double";
Debug.JustUpdateDeviceLine();
_total = BA.numberCast(double.class, 0);Debug.locals.put("Total", _total);Debug.locals.put("Total", _total);
 BA.debugLineNum = 1057;BA.debugLine="Private top As Int";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.createImmutable(0);Debug.locals.put("top", _top);
 BA.debugLineNum = 1058;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 1076;BA.debugLine="xcvsValues.DrawText(PD.X, x, y + 0.2 * h, Values";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 1077;BA.debugLine="Private nb As Int";
Debug.JustUpdateDeviceLine();
_nb = RemoteObject.createImmutable(0);Debug.locals.put("nb", _nb);
 BA.debugLineNum = 1078;BA.debugLine="Private ScientificDisplay = True As Boolean";
Debug.JustUpdateDeviceLine();
_scientificdisplay = xchart.__c.getField(true,"True");Debug.locals.put("ScientificDisplay", _scientificdisplay);Debug.locals.put("ScientificDisplay", _scientificdisplay);
 BA.debugLineNum = 1079;BA.debugLine="nb = PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
_nb = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("nb", _nb);
 BA.debugLineNum = 1080;BA.debugLine="If Graph.ChartType = \"CANDLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"))) { 
 BA.debugLineNum = 1081;BA.debugLine="ScientificDisplay = False";
Debug.JustUpdateDeviceLine();
_scientificdisplay = xchart.__c.getField(true,"False");Debug.locals.put("ScientificDisplay", _scientificdisplay);
 BA.debugLineNum = 1082;BA.debugLine="If Bar.CandleDisplayVolume = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1083;BA.debugLine="nb = nb -1";
Debug.JustUpdateDeviceLine();
_nb = RemoteObject.solve(new RemoteObject[] {_nb,RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("nb", _nb);
 };
 BA.debugLineNum = 1085;BA.debugLine="For i = 0 To nb";
Debug.JustUpdateDeviceLine();
{
final int step68 = 1;
final int limit68 = _nb.<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step68 > 0 && _i.<Integer>get().intValue() <= limit68) || (step68 < 0 && _i.<Integer>get().intValue() >= limit68) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step68))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1086;BA.debugLine="top = y + h * (i + 1)";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_y,_h,(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "+",1, 1))}, "+*",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 1087;BA.debugLine="If i < 4 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_i,BA.numberCast(double.class, 4))) { 
 BA.debugLineNum = 1088;BA.debugLine="txt = NumberFormat2(PD.YArray(i), 1, 2, 2, Fa";
Debug.JustUpdateDeviceLine();
_txt = xchart.__c.runMethod(true,"NumberFormat2",(Object)(_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i)),(Object)(BA.numberCast(int.class, 1)),(Object)(BA.numberCast(int.class, 2)),(Object)(BA.numberCast(int.class, 2)),(Object)(xchart.__c.getField(true,"False")));Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 1090;BA.debugLine="txt = NumberFormat4(PD.YArray(i), Values.MaxD";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat4" /*RemoteObject*/ ,(Object)(_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )),(Object)(_scientificdisplay));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 1092;BA.debugLine="xcvsValues.DrawText(txt, x, top + 0.2 * h, Val";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 1093;BA.debugLine="Total = Total + PD.YArray(i)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i)}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 1096;BA.debugLine="For i = 0 To nb";
Debug.JustUpdateDeviceLine();
{
final int step79 = 1;
final int limit79 = _nb.<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step79 > 0 && _i.<Integer>get().intValue() <= limit79) || (step79 < 0 && _i.<Integer>get().intValue() >= limit79) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step79))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1097;BA.debugLine="top = y + h * (i + 1)";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_y,_h,(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "+",1, 1))}, "+*",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 1098;BA.debugLine="If PD.YArray(i) <> mMissingDataValue Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 1099;BA.debugLine="txt = NumberFormat4(PD.YArray(i), Values.MaxD";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat4" /*RemoteObject*/ ,(Object)(_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )),(Object)(_scientificdisplay));Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 1101;BA.debugLine="txt = \"NaN\"";
Debug.JustUpdateDeviceLine();
_txt = BA.ObjectToString("NaN");Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 1103;BA.debugLine="xcvsValues.DrawText(txt, x, top + 0.2 * h, Val";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 1104;BA.debugLine="Total = Total + PD.YArray(i)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i)}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 1107;BA.debugLine="If Graph.ChartType.Contains(\"STACKED\") Then";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"contains",(Object)(RemoteObject.createImmutable("STACKED"))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 1108;BA.debugLine="top = y + h * (i + 1)";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_y,_h,(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "+",1, 1))}, "+*",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 1109;BA.debugLine="xcvsValues.DrawText(NumberFormat3(Total, Values";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_total),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 };
 BA.debugLineNum = 1113;BA.debugLine="If (Graph.ChartType = \"LINE\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("STACKED_AREA"))))) && RemoteObject.solveBoolean("=",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 1114;BA.debugLine="top = top + 0.2 * h";
Debug.JustUpdateDeviceLine();
_top = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0));Debug.locals.put("top", _top);
 BA.debugLineNum = 1115;BA.debugLine="If Graph.IncludeMaxLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1116;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 1117;BA.debugLine="xcvsValues.DrawText(NumberFormat3(MinMaxMeanVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 };
 BA.debugLineNum = 1119;BA.debugLine="If Graph.IncludeMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1120;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 1121;BA.debugLine="xcvsValues.DrawText(NumberFormat3(MinMaxMeanVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 };
 BA.debugLineNum = 1123;BA.debugLine="If Graph.IncludeMinLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1124;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 1125;BA.debugLine="xcvsValues.DrawText(NumberFormat3(MinMaxMeanVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 };
 };
 BA.debugLineNum = 1132;BA.debugLine="Private xCursor As Int";
Debug.JustUpdateDeviceLine();
_xcursor = RemoteObject.createImmutable(0);Debug.locals.put("xCursor", _xcursor);
 BA.debugLineNum = 1133;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR"),BA.ObjectToString("STACKED_BAR"),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"),BA.ObjectToString("H_BAR"),BA.ObjectToString("H_STACKED_BAR"),BA.ObjectToString("LINE"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("H_LINE"),BA.ObjectToString("RADAR"))) {
case 0: 
case 1: 
case 2: 
case 3: {
 BA.debugLineNum = 1135;BA.debugLine="xCursor = (Index + 0.5) * Graph.XInterval + Gr";
Debug.JustUpdateDeviceLine();
_xcursor = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_index,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ )}, "*++",2, 0));Debug.locals.put("xCursor", _xcursor);
 BA.debugLineNum = 1136;BA.debugLine="xcvsCursor.DrawLine(xCursor, Graph.Top, xCurso";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _xcursor)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xcursor)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Red")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 1137;BA.debugLine="Values.rectCursor.Initialize(xCursor - 2dip, 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 break; }
case 4: 
case 5: {
 BA.debugLineNum = 1139;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1140;BA.debugLine="xCursor = Graph.Bottom - (Index + 0.5) * Grap";
Debug.JustUpdateDeviceLine();
_xcursor = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_index,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ )}, "-*-",2, 0));Debug.locals.put("xCursor", _xcursor);
 }else {
 BA.debugLineNum = 1142;BA.debugLine="xCursor = Graph.Top + (Index + 0.5) * Graph.Y";
Debug.JustUpdateDeviceLine();
_xcursor = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_index,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ )}, "+*+",2, 0));Debug.locals.put("xCursor", _xcursor);
 };
 BA.debugLineNum = 1144;BA.debugLine="xcvsCursor.DrawLine( Graph.Left, xCursor, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xcursor)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xcursor)),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Red")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 1145;BA.debugLine="Values.rectCursor.Initialize(0, xCursor - 2dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))));
 break; }
case 6: 
case 7: 
case 8: {
 BA.debugLineNum = 1147;BA.debugLine="xCursor = Index * Scale(sX).Scale + Graph.Left";
Debug.JustUpdateDeviceLine();
_xcursor = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_index,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "*+",1, 0));Debug.locals.put("xCursor", _xcursor);
 BA.debugLineNum = 1148;BA.debugLine="xcvsCursor.DrawLine(xCursor, Graph.Top, xCurso";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _xcursor)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xcursor)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Red")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 1149;BA.debugLine="Values.rectCursor.Initialize(xCursor - 2dip, 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 break; }
case 9: {
 BA.debugLineNum = 1151;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1152;BA.debugLine="xCursor = Graph.Bottom - Index * Graph.YInter";
Debug.JustUpdateDeviceLine();
_xcursor = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_index,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "-*",1, 1);Debug.locals.put("xCursor", _xcursor);
 }else {
 BA.debugLineNum = 1154;BA.debugLine="xCursor = Graph.Top + Index * Graph.YInterval";
Debug.JustUpdateDeviceLine();
_xcursor = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_index,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "+*",1, 1);Debug.locals.put("xCursor", _xcursor);
 };
 BA.debugLineNum = 1156;BA.debugLine="xcvsCursor.DrawLine( Graph.Left, xCursor, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xcursor)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xcursor)),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Red")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 1157;BA.debugLine="Values.rectCursor.Initialize(0, xCursor - 2dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xcursor,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))));
 break; }
case 10: {
 BA.debugLineNum = 1159;BA.debugLine="xcvsCursor.DrawLine(Graph.CenterX, Graph.Cente";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Red")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 1160;BA.debugLine="Values.rectCursor = xcvsCursor.TargetRect";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("rectCursor" /*RemoteObject*/ ,__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"getTargetRect"));
 break; }
}
;
 };
 BA.debugLineNum = 1163;BA.debugLine="xcvsValues.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 1164;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 1165;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawlegend(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawLegend (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6993);
if (RapidSub.canDelegate("drawlegend")) { return __ref.runUserSub(false, "xchart","drawlegend", __ref);}
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _w = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _box = RemoteObject.createImmutable(0);
RemoteObject _textverticaloffset = RemoteObject.createImmutable(0);
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _r = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _item = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _top = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 6993;BA.debugLine="Private Sub DrawLegend";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6994;BA.debugLine="Private y, y1, w, x As Int";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
_w = RemoteObject.createImmutable(0);Debug.locals.put("w", _w);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
 BA.debugLineNum = 6995;BA.debugLine="Private h As Int = 1.8 * Legend.TextHeight";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);Debug.locals.put("h", _h);
 BA.debugLineNum = 6996;BA.debugLine="Private box As Int = 0.8 * Legend.TextHeight";
Debug.JustUpdateDeviceLine();
_box = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.8),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("box", _box);Debug.locals.put("box", _box);
 BA.debugLineNum = 6997;BA.debugLine="Private textVerticalOffset As Int = 0.3 * Legend.";
Debug.JustUpdateDeviceLine();
_textverticaloffset = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.3),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("textVerticalOffset", _textverticaloffset);Debug.locals.put("textVerticalOffset", _textverticaloffset);
 BA.debugLineNum = 6998;BA.debugLine="If xui.IsB4i Then textVerticalOffset = 0.45 * Leg";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"getIsB4i").<Boolean>get().booleanValue()) { 
_textverticaloffset = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.45),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("textVerticalOffset", _textverticaloffset);};
 BA.debugLineNum = 6999;BA.debugLine="Private i As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
 BA.debugLineNum = 7000;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 7002;BA.debugLine="y = 1.2 * Legend.TextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.2),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 7003;BA.debugLine="y = Graph.Top + 0.5 * box + 2dip";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),_box,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+*+",2, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 7004;BA.debugLine="Select Legend.IncludeLegend";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("TOP_RIGHT"),BA.ObjectToString("BOTTOM"))) {
case 0: {
 BA.debugLineNum = 7006;BA.debugLine="h = Texts.AxisTextHeight * 1.2";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.2)}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 7007;BA.debugLine="For Each Item As ItemData In Items";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group13 = __ref.getField(false,"_items" /*RemoteObject*/ );
final int groupLen13 = group13.runMethod(true,"getSize").<Integer>get()
;int index13 = 0;
;
for (; index13 < groupLen13;index13++){
_item = (group13.runMethod(false,"Get",index13));Debug.locals.put("Item", _item);
Debug.locals.put("Item", _item);
 BA.debugLineNum = 7008;BA.debugLine="Private txt As String = Item.Name";
Debug.JustUpdateDeviceLine();
_txt = _item.getField(true,"Name" /*RemoteObject*/ );Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 7009;BA.debugLine="If Graph.ChartType = \"PIE\" And Graph.IncludeVa";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE")) && RemoteObject.solveBoolean(".",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 7010;BA.debugLine="txt = txt & \" : \" & NumberFormat3(Item.Value,";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_txt,RemoteObject.createImmutable(" : "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, _item.getField(true,"Value" /*RemoteObject*/ ))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 7012;BA.debugLine="w = Max(w, MeasureTextWidth(txt, Legend.TextFo";
Debug.JustUpdateDeviceLine();
_w = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _w)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("w", _w);
 }
}Debug.locals.put("Item", _item);
;
 BA.debugLineNum = 7014;BA.debugLine="w = w + 2 * box + Texts.AxisTextHeight";
Debug.JustUpdateDeviceLine();
_w = RemoteObject.solve(new RemoteObject[] {_w,RemoteObject.createImmutable(2),_box,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "+*+",2, 1);Debug.locals.put("w", _w);
 BA.debugLineNum = 7015;BA.debugLine="x = Graph.Right - w - 2dip";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_w,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1);Debug.locals.put("x", _x);
 BA.debugLineNum = 7016;BA.debugLine="r.Initialize(x - box, y - 0.5 * box, x + w, y +";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_box}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.5),_box}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_w}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_h,__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(0.5),_box}, "+*+*",2, 0))));
 BA.debugLineNum = 7017;BA.debugLine="If Graph.ChartBackgroundColor = xui.Color_Trans";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ ),BA.numberCast(double.class, __ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Transparent")))) { 
 BA.debugLineNum = 7018;BA.debugLine="xcvsGraph.DrawRect(r, Graph.ChartBackgroundCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 }else {
 BA.debugLineNum = 7020;BA.debugLine="xcvsGraph.DrawRect(r, Legend.BackgroundColor,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"BackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 };
 BA.debugLineNum = 7022;BA.debugLine="For Each Item As ItemData In Items";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group28 = __ref.getField(false,"_items" /*RemoteObject*/ );
final int groupLen28 = group28.runMethod(true,"getSize").<Integer>get()
;int index28 = 0;
;
for (; index28 < groupLen28;index28++){
_item = (group28.runMethod(false,"Get",index28));Debug.locals.put("Item", _item);
Debug.locals.put("Item", _item);
 BA.debugLineNum = 7023;BA.debugLine="Private top As Int = y + h * i";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_y,_h,_i}, "+*",1, 1);Debug.locals.put("top", _top);Debug.locals.put("top", _top);
 BA.debugLineNum = 7024;BA.debugLine="r.Initialize(x, top + 0.5 * h - 0.65 * box, x";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.5),_h,RemoteObject.createImmutable(0.65),_box}, "+*-*",2, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_box}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.5),_h,RemoteObject.createImmutable(0.35),_box}, "+*+*",2, 0))));
 BA.debugLineNum = 7025;BA.debugLine="xcvsGraph.DrawRect(r, Item.Color, True, 0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_item.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 BA.debugLineNum = 7026;BA.debugLine="Private txt As String = Item.Name";
Debug.JustUpdateDeviceLine();
_txt = _item.getField(true,"Name" /*RemoteObject*/ );Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 7027;BA.debugLine="If Graph.ChartType = \"PIE\" And Graph.IncludeVa";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE")) && RemoteObject.solveBoolean(".",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 7028;BA.debugLine="txt = txt & \" : \" & NumberFormat3(Item.Value,";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_txt,RemoteObject.createImmutable(" : "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, _item.getField(true,"Value" /*RemoteObject*/ ))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 7030;BA.debugLine="xcvsGraph.DrawText(txt, x + box + box, top + 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_box,_box}, "++",2, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.5),_h,_textverticaloffset}, "+*+",2, 0))),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 7031;BA.debugLine="i = i + 1";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("i", _i);
 }
}Debug.locals.put("Item", _item);
;
 break; }
case 1: {
 BA.debugLineNum = 7034;BA.debugLine="Private x, y0, y As Int";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 7035;BA.debugLine="Private i As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
 BA.debugLineNum = 7036;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 7038;BA.debugLine="y0  = xpnlGraph.Height - Legend.Height + 0.9 *";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.9),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "-+*",2, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 7039;BA.debugLine="x = box";
Debug.JustUpdateDeviceLine();
_x = _box;Debug.locals.put("x", _x);
 BA.debugLineNum = 7041;BA.debugLine="r.Initialize(0.5 * box, xpnlGraph.Height - Lege";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.5),_box}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),_box}, "--*",2, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(0.5),_box}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),RemoteObject.createImmutable(0.5),_box}, "-*",1, 0))));
 BA.debugLineNum = 7042;BA.debugLine="If Graph.ChartBackgroundColor = xui.Color_Trans";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ ),BA.numberCast(double.class, __ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Transparent")))) { 
 BA.debugLineNum = 7043;BA.debugLine="xcvsGraph.DrawRect(r, Graph.ChartBackgroundCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 }else {
 BA.debugLineNum = 7045;BA.debugLine="xcvsGraph.DrawRect(r, Legend.BackgroundColor,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"BackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 };
 BA.debugLineNum = 7048;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step51 = 1;
final int limit51 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step51 > 0 && _i.<Integer>get().intValue() <= limit51) || (step51 < 0 && _i.<Integer>get().intValue() >= limit51) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step51))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 7049;BA.debugLine="Private Item As ItemData";
Debug.JustUpdateDeviceLine();
_item = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("Item", _item);
 BA.debugLineNum = 7050;BA.debugLine="Item = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_item = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Item", _item);
 BA.debugLineNum = 7051;BA.debugLine="y = y0 + Legend.TextHeight * Legend.LineNumber";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y0,__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ ),BA.numberCast(double.class, __ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineNumbers" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)))}, "+*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 7052;BA.debugLine="Private txt As String = Item.Name";
Debug.JustUpdateDeviceLine();
_txt = _item.getField(true,"Name" /*RemoteObject*/ );Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 7053;BA.debugLine="If Graph.ChartType = \"PIE\" And Graph.IncludeVa";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE")) && RemoteObject.solveBoolean(".",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 7054;BA.debugLine="txt = txt & \" : \" & NumberFormat3(Item.Value,";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_txt,RemoteObject.createImmutable(" : "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, _item.getField(true,"Value" /*RemoteObject*/ ))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 7056;BA.debugLine="If Legend.LineChange.Get(i) = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineChange" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)),(xchart.__c.getField(true,"True")))) { 
 BA.debugLineNum = 7057;BA.debugLine="x = box";
Debug.JustUpdateDeviceLine();
_x = _box;Debug.locals.put("x", _x);
 };
 BA.debugLineNum = 7060;BA.debugLine="r.Initialize(x, y - box, x + box, y)";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_box}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_box}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 7061;BA.debugLine="xcvsGraph.DrawRect(r, Item.Color, True, 0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_item.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 BA.debugLineNum = 7062;BA.debugLine="Private txt As String = Item.Name";
Debug.JustUpdateDeviceLine();
_txt = _item.getField(true,"Name" /*RemoteObject*/ );Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 7063;BA.debugLine="If Graph.ChartType = \"PIE\" And Graph.IncludeVa";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE")) && RemoteObject.solveBoolean(".",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 7064;BA.debugLine="txt = txt & \" : \" & NumberFormat3(Item.Value,";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_txt,RemoteObject.createImmutable(" : "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, _item.getField(true,"Value" /*RemoteObject*/ ))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 7068;BA.debugLine="y1 = y '+ 0.1 * box";
Debug.JustUpdateDeviceLine();
_y1 = _y;Debug.locals.put("y1", _y1);
 BA.debugLineNum = 7074;BA.debugLine="xcvsGraph.DrawText(txt, x + 1.5 * box, y1, Leg";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,RemoteObject.createImmutable(1.5),_box}, "+*",1, 0))),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 7075;BA.debugLine="x = x + 2.5 * box + MeasureTextWidth(txt, Lege";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_x,RemoteObject.createImmutable(2.5),_box,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))}, "+*+",2, 0));Debug.locals.put("x", _x);
 }
}Debug.locals.put("i", _i);
;
 break; }
}
;
 BA.debugLineNum = 7078;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawlinesh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawLinesH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3782);
if (RapidSub.canDelegate("drawlinesh")) { return __ref.runUserSub(false, "xchart","drawlinesh", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _smax = RemoteObject.createImmutable(0);
RemoteObject _smin = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _lstcoords = RemoteObject.declareNull("anywheresoftware.b4a.objects.collections.List");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _coords = null;
RemoteObject _coords0 = null;
RemoteObject _coords1 = null;
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3782;BA.debugLine="Private Sub DrawLinesH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3783;BA.debugLine="Private i, ip, l As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
 BA.debugLineNum = 3785;BA.debugLine="If Items.Size = 1 And (MinMaxMeanValues(0) <> 0 O";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 1)) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 3786;BA.debugLine="Private sMax, sMin, sMean As Double";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.createImmutable(0);Debug.locals.put("sMax", _smax);
_smin = RemoteObject.createImmutable(0);Debug.locals.put("sMin", _smin);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 3787;BA.debugLine="If Graph.IncludeMinLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3788;BA.debugLine="sMin = Graph.Left + (MinMaxMeanValues(0) - Scal";
Debug.JustUpdateDeviceLine();
_smin = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0);Debug.locals.put("sMin", _smin);
 BA.debugLineNum = 3789;BA.debugLine="xcvsGraph.DrawLine(sMin, Graph.Top, sMin, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _smin)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smin)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MinLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3791;BA.debugLine="If Graph.IncludeMaxLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3792;BA.debugLine="sMax = Graph.Left + (MinMaxMeanValues(1) - Scal";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0);Debug.locals.put("sMax", _smax);
 BA.debugLineNum = 3793;BA.debugLine="xcvsGraph.DrawLine(sMax, Graph.Top, sMax, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _smax)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smax)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MaxLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3795;BA.debugLine="If Graph.IncludeMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3796;BA.debugLine="sMean = Graph.Left + (MinMaxMeanValues(2) - Sca";
Debug.JustUpdateDeviceLine();
_smean = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 3797;BA.debugLine="xcvsGraph.DrawLine(sMean, Graph.Top, sMean, Gra";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 BA.debugLineNum = 3801;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step17 = 1;
final int limit17 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step17 > 0 && _l.<Integer>get().intValue() <= limit17) || (step17 < 0 && _l.<Integer>get().intValue() >= limit17) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step17))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 3802;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 3803;BA.debugLine="Private lstCoords As List";
Debug.JustUpdateDeviceLine();
_lstcoords = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");Debug.locals.put("lstCoords", _lstcoords);
 BA.debugLineNum = 3805;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 3806;BA.debugLine="If ID.HideLine = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"HideLine" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3807;BA.debugLine="lstCoords.Initialize";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Initialize");
 BA.debugLineNum = 3808;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step23 = 1;
final int limit23 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step23 > 0 && _i.<Integer>get().intValue() <= limit23) || (step23 < 0 && _i.<Integer>get().intValue() >= limit23) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step23))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3809;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3811;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3812;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3813;BA.debugLine="If PD.YArray(l) <> mMissingDataValue Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 3814;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3815;BA.debugLine="Coords(0) = Graph.Left + (PD.YArray(l) - Scal";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 3816;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3817;BA.debugLine="Coords(1) = Graph.Bottom - ip * Graph.YInter";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_ip,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "-*",1, 1),BA.numberCast(int.class, 1));
 }else {
 BA.debugLineNum = 3819;BA.debugLine="Coords(1) = Graph.Top + ip * Graph.YInterval";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_ip,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "+*",1, 1),BA.numberCast(int.class, 1));
 };
 BA.debugLineNum = 3821;BA.debugLine="lstCoords.Add(Coords)";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Add",(Object)((_coords)));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3825;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing out";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 3827;BA.debugLine="For i = 1 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step39 = 1;
final int limit39 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step39 > 0 && _i.<Integer>get().intValue() <= limit39) || (step39 < 0 && _i.<Integer>get().intValue() >= limit39) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step39))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3828;BA.debugLine="Private Coords0(2), Coords1(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
_coords1 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 3829;BA.debugLine="Coords0 = lstCoords.Get(i - 1)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.runMethod(false,"Get",(Object)(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "-",1, 1))));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 3830;BA.debugLine="Coords1 = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords1 = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 3831;BA.debugLine="xcvsGraph.DrawLine(Coords0(0), Coords0(1), Coo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3833;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 3835;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 3836;BA.debugLine="For i = 0 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step47 = 1;
final int limit47 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step47 > 0 && _i.<Integer>get().intValue() <= limit47) || (step47 < 0 && _i.<Integer>get().intValue() >= limit47) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step47))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3837;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3838;BA.debugLine="Coords = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3839;BA.debugLine="DrawPoint(Coords(0), Coords(1), ID.PointColor";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 }
}Debug.locals.put("i", _i);
;
 };
 };
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 3845;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3846;BA.debugLine="Private mYAxis0 = Graph.Left - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 3847;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3848;BA.debugLine="xcvsGraph.DrawLine( mYAxis0, Graph.Top, mYAxis0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 3850;BA.debugLine="xcvsGraph.DrawLine( mYAxis0, Graph.Top, mYAxis0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 3854;BA.debugLine="If HLines.Size > 0 And Scale(sY(0)).Different = F";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 };
 BA.debugLineNum = 3858;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Zoom.NbVisi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3859;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3862;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 3863;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawlineslog(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawLinesLog (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4178);
if (RapidSub.canDelegate("drawlineslog")) { return __ref.runUserSub(false, "xchart","drawlineslog", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _cols = null;
RemoteObject _strokewidths = null;
RemoteObject _names = null;
RemoteObject _py0 = null;
RemoteObject _py1 = null;
RemoteObject _psy0 = null;
RemoteObject _psy1 = null;
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
int _j = 0;
 BA.debugLineNum = 4178;BA.debugLine="Private Sub DrawLinesLog";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4179;BA.debugLine="Private i As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
 BA.debugLineNum = 4180;BA.debugLine="Private x0, x1 As Int";
Debug.JustUpdateDeviceLine();
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
 BA.debugLineNum = 4182;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4183;BA.debugLine="Private Cols(Items.Size), StrokeWidths(Items.Size";
Debug.JustUpdateDeviceLine();
_cols = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Cols", _cols);
_strokewidths = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("StrokeWidths", _strokewidths);
 BA.debugLineNum = 4184;BA.debugLine="Private Names(Items.Size) As String";
Debug.JustUpdateDeviceLine();
_names = RemoteObject.createNewArray ("String", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Names", _names);
 BA.debugLineNum = 4186;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4187;BA.debugLine="x0 = Graph.Left";
Debug.JustUpdateDeviceLine();
_x0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ );Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4188;BA.debugLine="Private py0(PD.YArray.Length), py1(PD.YArray.Leng";
Debug.JustUpdateDeviceLine();
_py0 = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py0", _py0);
_py1 = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py1", _py1);
 BA.debugLineNum = 4189;BA.debugLine="Private psy0(PD.YArray.Length), psy1(PD.YArray.Le";
Debug.JustUpdateDeviceLine();
_psy0 = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("psy0", _psy0);
_psy1 = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("psy1", _psy1);
 BA.debugLineNum = 4190;BA.debugLine="py0 = PD.YArray";
Debug.JustUpdateDeviceLine();
_py0 = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py0", _py0);
 BA.debugLineNum = 4191;BA.debugLine="For i = 0 To py0.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step11 = 1;
final int limit11 = RemoteObject.solve(new RemoteObject[] {_py0.getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step11 > 0 && _i.<Integer>get().intValue() <= limit11) || (step11 < 0 && _i.<Integer>get().intValue() >= limit11) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step11))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4192;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 4193;BA.debugLine="ID = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4194;BA.debugLine="Cols(i) = ID.Color";
Debug.JustUpdateDeviceLine();
_cols.setArrayElement (_id.getField(true,"Color" /*RemoteObject*/ ),_i);
 BA.debugLineNum = 4195;BA.debugLine="Names(i) = ID.Name";
Debug.JustUpdateDeviceLine();
_names.setArrayElement (_id.getField(true,"Name" /*RemoteObject*/ ),_i);
 BA.debugLineNum = 4196;BA.debugLine="StrokeWidths(i) = ID.StrokeWidth";
Debug.JustUpdateDeviceLine();
_strokewidths.setArrayElement (_id.getField(true,"StrokeWidth" /*RemoteObject*/ ),_i);
 BA.debugLineNum = 4197;BA.debugLine="psy0(i) = Graph.Bottom - (Logarithm(py0(i), 10)";
Debug.JustUpdateDeviceLine();
_psy0.setArrayElement (RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Logarithm",(Object)(_py0.getArrayElement(true,_i)),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0),_i);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4200;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4201;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step20 = 1;
final int limit20 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step20 > 0 && _i.<Integer>get().intValue() <= limit20) || (step20 < 0 && _i.<Integer>get().intValue() >= limit20) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step20))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4202;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4203;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4204;BA.debugLine="py1 = PD.YArray";
Debug.JustUpdateDeviceLine();
_py1 = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py1", _py1);
 BA.debugLineNum = 4205;BA.debugLine="x1 = Graph.Left + i * Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 4206;BA.debugLine="For j = 0 To py1.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step25 = 1;
final int limit25 = RemoteObject.solve(new RemoteObject[] {_py1.getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = 0 ;
for (;(step25 > 0 && _j <= limit25) || (step25 < 0 && _j >= limit25) ;_j = ((int)(0 + _j + step25))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 4207;BA.debugLine="psy1(j) = Graph.Bottom - (Logarithm(py1(j), 10)";
Debug.JustUpdateDeviceLine();
_psy1.setArrayElement (RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Logarithm",(Object)(_py1.getArrayElement(true,BA.numberCast(int.class, _j))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0),BA.numberCast(int.class, _j));
 BA.debugLineNum = 4208;BA.debugLine="xcvsGraph.DrawLine(x0, psy0(j), x1, psy1(j), Co";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _psy0.getArrayElement(true,BA.numberCast(int.class, _j)))),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _psy1.getArrayElement(true,BA.numberCast(int.class, _j)))),(Object)(_cols.getArrayElement(true,BA.numberCast(int.class, _j))),(Object)(BA.numberCast(float.class, _strokewidths.getArrayElement(true,BA.numberCast(int.class, _j)))));
 BA.debugLineNum = 4209;BA.debugLine="psy0(j) = psy1(j)";
Debug.JustUpdateDeviceLine();
_psy0.setArrayElement (_psy1.getArrayElement(true,BA.numberCast(int.class, _j)),BA.numberCast(int.class, _j));
 }
}Debug.locals.put("j", _j);
;
 BA.debugLineNum = 4211;BA.debugLine="x0 = x1";
Debug.JustUpdateDeviceLine();
_x0 = _x1;Debug.locals.put("x0", _x0);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4213;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4215;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Zoom.NbVisi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4216;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4219;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 4220;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawlinesnscales(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawLinesNScales (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3866);
if (RapidSub.canDelegate("drawlinesnscales")) { return __ref.runUserSub(false, "xchart","drawlinesnscales", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _lstcoords = RemoteObject.declareNull("anywheresoftware.b4a.objects.collections.List");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _coords = null;
RemoteObject _coords0 = null;
RemoteObject _coords1 = null;
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3866;BA.debugLine="Private Sub DrawLinesNScales";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3867;BA.debugLine="Private i, ip, l As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
 BA.debugLineNum = 3869;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step2 = 1;
final int limit2 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step2 > 0 && _l.<Integer>get().intValue() <= limit2) || (step2 < 0 && _l.<Integer>get().intValue() >= limit2) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step2))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 3870;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 3871;BA.debugLine="Private lstCoords As List";
Debug.JustUpdateDeviceLine();
_lstcoords = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");Debug.locals.put("lstCoords", _lstcoords);
 BA.debugLineNum = 3873;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 3874;BA.debugLine="If ID.HideLine = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"HideLine" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3875;BA.debugLine="lstCoords.Initialize";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Initialize");
 BA.debugLineNum = 3876;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step8 = 1;
final int limit8 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step8 > 0 && _i.<Integer>get().intValue() <= limit8) || (step8 < 0 && _i.<Integer>get().intValue() >= limit8) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step8))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3877;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3879;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3880;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3881;BA.debugLine="If PD.YArray(l) <> mMissingDataValue Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 3882;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3883;BA.debugLine="Coords(0) = Graph.Left + ip * Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_ip,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 3884;BA.debugLine="If Scale(sY(l)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3885;BA.debugLine="Coords(1) = Graph.Bottom - (PD.YArray(l) - S";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0)),BA.numberCast(int.class, 1));
 }else {
 BA.debugLineNum = 3887;BA.debugLine="Coords(1) = Graph.Top + (PD.YArray(l) - Scal";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 1));
 };
 BA.debugLineNum = 3889;BA.debugLine="lstCoords.Add(Coords)";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Add",(Object)((_coords)));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3893;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing out";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 3895;BA.debugLine="For i = 1 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step24 = 1;
final int limit24 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step24 > 0 && _i.<Integer>get().intValue() <= limit24) || (step24 < 0 && _i.<Integer>get().intValue() >= limit24) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step24))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3896;BA.debugLine="Private Coords0(2), Coords1(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
_coords1 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 3897;BA.debugLine="Coords0 = lstCoords.Get(i - 1)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.runMethod(false,"Get",(Object)(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "-",1, 1))));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 3898;BA.debugLine="Coords1 = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords1 = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 3899;BA.debugLine="xcvsGraph.DrawLine(Coords0(0), Coords0(1), Coo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3901;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 3903;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 3904;BA.debugLine="For i = 0 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step32 = 1;
final int limit32 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step32 > 0 && _i.<Integer>get().intValue() <= limit32) || (step32 < 0 && _i.<Integer>get().intValue() >= limit32) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step32))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3905;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3906;BA.debugLine="Coords = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3907;BA.debugLine="DrawPoint(Coords(0), Coords(1), ID.PointColor";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 3911;BA.debugLine="If Scale(sY(l)).MinVal< 0 And Scale(sY(l)).MaxV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3912;BA.debugLine="Private mYAxis0 = Graph.Bottom + Scale(sY(l)).";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 3913;BA.debugLine="If Scale(sY(l)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3914;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 3916;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 3922;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Zoom.NbVisi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3923;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3926;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 3927;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawlinesv(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawLinesV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3698);
if (RapidSub.canDelegate("drawlinesv")) { return __ref.runUserSub(false, "xchart","drawlinesv", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _smax = RemoteObject.createImmutable(0);
RemoteObject _smin = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _lstcoords = RemoteObject.declareNull("anywheresoftware.b4a.objects.collections.List");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _coords = null;
RemoteObject _coords0 = null;
RemoteObject _coords1 = null;
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3698;BA.debugLine="Private Sub DrawLinesV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3699;BA.debugLine="Private i, ip, l As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
 BA.debugLineNum = 3701;BA.debugLine="If Items.Size = 1 And (MinMaxMeanValues(0) <> 0 O";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 1)) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 3702;BA.debugLine="Private sMax, sMin, sMean As Double";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.createImmutable(0);Debug.locals.put("sMax", _smax);
_smin = RemoteObject.createImmutable(0);Debug.locals.put("sMin", _smin);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 3703;BA.debugLine="If Graph.IncludeMinLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3704;BA.debugLine="sMin = Graph.Bottom - (MinMaxMeanValues(0) - Sc";
Debug.JustUpdateDeviceLine();
_smin = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMin", _smin);
 BA.debugLineNum = 3705;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMin, Graph.Righ";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smin)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smin)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MinLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3707;BA.debugLine="If Graph.IncludeMaxLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3708;BA.debugLine="sMax = Graph.Bottom - (MinMaxMeanValues(1) - Sc";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMax", _smax);
 BA.debugLineNum = 3709;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMax, Graph.Righ";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smax)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smax)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MaxLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3711;BA.debugLine="If Graph.IncludeMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3712;BA.debugLine="sMean = Graph.Bottom - (MinMaxMeanValues(2) - S";
Debug.JustUpdateDeviceLine();
_smean = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 3713;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMean, Graph.Rig";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 BA.debugLineNum = 3717;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step17 = 1;
final int limit17 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step17 > 0 && _l.<Integer>get().intValue() <= limit17) || (step17 < 0 && _l.<Integer>get().intValue() >= limit17) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step17))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 3718;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 3719;BA.debugLine="Private lstCoords As List";
Debug.JustUpdateDeviceLine();
_lstcoords = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");Debug.locals.put("lstCoords", _lstcoords);
 BA.debugLineNum = 3721;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 3722;BA.debugLine="If ID.HideLine = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"HideLine" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3723;BA.debugLine="lstCoords.Initialize";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Initialize");
 BA.debugLineNum = 3724;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step23 = 1;
final int limit23 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step23 > 0 && _i.<Integer>get().intValue() <= limit23) || (step23 < 0 && _i.<Integer>get().intValue() >= limit23) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step23))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3725;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3727;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3728;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3729;BA.debugLine="If PD.YArray(l) <> mMissingDataValue Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 3730;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3731;BA.debugLine="Coords(0) = Graph.Left + ip * Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_ip,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 3732;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3733;BA.debugLine="Coords(1) = Graph.Bottom - (PD.YArray(l) - S";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0)),BA.numberCast(int.class, 1));
 }else {
 BA.debugLineNum = 3735;BA.debugLine="Coords(1) = Graph.Top + (PD.YArray(l) - Scal";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 1));
 };
 BA.debugLineNum = 3737;BA.debugLine="lstCoords.Add(Coords)";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Add",(Object)((_coords)));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3741;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing out";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 3743;BA.debugLine="For i = 1 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step39 = 1;
final int limit39 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step39 > 0 && _i.<Integer>get().intValue() <= limit39) || (step39 < 0 && _i.<Integer>get().intValue() >= limit39) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step39))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3744;BA.debugLine="Private Coords0(2), Coords1(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
_coords1 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 3745;BA.debugLine="Coords0 = lstCoords.Get(i - 1)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.runMethod(false,"Get",(Object)(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "-",1, 1))));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 3746;BA.debugLine="Coords1 = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords1 = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 3747;BA.debugLine="xcvsGraph.DrawLine(Coords0(0), Coords0(1), Coo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 1)))),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3749;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 3751;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 3752;BA.debugLine="For i = 0 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step47 = 1;
final int limit47 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step47 > 0 && _i.<Integer>get().intValue() <= limit47) || (step47 < 0 && _i.<Integer>get().intValue() >= limit47) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step47))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3753;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3754;BA.debugLine="Coords = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 3755;BA.debugLine="DrawPoint(Coords(0), Coords(1), ID.PointColor";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 }
}Debug.locals.put("i", _i);
;
 };
 };
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 3761;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3762;BA.debugLine="Private mYAxis0 = Graph.Bottom + Scale(sY(0)).Mi";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 3763;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3764;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 3766;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 3770;BA.debugLine="If HLines.Size > 0 And Scale(sY(0)).Different = F";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3771;BA.debugLine="DrawHorizontalLinesValue";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawhorizontallinesvalue" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3774;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Zoom.NbVisi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3775;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3778;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 3779;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawpies(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawPies (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6527);
if (RapidSub.canDelegate("drawpies")) { return __ref.runUserSub(false, "xchart","drawpies", __ref);}
RemoteObject _total = RemoteObject.createImmutable(0f);
RemoteObject _item = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _xy = RemoteObject.createImmutable(0f);
RemoteObject _titleheight = RemoteObject.createImmutable(0);
RemoteObject _deltaheight = RemoteObject.createImmutable(0);
RemoteObject _radiustext = RemoteObject.createImmutable(0f);
RemoteObject _startangle = RemoteObject.createImmutable(0f);
RemoteObject _totalangle = RemoteObject.createImmutable(0f);
RemoteObject _midangle = RemoteObject.createImmutable(0f);
RemoteObject _rectcircle = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _mpath = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");
RemoteObject _angle = RemoteObject.createImmutable(0f);
RemoteObject _argb = RemoteObject.declareNull("b4a.example.bitmapcreator._argbcolor");
RemoteObject _bmpcreate = RemoteObject.declareNull("b4a.example.bitmapcreator");
RemoteObject _acol = RemoteObject.createImmutable(0);
RemoteObject _rb = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _bc1 = RemoteObject.declareNull("b4a.example.bitmapcreator");
RemoteObject _percentage = RemoteObject.createImmutable(0f);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
 BA.debugLineNum = 6527;BA.debugLine="Private Sub DrawPies";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6528;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.Ch";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6530;BA.debugLine="Dim Total As Float";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.createImmutable(0f);Debug.locals.put("Total", _total);
 BA.debugLineNum = 6531;BA.debugLine="For Each Item As ItemData In Items";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group3 = __ref.getField(false,"_items" /*RemoteObject*/ );
final int groupLen3 = group3.runMethod(true,"getSize").<Integer>get()
;int index3 = 0;
;
for (; index3 < groupLen3;index3++){
_item = (group3.runMethod(false,"Get",index3));Debug.locals.put("Item", _item);
Debug.locals.put("Item", _item);
 BA.debugLineNum = 6532;BA.debugLine="Total = Total + Item.Value";
Debug.JustUpdateDeviceLine();
_total = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_total,_item.getField(true,"Value" /*RemoteObject*/ )}, "+",1, 0));Debug.locals.put("Total", _total);
 }
}Debug.locals.put("Item", _item);
;
 BA.debugLineNum = 6535;BA.debugLine="Private xy As Float";
Debug.JustUpdateDeviceLine();
_xy = RemoteObject.createImmutable(0f);Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6536;BA.debugLine="Private TitleHeight = 0 As Int";
Debug.JustUpdateDeviceLine();
_titleheight = BA.numberCast(int.class, 0);Debug.locals.put("TitleHeight", _titleheight);Debug.locals.put("TitleHeight", _titleheight);
 BA.debugLineNum = 6537;BA.debugLine="Private DeltaHeight = 0 As Int";
Debug.JustUpdateDeviceLine();
_deltaheight = BA.numberCast(int.class, 0);Debug.locals.put("DeltaHeight", _deltaheight);Debug.locals.put("DeltaHeight", _deltaheight);
 BA.debugLineNum = 6539;BA.debugLine="If Graph.Title <> \"\" And Graph.Subtitle <> \"\" The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6540;BA.debugLine="TitleHeight = 1.7 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_titleheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.7),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("TitleHeight", _titleheight);
 BA.debugLineNum = 6541;BA.debugLine="If (Texts.TitleTextWidth + Texts.SubtitleTextWid";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextWidth" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 40)))}, "++",2, 1)),BA.numberCast(double.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth")))) { 
 }else {
 BA.debugLineNum = 6543;BA.debugLine="DeltaHeight = 1.5 * Texts.SubtitleTextHeight";
Debug.JustUpdateDeviceLine();
_deltaheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("DeltaHeight", _deltaheight);
 };
 }else 
{ BA.debugLineNum = 6545;BA.debugLine="Else If Graph.Title <> \"\" And Graph.Subtitle = \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6546;BA.debugLine="TitleHeight = 1.7 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_titleheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.7),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("TitleHeight", _titleheight);
 }else 
{ BA.debugLineNum = 6547;BA.debugLine="Else If Graph.Title = \"\" And Graph.Subtitle <> \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6548;BA.debugLine="TitleHeight = 1.7 * Texts.SubTitleTextHeight";
Debug.JustUpdateDeviceLine();
_titleheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.7),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("TitleHeight", _titleheight);
 }}}
;
 BA.debugLineNum = 6550;BA.debugLine="Graph.Radius = Min(xpnlGraph.Width, (Graph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Radius" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(double.class, (RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),_titleheight,_deltaheight}, "--",2, 1))))),RemoteObject.createImmutable(2),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "/-",1, 0)));
 BA.debugLineNum = 6552;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 6553;BA.debugLine="If xpnlGraph.Width > xpnlGraph.Height Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),BA.numberCast(double.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight")))) { 
 BA.debugLineNum = 6554;BA.debugLine="Graph.CenterX = Graph.Radius + 10dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterX" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 0)));
 }else {
 BA.debugLineNum = 6556;BA.debugLine="Graph.CenterX = xpnlGraph.Width / 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterX" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0)));
 };
 }else {
 BA.debugLineNum = 6559;BA.debugLine="Graph.CenterX = xpnlGraph.Width / 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterX" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0)));
 };
 BA.debugLineNum = 6561;BA.debugLine="Graph.CenterY = Graph.Height - Graph.Radius - 10d";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterY" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "--",2, 0)));
 BA.debugLineNum = 6563;BA.debugLine="If Graph.Title <> \"\" And Graph.Subtitle <> \"\" The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6564;BA.debugLine="If DeltaHeight = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_deltaheight,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6565;BA.debugLine="xy = (xpnlGraph.Width - Texts.TitleTextWidth -";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextWidth" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "---",3, 1)),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6566;BA.debugLine="xcvsGraph.DrawText(Graph.Title, xy, 1.3 * Texts";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(_xy),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 6567;BA.debugLine="xy = xy + Texts.TitleTextWidth + 20dip";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xy,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextWidth" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 20)))}, "++",2, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6568;BA.debugLine="xcvsGraph.DrawText(Graph.SubTitle, xy, 1.3 * Te";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(_xy),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 }else {
 BA.debugLineNum = 6570;BA.debugLine="xy = 1.3 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6571;BA.debugLine="xcvsGraph.DrawText(Graph.Title, xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(_xy),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 6572;BA.debugLine="xy = xy + 1.3 * Texts.SubTitleTextHeight";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xy,RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6573;BA.debugLine="xcvsGraph.DrawText(Graph.SubTitle, xpnlGraph.Wi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(_xy),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 }else 
{ BA.debugLineNum = 6575;BA.debugLine="Else If Graph.Title <> \"\" And Graph.Subtitle = \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6576;BA.debugLine="xcvsGraph.DrawText(Graph.Title, xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }else 
{ BA.debugLineNum = 6577;BA.debugLine="Else If Graph.Title = \"\" And Graph.Subtitle <> \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6578;BA.debugLine="xcvsGraph.DrawText(Graph.SubTitle, xpnlGraph.Wid";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }}}
;
 BA.debugLineNum = 6581;BA.debugLine="Private RadiusText As Float = Graph.Radius * 0.7";
Debug.JustUpdateDeviceLine();
_radiustext = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),RemoteObject.createImmutable(0.7)}, "*",0, 0));Debug.locals.put("RadiusText", _radiustext);Debug.locals.put("RadiusText", _radiustext);
 BA.debugLineNum = 6582;BA.debugLine="Private StartAngle, TotalAngle, MidAngle As Float";
Debug.JustUpdateDeviceLine();
_startangle = RemoteObject.createImmutable(0f);Debug.locals.put("StartAngle", _startangle);
_totalangle = RemoteObject.createImmutable(0f);Debug.locals.put("TotalAngle", _totalangle);
_midangle = RemoteObject.createImmutable(0f);Debug.locals.put("MidAngle", _midangle);
 BA.debugLineNum = 6583;BA.debugLine="TotalAngle = 360 - Graph.PieGapDegrees * Items.Si";
Debug.JustUpdateDeviceLine();
_totalangle = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(360),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieGapDegrees" /*RemoteObject*/ ),__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize")}, "-*",1, 1));Debug.locals.put("TotalAngle", _totalangle);
 BA.debugLineNum = 6584;BA.debugLine="Private rectCircle As B4XRect";
Debug.JustUpdateDeviceLine();
_rectcircle = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectCircle", _rectcircle);
 BA.debugLineNum = 6585;BA.debugLine="rectCircle.Initialize(Graph.CenterX - Graph.Radiu";
Debug.JustUpdateDeviceLine();
_rectcircle.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "-",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "-",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "+",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "+",1, 0))));
 BA.debugLineNum = 6587;BA.debugLine="StartAngle = Graph.PieStartAngle";
Debug.JustUpdateDeviceLine();
_startangle = BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieStartAngle" /*RemoteObject*/ ));Debug.locals.put("StartAngle", _startangle);
 BA.debugLineNum = 6588;BA.debugLine="For Each Item As ItemData In Items";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group54 = __ref.getField(false,"_items" /*RemoteObject*/ );
final int groupLen54 = group54.runMethod(true,"getSize").<Integer>get()
;int index54 = 0;
;
for (; index54 < groupLen54;index54++){
_item = (group54.runMethod(false,"Get",index54));Debug.locals.put("Item", _item);
Debug.locals.put("Item", _item);
 BA.debugLineNum = 6589;BA.debugLine="Private mPath As B4XPath";
Debug.JustUpdateDeviceLine();
_mpath = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("mPath", _mpath);
 BA.debugLineNum = 6590;BA.debugLine="Private Angle As Float = Item.Value / Total * To";
Debug.JustUpdateDeviceLine();
_angle = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_item.getField(true,"Value" /*RemoteObject*/ ),_total,_totalangle}, "/*",0, 0));Debug.locals.put("Angle", _angle);Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 6591;BA.debugLine="If Angle = TotalAngle Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_angle,BA.numberCast(double.class, _totalangle))) { 
 BA.debugLineNum = 6592;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 6593;BA.debugLine="xcvsGraph.DrawCircle(Graph.CenterX, Graph.Cent";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )),(Object)(_item.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 }else {
 };
 }else {
 BA.debugLineNum = 6597;BA.debugLine="Private ARGB As ARGBColor";
Debug.JustUpdateDeviceLine();
_argb = RemoteObject.createNew ("b4a.example.bitmapcreator._argbcolor");Debug.locals.put("ARGB", _argb);
 BA.debugLineNum = 6598;BA.debugLine="Private BmpCreate As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bmpcreate = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("BmpCreate", _bmpcreate);
 BA.debugLineNum = 6599;BA.debugLine="Private Acol As Int";
Debug.JustUpdateDeviceLine();
_acol = RemoteObject.createImmutable(0);Debug.locals.put("Acol", _acol);
 BA.debugLineNum = 6600;BA.debugLine="BmpCreate.Initialize(10, 10)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, 10)),(Object)(BA.numberCast(int.class, 10)));
 BA.debugLineNum = 6601;BA.debugLine="BmpCreate.ColorToARGB(Item.Color, ARGB)";
Debug.JustUpdateDeviceLine();
_bmpcreate.runVoidMethod ("_colortoargb",(Object)(_item.getField(true,"Color" /*RemoteObject*/ )),(Object)(_argb));
 BA.debugLineNum = 6602;BA.debugLine="Acol = xui.Color_ARGB(Graph.GradientColorsAlpha";
Debug.JustUpdateDeviceLine();
_acol = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ )),(Object)(_argb.getField(true,"r")),(Object)(_argb.getField(true,"g")),(Object)(_argb.getField(true,"b")));Debug.locals.put("Acol", _acol);
 BA.debugLineNum = 6604;BA.debugLine="mPath.InitializeArc(Graph.CenterX, Graph.Center";
Debug.JustUpdateDeviceLine();
_mpath.runVoidMethod ("InitializeArc",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )),(Object)(_startangle),(Object)(_angle));
 BA.debugLineNum = 6605;BA.debugLine="StartAngle = StartAngle + Angle + Graph.PieGapD";
Debug.JustUpdateDeviceLine();
_startangle = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_startangle,_angle,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieGapDegrees" /*RemoteObject*/ )}, "++",2, 0));Debug.locals.put("StartAngle", _startangle);
 BA.debugLineNum = 6606;BA.debugLine="xcvsGraph.ClipPath(mPath)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(_mpath));
 BA.debugLineNum = 6607;BA.debugLine="If Graph.GradientColors = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 6608;BA.debugLine="xcvsGraph.DrawCircle(Graph.CenterX, Graph.Cent";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )),(Object)(_item.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 }else {
 BA.debugLineNum = 6610;BA.debugLine="Private rb As B4XRect";
Debug.JustUpdateDeviceLine();
_rb = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rb", _rb);
 BA.debugLineNum = 6611;BA.debugLine="rb.Initialize(0, 0, 2 * Graph.Radius, 2 * Grap";
Debug.JustUpdateDeviceLine();
_rb.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 6612;BA.debugLine="Private bc1 As BitmapCreator";
Debug.JustUpdateDeviceLine();
_bc1 = RemoteObject.createNew ("b4a.example.bitmapcreator");Debug.locals.put("bc1", _bc1);
 BA.debugLineNum = 6613;BA.debugLine="bc1.Initialize(2 * Graph.Radius, 2 * Graph.Rad";
Debug.JustUpdateDeviceLine();
_bc1.runVoidMethod ("_initialize",__ref.getField(false, "ba"),(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 6614;BA.debugLine="bc1.FillRadialGradient(Array As Int(Acol, Item";
Debug.JustUpdateDeviceLine();
_bc1.runVoidMethod ("_fillradialgradient",(Object)(RemoteObject.createNewArray("int",new int[] {2},new Object[] {_acol,_item.getField(true,"Color" /*RemoteObject*/ )})),(Object)(_rb));
 BA.debugLineNum = 6615;BA.debugLine="xcvsGraph.DrawBitmap(bc1.Bitmap, rectCircle)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawBitmap",(Object)((_bc1.runMethod(false,"_getbitmap").getObject())),(Object)(_rectcircle));
 };
 BA.debugLineNum = 6617;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 };
 }
}Debug.locals.put("Item", _item);
;
 BA.debugLineNum = 6621;BA.debugLine="If Graph.PieAddPercentage Then";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieAddPercentage" /*RemoteObject*/ ).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 6622;BA.debugLine="Private Percentage As Float";
Debug.JustUpdateDeviceLine();
_percentage = RemoteObject.createImmutable(0f);Debug.locals.put("Percentage", _percentage);
 BA.debugLineNum = 6624;BA.debugLine="For Each Item As ItemData In Items";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group87 = __ref.getField(false,"_items" /*RemoteObject*/ );
final int groupLen87 = group87.runMethod(true,"getSize").<Integer>get()
;int index87 = 0;
;
for (; index87 < groupLen87;index87++){
_item = (group87.runMethod(false,"Get",index87));Debug.locals.put("Item", _item);
Debug.locals.put("Item", _item);
 BA.debugLineNum = 6625;BA.debugLine="Private mPath As B4XPath";
Debug.JustUpdateDeviceLine();
_mpath = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("mPath", _mpath);
 BA.debugLineNum = 6626;BA.debugLine="Private Angle As Float = Item.Value / Total * T";
Debug.JustUpdateDeviceLine();
_angle = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_item.getField(true,"Value" /*RemoteObject*/ ),_total,_totalangle}, "/*",0, 0));Debug.locals.put("Angle", _angle);Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 6627;BA.debugLine="If Angle = TotalAngle Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_angle,BA.numberCast(double.class, _totalangle))) { 
 BA.debugLineNum = 6628;BA.debugLine="xcvsGraph.DrawCircle(Graph.CenterX, Graph.Cent";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ )),(Object)(_item.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 }else {
 BA.debugLineNum = 6630;BA.debugLine="StartAngle = StartAngle + Angle + Graph.PieGap";
Debug.JustUpdateDeviceLine();
_startangle = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_startangle,_angle,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieGapDegrees" /*RemoteObject*/ )}, "++",2, 0));Debug.locals.put("StartAngle", _startangle);
 BA.debugLineNum = 6631;BA.debugLine="Private x, y As Int";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 6632;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 6633;BA.debugLine="MidAngle = StartAngle - Angle /2 - Graph.PieGa";
Debug.JustUpdateDeviceLine();
_midangle = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_startangle,_angle,RemoteObject.createImmutable(2),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieGapDegrees" /*RemoteObject*/ )}, "-/-",2, 0));Debug.locals.put("MidAngle", _midangle);
 BA.debugLineNum = 6634;BA.debugLine="x = Graph.CenterX + RadiusText * CosD(MidAngle";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),_radiustext,xchart.__c.runMethod(true,"CosD",(Object)(BA.numberCast(double.class, _midangle)))}, "+*",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 6635;BA.debugLine="y = Graph.CenterY + RadiusText * SinD(MidAngle";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),_radiustext,xchart.__c.runMethod(true,"SinD",(Object)(BA.numberCast(double.class, _midangle))),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+*+",2, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6636;BA.debugLine="Percentage = Item.Value / Total * 100";
Debug.JustUpdateDeviceLine();
_percentage = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_item.getField(true,"Value" /*RemoteObject*/ ),_total,RemoteObject.createImmutable(100)}, "/*",0, 0));Debug.locals.put("Percentage", _percentage);
 BA.debugLineNum = 6637;BA.debugLine="txt = NumberFormat2(Percentage, 1, mPiePercent";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(xchart.__c.runMethod(true,"NumberFormat2",(Object)(BA.numberCast(double.class, _percentage)),(Object)(BA.numberCast(int.class, 1)),(Object)(__ref.getField(true,"_mpiepercentagenbfractions" /*RemoteObject*/ )),(Object)(__ref.getField(true,"_mpiepercentagenbfractions" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False"))),RemoteObject.createImmutable(" %"));Debug.locals.put("txt", _txt);
 BA.debugLineNum = 6638;BA.debugLine="xcvsGraph.DrawText(txt, x, y, Texts.AxisFont,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ )),(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(_item.getField(true,"Color" /*RemoteObject*/ )))),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 }
}Debug.locals.put("Item", _item);
;
 };
 BA.debugLineNum = 6643;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Items.Size";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6644;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 6647;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 6648;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawpoint(RemoteObject __ref,RemoteObject _x,RemoteObject _y,RemoteObject _color,RemoteObject _pointtype,RemoteObject _filled,RemoteObject _strokewidth) throws Exception{
try {
		Debug.PushSubsStack("DrawPoint (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4223);
if (RapidSub.canDelegate("drawpoint")) { return __ref.runUserSub(false, "xchart","drawpoint", __ref, _x, _y, _color, _pointtype, _filled, _strokewidth);}
RemoteObject _dx = RemoteObject.createImmutable(0);
RemoteObject _r = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _tripath = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
Debug.locals.put("Color", _color);
Debug.locals.put("PointType", _pointtype);
Debug.locals.put("Filled", _filled);
Debug.locals.put("StrokeWidth", _strokewidth);
 BA.debugLineNum = 4223;BA.debugLine="Private Sub DrawPoint(X As Int, Y As Int, Color As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4224;BA.debugLine="Private dx As Int";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.createImmutable(0);Debug.locals.put("dx", _dx);
 BA.debugLineNum = 4226;BA.debugLine="If x < Graph.Left Or x > Graph.Right Or Y < Graph";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) || RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))) || RemoteObject.solveBoolean("<",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) || RemoteObject.solveBoolean(">",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 4227;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 4230;BA.debugLine="dx = Max(4dip, 1.4 * StrokeWidth)";
Debug.JustUpdateDeviceLine();
_dx = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))))),(Object)(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.4),_strokewidth}, "*",0, 0))));Debug.locals.put("dx", _dx);
 BA.debugLineNum = 4231;BA.debugLine="Select PointType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(_pointtype,BA.ObjectToString("CIRCLE"),BA.ObjectToString("SQUARE"),BA.ObjectToString("TRIANGLE"),BA.ObjectToString("RHOMBUS"),BA.ObjectToString("CROSS+"),BA.ObjectToString("CROSSX"),BA.ObjectToString("CROSSx"))) {
case 0: {
 BA.debugLineNum = 4233;BA.debugLine="If Filled = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_filled,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4234;BA.debugLine="xcvsGraph.DrawCircle(X, Y, dx, Graph.ChartBack";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _dx)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4235;BA.debugLine="xcvsGraph.DrawCircle(X, Y, dx, Color, Filled,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _dx)),(Object)(_color),(Object)(_filled),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4237;BA.debugLine="xcvsGraph.DrawCircle(X, Y, dx, Color, True, 2d";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _dx)),(Object)(_color),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4238;BA.debugLine="xcvsGraph.DrawCircle(X, Y, dx, Color, False, 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _dx)),(Object)(_color),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 break; }
case 1: {
 BA.debugLineNum = 4241;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 4242;BA.debugLine="r.Initialize(X - dx, Y - dx, X + dx, Y + dx)";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))));
 BA.debugLineNum = 4243;BA.debugLine="If Filled = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_filled,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4244;BA.debugLine="xcvsGraph.DrawRect(r, Graph.ChartBackgroundCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4245;BA.debugLine="xcvsGraph.DrawRect(r, Color, Filled, 2dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_color),(Object)(_filled),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4247;BA.debugLine="xcvsGraph.DrawRect(r, Color, True, 2dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_color),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4248;BA.debugLine="xcvsGraph.DrawRect(r, Color, False, 2dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_color),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 break; }
case 2: {
 BA.debugLineNum = 4251;BA.debugLine="Private triPath As B4XPath";
Debug.JustUpdateDeviceLine();
_tripath = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("triPath", _tripath);
 BA.debugLineNum = 4252;BA.debugLine="triPath.Initialize(X - dx, Y + 0.8 * dx)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.8),_dx}, "+*",1, 0))));
 BA.debugLineNum = 4253;BA.debugLine="triPath.LineTo(X, Y - 1.2 * dx)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.2),_dx}, "-*",1, 0))));
 BA.debugLineNum = 4254;BA.debugLine="triPath.LineTo(X + dx, Y + 0.8 * dx)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.8),_dx}, "+*",1, 0))));
 BA.debugLineNum = 4255;BA.debugLine="triPath.LineTo(X - dx, Y + 0.8 * dx)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.8),_dx}, "+*",1, 0))));
 BA.debugLineNum = 4256;BA.debugLine="xcvsGraph.ClipPath(triPath)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(_tripath));
 BA.debugLineNum = 4257;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 4258;BA.debugLine="r.Initialize(X - dx, Y - dx, X + dx, Y + dx)";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))));
 BA.debugLineNum = 4260;BA.debugLine="If Filled = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_filled,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4261;BA.debugLine="xcvsGraph.DrawRect(r, Graph.ChartBackgroundCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4262;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4263;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y + dx, X, Y - dx,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4264;BA.debugLine="xcvsGraph.DrawLine(X, Y - dx, X + dx, Y + dx,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4265;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y + dx, X + dx, Y +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4267;BA.debugLine="xcvsGraph.DrawRect(r, Color, True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_color),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4268;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4269;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y + dx, X, Y - dx,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4270;BA.debugLine="xcvsGraph.DrawLine(X, Y - dx, X + dx, Y + dx,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4271;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y + dx, X + dx, Y +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 break; }
case 3: {
 BA.debugLineNum = 4274;BA.debugLine="Private triPath As B4XPath";
Debug.JustUpdateDeviceLine();
_tripath = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("triPath", _tripath);
 BA.debugLineNum = 4275;BA.debugLine="triPath.Initialize(X - dx, Y)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 4276;BA.debugLine="triPath.LineTo(X, Y -  dx)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))));
 BA.debugLineNum = 4277;BA.debugLine="triPath.LineTo(X + dx, Y)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 4278;BA.debugLine="triPath.LineTo(X, Y + dx)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))));
 BA.debugLineNum = 4279;BA.debugLine="triPath.LineTo(X - dx, Y)";
Debug.JustUpdateDeviceLine();
_tripath.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 4280;BA.debugLine="xcvsGraph.ClipPath(triPath)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(_tripath));
 BA.debugLineNum = 4281;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 4282;BA.debugLine="r.Initialize(X - dx, Y - dx, X + dx, Y + dx)";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))));
 BA.debugLineNum = 4284;BA.debugLine="If Filled = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_filled,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4285;BA.debugLine="xcvsGraph.DrawRect(r, Graph.ChartBackgroundCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4286;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4287;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y, X, Y - dx, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4288;BA.debugLine="xcvsGraph.DrawLine(X, Y - dx, X + dx, Y, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4289;BA.debugLine="xcvsGraph.DrawLine(X + dx, Y, X, Y + dx, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4290;BA.debugLine="xcvsGraph.DrawLine(X, Y + dx, X - dx, Y, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4292;BA.debugLine="xcvsGraph.DrawRect(r, Color, True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(_color),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4293;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4294;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y, X, Y - dx, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4295;BA.debugLine="xcvsGraph.DrawLine(X, Y - dx, X + dx, Y, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4296;BA.debugLine="xcvsGraph.DrawLine(X + dx, Y, X, Y + dx, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4297;BA.debugLine="xcvsGraph.DrawLine(X, Y + dx, X - dx, Y, Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 break; }
case 4: {
 BA.debugLineNum = 4300;BA.debugLine="dx = dx + 1dip";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.solve(new RemoteObject[] {_dx,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1);Debug.locals.put("dx", _dx);
 BA.debugLineNum = 4301;BA.debugLine="xcvsGraph.DrawLine(X, Y - dx, X, Y + dx, Color,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4302;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y, X + dx, Y, Color,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 break; }
case 5: 
case 6: {
 BA.debugLineNum = 4304;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y + dx, X + dx, Y -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4305;BA.debugLine="xcvsGraph.DrawLine(X - dx, Y - dx, X + dx, Y +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_dx}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dx}, "+",1, 1))),(Object)(_color),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 break; }
}
;
 BA.debugLineNum = 4307;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawradar(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawRadar (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6651);
if (RapidSub.canDelegate("drawradar")) { return __ref.runUserSub(false, "xchart","drawradar", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _j = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _xt = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _dy = RemoteObject.createImmutable(0);
RemoteObject _dy0 = RemoteObject.createImmutable(0);
RemoteObject _cols = null;
RemoteObject _acols = null;
RemoteObject _names = null;
RemoteObject _angledelta = RemoteObject.createImmutable(0);
RemoteObject _widthlabel = RemoteObject.createImmutable(0f);
RemoteObject _xy = RemoteObject.createImmutable(0f);
RemoteObject _titleheight = RemoteObject.createImmutable(0);
RemoteObject _deltaheight = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _rr = RemoteObject.createImmutable(0);
RemoteObject _dr = RemoteObject.createImmutable(0);
RemoteObject _align = RemoteObject.createImmutable("");
RemoteObject _radarscale = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _pth = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _dy1 = RemoteObject.createImmutable(0f);
RemoteObject _step1 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 6651;BA.debugLine="Private Sub DrawRadar";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6652;BA.debugLine="Private i, j, x0, x1, xt, y0, y1, dy, dy0 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_j = RemoteObject.createImmutable(0);Debug.locals.put("j", _j);
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_xt = RemoteObject.createImmutable(0);Debug.locals.put("xt", _xt);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
_dy0 = RemoteObject.createImmutable(0);Debug.locals.put("dy0", _dy0);
 BA.debugLineNum = 6653;BA.debugLine="Private Cols(Items.Size), ACols(Items.Size) As In";
Debug.JustUpdateDeviceLine();
_cols = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Cols", _cols);
_acols = RemoteObject.createNewArray ("int", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("ACols", _acols);
 BA.debugLineNum = 6654;BA.debugLine="Private Names(Items.Size) As String";
Debug.JustUpdateDeviceLine();
_names = RemoteObject.createNewArray ("String", new int[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Names", _names);
 BA.debugLineNum = 6655;BA.debugLine="Private AngleDelta As Double";
Debug.JustUpdateDeviceLine();
_angledelta = RemoteObject.createImmutable(0);Debug.locals.put("AngleDelta", _angledelta);
 BA.debugLineNum = 6657;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.Ch";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6659;BA.debugLine="Private WidthLabel, xy As Float";
Debug.JustUpdateDeviceLine();
_widthlabel = RemoteObject.createImmutable(0f);Debug.locals.put("WidthLabel", _widthlabel);
_xy = RemoteObject.createImmutable(0f);Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6660;BA.debugLine="Private TitleHeight = 0 As Int";
Debug.JustUpdateDeviceLine();
_titleheight = BA.numberCast(int.class, 0);Debug.locals.put("TitleHeight", _titleheight);Debug.locals.put("TitleHeight", _titleheight);
 BA.debugLineNum = 6661;BA.debugLine="Private DeltaHeight = 0 As Int";
Debug.JustUpdateDeviceLine();
_deltaheight = BA.numberCast(int.class, 0);Debug.locals.put("DeltaHeight", _deltaheight);Debug.locals.put("DeltaHeight", _deltaheight);
 BA.debugLineNum = 6663;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6664;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step10 = 1;
final int limit10 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step10 > 0 && _i.<Integer>get().intValue() <= limit10) || (step10 < 0 && _i.<Integer>get().intValue() >= limit10) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step10))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6665;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6666;BA.debugLine="WidthLabel = Max(WidthLabel, MeasureTextWidth(PD";
Debug.JustUpdateDeviceLine();
_widthlabel = BA.numberCast(float.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _widthlabel)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("WidthLabel", _widthlabel);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 6669;BA.debugLine="If Graph.Title <> \"\" And Graph.Subtitle <> \"\" The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6670;BA.debugLine="TitleHeight = 2 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_titleheight = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 1);Debug.locals.put("TitleHeight", _titleheight);
 BA.debugLineNum = 6671;BA.debugLine="If (Texts.TitleTextWidth + Texts.SubtitleTextWid";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextWidth" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 40)))}, "++",2, 1)),BA.numberCast(double.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth")))) { 
 }else {
 BA.debugLineNum = 6673;BA.debugLine="DeltaHeight = 1 * Texts.SubtitleTextHeight";
Debug.JustUpdateDeviceLine();
_deltaheight = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "*",0, 1);Debug.locals.put("DeltaHeight", _deltaheight);
 };
 }else 
{ BA.debugLineNum = 6675;BA.debugLine="Else If Graph.Title <> \"\" And Graph.Subtitle = \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6676;BA.debugLine="TitleHeight = 2 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_titleheight = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 1);Debug.locals.put("TitleHeight", _titleheight);
 }else 
{ BA.debugLineNum = 6677;BA.debugLine="Else If Graph.Title = \"\" And Graph.Subtitle <> \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6678;BA.debugLine="TitleHeight = 2 * Texts.SubTitleTextHeight";
Debug.JustUpdateDeviceLine();
_titleheight = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "*",0, 1);Debug.locals.put("TitleHeight", _titleheight);
 }else {
 BA.debugLineNum = 6680;BA.debugLine="TitleHeight = 2.2 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_titleheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("TitleHeight", _titleheight);
 }}}
;
 BA.debugLineNum = 6682;BA.debugLine="Graph.Radius = Min((Graph.Width - 2 * (WidthLabel";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Radius" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Min",(Object)((RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2),(RemoteObject.solve(new RemoteObject[] {_widthlabel,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "+",1, 0))}, "-*",1, 0))),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),_titleheight,_deltaheight}, "--",2, 1)))),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 6683;BA.debugLine="xpnlValues.Top = Graph.Top";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setTop",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ));
 BA.debugLineNum = 6685;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 6686;BA.debugLine="If Graph.Width > Graph.Height Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 6687;BA.debugLine="Graph.CenterX = Graph.Radius + Texts.ScaleTextH";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterX" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_widthlabel}, "++",2, 0)));
 BA.debugLineNum = 6688;BA.debugLine="Graph.Right = Graph.CenterX + Graph.Radius + Te";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_widthlabel}, "+++",3, 0)));
 }else {
 BA.debugLineNum = 6690;BA.debugLine="Graph.CenterX = xpnlGraph.Width / 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterX" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 6691;BA.debugLine="Graph.Right = xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"));
 };
 }else {
 BA.debugLineNum = 6694;BA.debugLine="Graph.CenterX = xpnlGraph.Width / 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterX" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 6695;BA.debugLine="Graph.Right = xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"));
 };
 BA.debugLineNum = 6698;BA.debugLine="Graph.CenterY = (Graph.Top + TitleHeight + DeltaH";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("CenterY" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_titleheight,_deltaheight,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "++++-",5, 1)),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 6701;BA.debugLine="If Graph.Title <> \"\" And Graph.Subtitle <> \"\" The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6702;BA.debugLine="If DeltaHeight = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_deltaheight,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6703;BA.debugLine="xy = (xpnlGraph.Width - Texts.TitleTextWidth -";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextWidth" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "---",3, 1)),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6704;BA.debugLine="xcvsGraph.DrawText(Graph.Title, xy, 1.3 * Texts";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(_xy),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 6705;BA.debugLine="xy = xy + Texts.TitleTextWidth + 20dip";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xy,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextWidth" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 20)))}, "++",2, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6706;BA.debugLine="xcvsGraph.DrawText(Graph.SubTitle, xy, 1.3 * Te";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(_xy),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 }else {
 BA.debugLineNum = 6708;BA.debugLine="xy = 1.3 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6709;BA.debugLine="xcvsGraph.DrawText(Graph.Title, xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(_xy),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 6710;BA.debugLine="xy = xy + 1.3 * Texts.SubTitleTextHeight";
Debug.JustUpdateDeviceLine();
_xy = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xy,RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("xy", _xy);
 BA.debugLineNum = 6711;BA.debugLine="xcvsGraph.DrawText(Graph.SubTitle, xpnlGraph.Wi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(_xy),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 };
 }else 
{ BA.debugLineNum = 6713;BA.debugLine="Else If Graph.Title <> \"\" And Graph.Subtitle = \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6714;BA.debugLine="xcvsGraph.DrawText(Graph.Title, xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }else 
{ BA.debugLineNum = 6715;BA.debugLine="Else If Graph.Title = \"\" And Graph.Subtitle <> \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 6716;BA.debugLine="xcvsGraph.DrawText(Graph.SubTitle, xpnlGraph.Wid";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2)}, "/",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "*",0, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }}}
;
 BA.debugLineNum = 6719;BA.debugLine="AngleDelta = 360 / Zoom.NbVisiblePoints";
Debug.JustUpdateDeviceLine();
_angledelta = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(360),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "/",0, 0);Debug.locals.put("AngleDelta", _angledelta);
 BA.debugLineNum = 6722;BA.debugLine="If Graph.RadarDrawScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarDrawScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 6723;BA.debugLine="Private rr As Int";
Debug.JustUpdateDeviceLine();
_rr = RemoteObject.createImmutable(0);Debug.locals.put("rr", _rr);
 BA.debugLineNum = 6724;BA.debugLine="Private dr As Double";
Debug.JustUpdateDeviceLine();
_dr = RemoteObject.createImmutable(0);Debug.locals.put("dr", _dr);
 BA.debugLineNum = 6725;BA.debugLine="dr = Graph.Radius / Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
_dr = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0);Debug.locals.put("dr", _dr);
 BA.debugLineNum = 6726;BA.debugLine="Select Graph.RadarScaleType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarScaleType" /*RemoteObject*/ ),BA.ObjectToString("SPIDER"),BA.ObjectToString("CIRCLE"))) {
case 0: {
 BA.debugLineNum = 6728;BA.debugLine="For i = 1 To Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
{
final int step66 = 1;
final int limit66 = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step66 > 0 && _i.<Integer>get().intValue() <= limit66) || (step66 < 0 && _i.<Integer>get().intValue() >= limit66) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step66))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6729;BA.debugLine="rr = i * dr";
Debug.JustUpdateDeviceLine();
_rr = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_i,_dr}, "*",0, 0));Debug.locals.put("rr", _rr);
 BA.debugLineNum = 6730;BA.debugLine="x0 = Graph.CenterX + rr * CosD(Graph.RadarSta";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),_rr,xchart.__c.runMethod(true,"CosD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 6731;BA.debugLine="y0 = Graph.CenterY + rr * SinD(Graph.RadarSta";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),_rr,xchart.__c.runMethod(true,"SinD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 6732;BA.debugLine="For j = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step70 = 1;
final int limit70 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_j = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step70 > 0 && _j.<Integer>get().intValue() <= limit70) || (step70 < 0 && _j.<Integer>get().intValue() >= limit70) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step70))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 6733;BA.debugLine="x1 = Graph.CenterX + rr * CosD(Graph.RadarSt";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),_rr,xchart.__c.runMethod(true,"CosD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+*",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 6734;BA.debugLine="y1 = Graph.CenterY + rr * SinD(Graph.RadarSt";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),_rr,xchart.__c.runMethod(true,"SinD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+*",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 6735;BA.debugLine="xcvsGraph.DrawLine(x0, y0, x1, y1, Graph.Gri";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6736;BA.debugLine="x0 = x1";
Debug.JustUpdateDeviceLine();
_x0 = _x1;Debug.locals.put("x0", _x0);
 BA.debugLineNum = 6737;BA.debugLine="y0 = y1";
Debug.JustUpdateDeviceLine();
_y0 = _y1;Debug.locals.put("y0", _y0);
 }
}Debug.locals.put("j", _j);
;
 BA.debugLineNum = 6739;BA.debugLine="x1 = Graph.CenterX + rr * CosD(Graph.RadarSta";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),_rr,xchart.__c.runMethod(true,"CosD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+*",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 6740;BA.debugLine="y1 = Graph.CenterY + rr * SinD(Graph.RadarSta";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),_rr,xchart.__c.runMethod(true,"SinD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+*",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 6741;BA.debugLine="xcvsGraph.DrawLine(x0, y0, x1, y1, Graph.Grid";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }
}Debug.locals.put("i", _i);
;
 break; }
case 1: {
 BA.debugLineNum = 6744;BA.debugLine="For i = 1 To Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
{
final int step82 = 1;
final int limit82 = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step82 > 0 && _i.<Integer>get().intValue() <= limit82) || (step82 < 0 && _i.<Integer>get().intValue() >= limit82) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step82))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6745;BA.debugLine="rr = i * dr";
Debug.JustUpdateDeviceLine();
_rr = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_i,_dr}, "*",0, 0));Debug.locals.put("rr", _rr);
 BA.debugLineNum = 6746;BA.debugLine="xcvsGraph.DrawCircle(Graph.CenterX, Graph.Cen";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _rr)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }
}Debug.locals.put("i", _i);
;
 break; }
}
;
 };
 BA.debugLineNum = 6752;BA.debugLine="Private Align As String";
Debug.JustUpdateDeviceLine();
_align = RemoteObject.createImmutable("");Debug.locals.put("Align", _align);
 BA.debugLineNum = 6753;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step89 = 1;
final int limit89 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step89 > 0 && _i.<Integer>get().intValue() <= limit89) || (step89 < 0 && _i.<Integer>get().intValue() >= limit89) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step89))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6754;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6755;BA.debugLine="x1 = Graph.CenterX + Graph.Radius * CosD(Graph.R";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),xchart.__c.runMethod(true,"CosD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_i}, "+*",1, 0)))}, "+*",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 6756;BA.debugLine="y1 = Graph.CenterY + Graph.Radius * SinD(Graph.R";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),xchart.__c.runMethod(true,"SinD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_i}, "+*",1, 0)))}, "+*",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 6757;BA.debugLine="xcvsGraph.DrawLine(Graph.CenterX, Graph.CenterY,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6758;BA.debugLine="dy0 = Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_dy0 = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ );Debug.locals.put("dy0", _dy0);
 BA.debugLineNum = 6759;BA.debugLine="dy = 0.3 * Texts.ScaleTextHeight + dy0 * SinD(Gr";
Debug.JustUpdateDeviceLine();
_dy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_dy0,xchart.__c.runMethod(true,"SinD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_i}, "+*",1, 0)))}, "*+*",1, 0));Debug.locals.put("dy", _dy);
 BA.debugLineNum = 6760;BA.debugLine="If Abs(x1 - Graph.CenterX) < 20dip Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_x1,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ )}, "-",1, 1)))),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 20)))))) { 
 BA.debugLineNum = 6761;BA.debugLine="Align = \"CENTER\"";
Debug.JustUpdateDeviceLine();
_align = BA.ObjectToString("CENTER");Debug.locals.put("Align", _align);
 BA.debugLineNum = 6762;BA.debugLine="xt = x1";
Debug.JustUpdateDeviceLine();
_xt = _x1;Debug.locals.put("xt", _xt);
 }else 
{ BA.debugLineNum = 6763;BA.debugLine="Else If x1 > (Graph.CenterX + 10dip) Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x1,BA.numberCast(double.class, (RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 1))))) { 
 BA.debugLineNum = 6764;BA.debugLine="Align = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_align = BA.ObjectToString("LEFT");Debug.locals.put("Align", _align);
 BA.debugLineNum = 6765;BA.debugLine="xt = x1 + 5dip";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x1,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("xt", _xt);
 }else {
 BA.debugLineNum = 6767;BA.debugLine="Align = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_align = BA.ObjectToString("RIGHT");Debug.locals.put("Align", _align);
 BA.debugLineNum = 6768;BA.debugLine="xt = x1 - 5dip";
Debug.JustUpdateDeviceLine();
_xt = RemoteObject.solve(new RemoteObject[] {_x1,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "-",1, 1);Debug.locals.put("xt", _xt);
 }}
;
 BA.debugLineNum = 6770;BA.debugLine="xcvsGraph.DrawText(PD.X, xt, y1 + dy, Texts.Scal";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _xt)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y1,_dy}, "+",1, 1))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),_align)));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 6774;BA.debugLine="Private RadarScale As Double";
Debug.JustUpdateDeviceLine();
_radarscale = RemoteObject.createImmutable(0);Debug.locals.put("RadarScale", _radarscale);
 BA.debugLineNum = 6775;BA.debugLine="RadarScale = Graph.Radius / (Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
_radarscale = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0);Debug.locals.put("RadarScale", _radarscale);
 BA.debugLineNum = 6777;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step110 = 1;
final int limit110 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step110 > 0 && _i.<Integer>get().intValue() <= limit110) || (step110 < 0 && _i.<Integer>get().intValue() >= limit110) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step110))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6778;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 6779;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6780;BA.debugLine="ID = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 6781;BA.debugLine="Cols(i) = ID.Color";
Debug.JustUpdateDeviceLine();
_cols.setArrayElement (_id.getField(true,"Color" /*RemoteObject*/ ),_i);
 BA.debugLineNum = 6783;BA.debugLine="ACols(i) = Cols(i) - Graph.AreaFillAlphaValue";
Debug.JustUpdateDeviceLine();
_acols.setArrayElement (RemoteObject.solve(new RemoteObject[] {_cols.getArrayElement(true,_i),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"AreaFillAlphaValue" /*RemoteObject*/ )}, "-",1, 1),_i);
 BA.debugLineNum = 6784;BA.debugLine="Names(i) = ID.Name";
Debug.JustUpdateDeviceLine();
_names.setArrayElement (_id.getField(true,"Name" /*RemoteObject*/ ),_i);
 BA.debugLineNum = 6785;BA.debugLine="If ID.Filled = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"Filled" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 6786;BA.debugLine="Private pth As B4XPath";
Debug.JustUpdateDeviceLine();
_pth = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("pth", _pth);
 BA.debugLineNum = 6787;BA.debugLine="For j = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step119 = 1;
final int limit119 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_j = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step119 > 0 && _j.<Integer>get().intValue() <= limit119) || (step119 < 0 && _j.<Integer>get().intValue() >= limit119) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step119))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 6788;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6789;BA.debugLine="PD = Points.Get(j)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_j)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6790;BA.debugLine="x0 = Graph.CenterX + (PD.YArray(i) - Scale(sY(";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"CosD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+**",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 6791;BA.debugLine="y0 = Graph.CenterY + (PD.YArray(i) - Scale(sY(";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"SinD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+**",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 6792;BA.debugLine="If j = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_j,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6793;BA.debugLine="pth.Initialize(x0, y0)";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)));
 }else {
 BA.debugLineNum = 6795;BA.debugLine="pth.LineTo(x0, y0)";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)));
 };
 }
}Debug.locals.put("j", _j);
;
 BA.debugLineNum = 6798;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6799;BA.debugLine="x0 = Graph.CenterX + (PD.YArray(i) - Scale(sY(0";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"CosD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+**",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 6800;BA.debugLine="y0 = Graph.CenterY + (PD.YArray(i) - Scale(sY(0";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"SinD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+**",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 6801;BA.debugLine="pth.LineTo(x0, y0)";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)));
 BA.debugLineNum = 6803;BA.debugLine="xcvsGraph.DrawPath(pth, ACols(i), True, 1dip)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(_acols.getArrayElement(true,_i)),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 6806;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6807;BA.debugLine="x0 = Graph.CenterX + (PD.YArray(i) - Scale(sY(0)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"CosD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+**",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 6808;BA.debugLine="y0 = Graph.CenterY + (PD.YArray(i) - Scale(sY(0)";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"SinD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+**",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 6809;BA.debugLine="For j = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step139 = 1;
final int limit139 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_j = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step139 > 0 && _j.<Integer>get().intValue() <= limit139) || (step139 < 0 && _j.<Integer>get().intValue() >= limit139) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step139))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 6810;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6811;BA.debugLine="PD = Points.Get(j)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_j)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6812;BA.debugLine="x1 = Graph.CenterX + (PD.YArray(i) - Scale(sY(0";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"CosD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+**",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 6813;BA.debugLine="y1 = Graph.CenterY + (PD.YArray(i) - Scale(sY(0";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"SinD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+**",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 6814;BA.debugLine="xcvsGraph.DrawLine(x0, y0, x1, y1, Cols(i), ID.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(_cols.getArrayElement(true,_i)),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 BA.debugLineNum = 6815;BA.debugLine="x0 = x1";
Debug.JustUpdateDeviceLine();
_x0 = _x1;Debug.locals.put("x0", _x0);
 BA.debugLineNum = 6816;BA.debugLine="y0 = y1";
Debug.JustUpdateDeviceLine();
_y0 = _y1;Debug.locals.put("y0", _y0);
 }
}Debug.locals.put("j", _j);
;
 BA.debugLineNum = 6818;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6819;BA.debugLine="x1 = Graph.CenterX + (PD.YArray(i) - Scale(sY(0)";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"CosD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+**",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 6820;BA.debugLine="y1 = Graph.CenterY + (PD.YArray(i) - Scale(sY(0)";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"SinD",(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ))))}, "+**",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 6821;BA.debugLine="xcvsGraph.DrawLine(x0, y0, x1, y1, Cols(i), ID.S";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(_cols.getArrayElement(true,_i)),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 BA.debugLineNum = 6823;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 6824;BA.debugLine="For j = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step153 = 1;
final int limit153 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_j = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step153 > 0 && _j.<Integer>get().intValue() <= limit153) || (step153 < 0 && _j.<Integer>get().intValue() >= limit153) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step153))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 6825;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6826;BA.debugLine="PD = Points.Get(j)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_j)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6827;BA.debugLine="x0 = Graph.CenterX + (PD.YArray(i) - Scale(sY(";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"CosD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+**",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 6828;BA.debugLine="y0 = Graph.CenterY + (PD.YArray(i) - Scale(sY(";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),_radarscale,xchart.__c.runMethod(true,"SinD",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ ),_angledelta,_j}, "+*",1, 0)))}, "+**",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 6829;BA.debugLine="DrawPoint(x0, y0, ID.PointColor, ID.PointType,";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_x0),(Object)(_y0),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 }
}Debug.locals.put("j", _j);
;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 6835;BA.debugLine="If Graph.RadarDrawScaleValues = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarDrawScaleValues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 6836;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 6837;BA.debugLine="Private dy1 As Float";
Debug.JustUpdateDeviceLine();
_dy1 = RemoteObject.createImmutable(0f);Debug.locals.put("dy1", _dy1);
 BA.debugLineNum = 6838;BA.debugLine="Private Step1 As Int";
Debug.JustUpdateDeviceLine();
_step1 = RemoteObject.createImmutable(0);Debug.locals.put("Step1", _step1);
 BA.debugLineNum = 6840;BA.debugLine="dy1 = Graph.Radius / Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
_dy1 = BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Radius" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0));Debug.locals.put("dy1", _dy1);
 BA.debugLineNum = 6841;BA.debugLine="If 1.2 * Texts.ScaleTextHeight < dy1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0),BA.numberCast(double.class, _dy1))) { 
 BA.debugLineNum = 6842;BA.debugLine="Step1 = -1";
Debug.JustUpdateDeviceLine();
_step1 = BA.numberCast(int.class, -(double) (0 + 1));Debug.locals.put("Step1", _step1);
 }else {
 BA.debugLineNum = 6844;BA.debugLine="Step1 = -2";
Debug.JustUpdateDeviceLine();
_step1 = BA.numberCast(int.class, -(double) (0 + 2));Debug.locals.put("Step1", _step1);
 };
 BA.debugLineNum = 6846;BA.debugLine="x1 = Graph.CenterX - 0.3 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ ),RemoteObject.createImmutable(0.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("x1", _x1);
 BA.debugLineNum = 6847;BA.debugLine="y0 = Graph.CenterY + 0.5 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 6848;BA.debugLine="For i = Scale(sY(0)).NbIntervals To 1 Step Step1";
Debug.JustUpdateDeviceLine();
{
final int step174 = _step1.<Integer>get().intValue();
final int limit174 = 1;
_i = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ ) ;
for (;(step174 > 0 && _i.<Integer>get().intValue() <= limit174) || (step174 < 0 && _i.<Integer>get().intValue() >= limit174) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step174))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6849;BA.debugLine="y1 = y0 - i * dy1";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y0,_i,_dy1}, "-*",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 6850;BA.debugLine="txt = NumberFormat3(Scale(sY(0)).MinVal + i * S";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Interval" /*RemoteObject*/ )}, "+*",1, 0)),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 BA.debugLineNum = 6851;BA.debugLine="xcvsGraph.DrawText(txt, x1, y1, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 6855;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Items.Size";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6856;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 6859;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 6860;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawscalesy(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawScalesY (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3340);
if (RapidSub.canDelegate("drawscalesy")) { return __ref.runUserSub(false, "xchart","drawscalesy", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _x = null;
RemoteObject _dy = null;
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _alignment = null;
 BA.debugLineNum = 3340;BA.debugLine="Private Sub DrawScalesY";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3341;BA.debugLine="Private i, l, x(NbMaxDifferentScales), dy(NbMaxDi";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
_x = RemoteObject.createNewArray ("int", new int[] {__ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ).<Integer>get().intValue()}, new Object[]{});Debug.locals.put("x", _x);
_dy = RemoteObject.createNewArray ("int", new int[] {__ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ).<Integer>get().intValue()}, new Object[]{});Debug.locals.put("dy", _dy);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
 BA.debugLineNum = 3342;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3343;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 3344;BA.debugLine="Private Alignment(4) As String";
Debug.JustUpdateDeviceLine();
_alignment = RemoteObject.createNewArray ("String", new int[] {4}, new Object[]{});Debug.locals.put("Alignment", _alignment);
 BA.debugLineNum = 3345;BA.debugLine="Alignment(0) = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_alignment.setArrayElement (BA.ObjectToString("RIGHT"),BA.numberCast(int.class, 0));
 BA.debugLineNum = 3346;BA.debugLine="Alignment(1) = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_alignment.setArrayElement (BA.ObjectToString("LEFT"),BA.numberCast(int.class, 1));
 BA.debugLineNum = 3347;BA.debugLine="Alignment(2) = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_alignment.setArrayElement (BA.ObjectToString("RIGHT"),BA.numberCast(int.class, 2));
 BA.debugLineNum = 3348;BA.debugLine="Alignment(3) = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_alignment.setArrayElement (BA.ObjectToString("LEFT"),BA.numberCast(int.class, 3));
 BA.debugLineNum = 3350;BA.debugLine="x(0) = Graph.Left - 0.75 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 3351;BA.debugLine="x(1) = Graph.Right + 0.75 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 1));
 BA.debugLineNum = 3352;BA.debugLine="x(2) = Graph.Left - 0.75 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0)),BA.numberCast(int.class, 2));
 BA.debugLineNum = 3353;BA.debugLine="x(3) = Graph.Right + 0.75 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_x.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 3));
 BA.debugLineNum = 3354;BA.debugLine="dy(0) = 0.52 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_dy.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.52),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 3355;BA.debugLine="dy(1) = 0.52 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_dy.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.52),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0)),BA.numberCast(int.class, 1));
 BA.debugLineNum = 3356;BA.debugLine="dy(2) = -0.48 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_dy.setArrayElement (BA.numberCast(int.class, -0.48*(double) (0 + __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ).<Integer>get().intValue())),BA.numberCast(int.class, 2));
 BA.debugLineNum = 3357;BA.debugLine="dy(3) = -0.48 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_dy.setArrayElement (BA.numberCast(int.class, -0.48*(double) (0 + __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ).<Integer>get().intValue())),BA.numberCast(int.class, 3));
 BA.debugLineNum = 3377;BA.debugLine="y1 = Graph.Bottom";
Debug.JustUpdateDeviceLine();
_y1 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ );Debug.locals.put("y1", _y1);
 BA.debugLineNum = 3378;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step18 = 1;
final int limit18 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step18 > 0 && _l.<Integer>get().intValue() <= limit18) || (step18 < 0 && _l.<Integer>get().intValue() >= limit18) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step18))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 3379;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 3380;BA.debugLine="For i = 0 To Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
{
final int step20 = 1;
final int limit20 = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step20 > 0 && _i.<Integer>get().intValue() <= limit20) || (step20 < 0 && _i.<Integer>get().intValue() >= limit20) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step20))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3381;BA.debugLine="y = Graph.Bottom - i * Graph.YInterval";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_i,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "-*",1, 1);Debug.locals.put("y", _y);
 BA.debugLineNum = 3382;BA.debugLine="If Graph.DrawHorizontalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawHorizontalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3383;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, y, Graph.Right,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3386;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3387;BA.debugLine="xcvsGraph.DrawLine(Graph.Left - 4dip, y, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3388;BA.debugLine="If Scale(sY(0)).Different = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3389;BA.debugLine="xcvsGraph.DrawLine(Graph.Right, y, Graph.Righ";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3391;BA.debugLine="If Scale(sY(l)).MinVal = 0 And Scale(sY(l)).Ma";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3392;BA.debugLine="txt = \"\"";
Debug.JustUpdateDeviceLine();
_txt = BA.ObjectToString("");Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 3394;BA.debugLine="If Scale(sY(0)).ReverseYScale = True And (Gra";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("YX_CHART")))))) { 
 BA.debugLineNum = 3395;BA.debugLine="txt = NumberFormat3(Scale(sY(l)).MaxVal - i";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MaxVal" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Interval" /*RemoteObject*/ )}, "-*",1, 0)),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 3397;BA.debugLine="txt = NumberFormat3(Scale(sY(l)).MinVal + i";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Interval" /*RemoteObject*/ )}, "+*",1, 0)),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 };
 };
 BA.debugLineNum = 3401;BA.debugLine="If i = 0 Or MeasureTextHeight(txt, Texts.Scale";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("<",RemoteObject.solve(new RemoteObject[] {__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ ))),RemoteObject.createImmutable(1.8)}, "*",0, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_y1,_y}, "-",1, 1)))) { 
 BA.debugLineNum = 3403;BA.debugLine="xcvsGraph.DrawText(txt, x(l), y + dy(l), Text";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x.getArrayElement(true,_l))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_dy.getArrayElement(true,_l)}, "+",1, 1))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),_alignment.getArrayElement(true,_l))));
 BA.debugLineNum = 3404;BA.debugLine="y1 = y";
Debug.JustUpdateDeviceLine();
_y1 = _y;Debug.locals.put("y1", _y1);
 };
 };
 }
}Debug.locals.put("i", _i);
;
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 3409;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, Graph.Top, Graph.L";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3410;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawscalex(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawScaleX (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3455);
if (RapidSub.canDelegate("drawscalex")) { return __ref.runUserSub(false, "xchart","drawscalex", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _xinterval = RemoteObject.createImmutable(0);
RemoteObject _l1 = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _h1 = RemoteObject.createImmutable(0);
RemoteObject _h2 = RemoteObject.createImmutable(0);
RemoteObject _h3 = RemoteObject.createImmutable(0);
RemoteObject _h4 = RemoteObject.createImmutable(0);
RemoteObject _h5 = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
 BA.debugLineNum = 3455;BA.debugLine="Private Sub DrawScaleX";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3456;BA.debugLine="Private i, ip, x, x1, XInterval, l1 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_xinterval = RemoteObject.createImmutable(0);Debug.locals.put("XInterval", _xinterval);
_l1 = RemoteObject.createImmutable(0);Debug.locals.put("l1", _l1);
 BA.debugLineNum = 3457;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3458;BA.debugLine="Private h1, h2, h3, h4, h5 As Double";
Debug.JustUpdateDeviceLine();
_h1 = RemoteObject.createImmutable(0);Debug.locals.put("h1", _h1);
_h2 = RemoteObject.createImmutable(0);Debug.locals.put("h2", _h2);
_h3 = RemoteObject.createImmutable(0);Debug.locals.put("h3", _h3);
_h4 = RemoteObject.createImmutable(0);Debug.locals.put("h4", _h4);
_h5 = RemoteObject.createImmutable(0);Debug.locals.put("h5", _h5);
 BA.debugLineNum = 3467;BA.debugLine="h1 = 1.65";
Debug.JustUpdateDeviceLine();
_h1 = BA.numberCast(double.class, 1.65);Debug.locals.put("h1", _h1);
 BA.debugLineNum = 3468;BA.debugLine="h2 = 0.38";
Debug.JustUpdateDeviceLine();
_h2 = BA.numberCast(double.class, 0.38);Debug.locals.put("h2", _h2);
 BA.debugLineNum = 3469;BA.debugLine="h3 = 0.45";
Debug.JustUpdateDeviceLine();
_h3 = BA.numberCast(double.class, 0.45);Debug.locals.put("h3", _h3);
 BA.debugLineNum = 3470;BA.debugLine="h4 = 0.6";
Debug.JustUpdateDeviceLine();
_h4 = BA.numberCast(double.class, 0.6);Debug.locals.put("h4", _h4);
 BA.debugLineNum = 3471;BA.debugLine="h5 = 1.2";
Debug.JustUpdateDeviceLine();
_h5 = BA.numberCast(double.class, 1.2);Debug.locals.put("h5", _h5);
 BA.debugLineNum = 3473;BA.debugLine="l1 = 4dip";
Debug.JustUpdateDeviceLine();
_l1 = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)));Debug.locals.put("l1", _l1);
 BA.debugLineNum = 3475;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 3476;BA.debugLine="XInterval = Graph.Width / Scale(sX).NbIntervals";
Debug.JustUpdateDeviceLine();
_xinterval = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0));Debug.locals.put("XInterval", _xinterval);
 BA.debugLineNum = 3477;BA.debugLine="For i = 0 To Scale(sX).NbIntervals";
Debug.JustUpdateDeviceLine();
{
final int step12 = 1;
final int limit12 = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step12 > 0 && _i.<Integer>get().intValue() <= limit12) || (step12 < 0 && _i.<Integer>get().intValue() >= limit12) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step12))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3478;BA.debugLine="x = Graph.Left + i * XInterval";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_i,_xinterval}, "+*",1, 1);Debug.locals.put("x", _x);
 BA.debugLineNum = 3479;BA.debugLine="txt = NumberFormat3(Scale(sX).MinVal + i * Scal";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Interval" /*RemoteObject*/ )}, "+*",1, 0)),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3480;BA.debugLine="If Graph.DrawVerticalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawVerticalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3481;BA.debugLine="xcvsGraph.DrawLine(x, Graph.Top, x, Graph.Bott";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3483;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3484;BA.debugLine="Select Graph.XScaleTextOrientation";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XScaleTextOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"),BA.ObjectToString("VERTICAL"),BA.ObjectToString("45 DEGREES"))) {
case 0: {
 BA.debugLineNum = 3486;BA.debugLine="If (x - x1) > 1.3 * MeasureTextWidth(txt, Te";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_x,_x1}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))}, "*",0, 0)) || RemoteObject.solveBoolean("=",_ip,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3487;BA.debugLine="xcvsGraph.DrawText(txt, x, Graph.Bottom + h";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h1,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 3488;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 };
 break; }
case 1: {
 BA.debugLineNum = 3491;BA.debugLine="If (x - x1) > 1.8 * Texts.ScaleTextHeight Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_x,_x1}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3492;BA.debugLine="xcvsGraph.DrawTextRotated(txt, x + h2 * Tex";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_h2,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h4,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"RIGHT")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 BA.debugLineNum = 3493;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 };
 break; }
case 2: {
 BA.debugLineNum = 3496;BA.debugLine="If (x - x1) > 1.8 * Texts.ScaleTextHeight Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_x,_x1}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3497;BA.debugLine="xcvsGraph.DrawTextRotated(txt, x + h3 * Tex";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_h3,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h5,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"RIGHT")),(Object)(BA.numberCast(float.class, -(double) (0 + 45))));
 BA.debugLineNum = 3498;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 };
 break; }
}
;
 BA.debugLineNum = 3501;BA.debugLine="xcvsGraph.DrawLine(x, Graph.Bottom, x, Graph.B";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_l1}, "+",1, 1))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3503;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 3506;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step41 = 1;
final int limit41 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step41 > 0 && _i.<Integer>get().intValue() <= limit41) || (step41 < 0 && _i.<Integer>get().intValue() >= limit41) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step41))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3507;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3509;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3510;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3511;BA.debugLine="If Graph.ChartType = \"LINE\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("STACKED_AREA"))) { 
 BA.debugLineNum = 3512;BA.debugLine="x = Graph.Left + ip * Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_ip,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x", _x);
 }else {
 BA.debugLineNum = 3514;BA.debugLine="x = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x", _x);
 };
 BA.debugLineNum = 3516;BA.debugLine="If PD.ShowTick = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"ShowTick" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3517;BA.debugLine="If Graph.DrawVerticalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawVerticalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3518;BA.debugLine="xcvsGraph.DrawLine(x, Graph.Top, x, Graph.Bot";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3520;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3521;BA.debugLine="Select Graph.XScaleTextOrientation";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XScaleTextOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"),BA.ObjectToString("VERTICAL"),BA.ObjectToString("45 DEGREES"))) {
case 0: {
 BA.debugLineNum = 3523;BA.debugLine="If (x - x1) > 1.3 * MeasureTextWidth(PD.X,";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_x,_x1}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))}, "*",0, 0)) || RemoteObject.solveBoolean("=",_ip,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3524;BA.debugLine="xcvsGraph.DrawText(PD.X, x, Graph.Bottom +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h1,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 3525;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 };
 break; }
case 1: {
 BA.debugLineNum = 3528;BA.debugLine="If (x - x1) > 1.8 * Texts.ScaleTextHeight T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_x,_x1}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3529;BA.debugLine="xcvsGraph.DrawTextRotated(PD.X, x + h2 * T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_h2,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h4,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"RIGHT")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 BA.debugLineNum = 3530;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 };
 break; }
case 2: {
 BA.debugLineNum = 3533;BA.debugLine="If (x - x1) > 1.8 * Texts.ScaleTextHeight T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_x,_x1}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3534;BA.debugLine="xcvsGraph.DrawTextRotated(PD.X, x + h3 * T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_h3,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h5,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"RIGHT")),(Object)(BA.numberCast(float.class, -(double) (0 + 45))));
 BA.debugLineNum = 3535;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 };
 break; }
}
;
 BA.debugLineNum = 3538;BA.debugLine="xcvsGraph.DrawLine(x, Graph.Bottom, x, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_l1}, "+",1, 1))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3542;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3543;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, Graph.Bottom, Gr";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 BA.debugLineNum = 3546;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawscalexh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawScaleXH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3550);
if (RapidSub.canDelegate("drawscalexh")) { return __ref.runUserSub(false, "xchart","drawscalexh", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _l1 = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _ip = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3550;BA.debugLine="Private Sub DrawScaleXH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3551;BA.debugLine="Private i, y, y1, l1 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
_l1 = RemoteObject.createImmutable(0);Debug.locals.put("l1", _l1);
 BA.debugLineNum = 3553;BA.debugLine="l1 = 4dip";
Debug.JustUpdateDeviceLine();
_l1 = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)));Debug.locals.put("l1", _l1);
 BA.debugLineNum = 3555;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3556;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step4 > 0 && _i.<Integer>get().intValue() <= limit4) || (step4 < 0 && _i.<Integer>get().intValue() >= limit4) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step4))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3557;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3558;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3560;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3561;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3562;BA.debugLine="y = Graph.Bottom - Graph.XOffset - (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "--*",2, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3563;BA.debugLine="If PD.ShowTick = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"ShowTick" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3564;BA.debugLine="If Graph.DrawHorizontalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawHorizontalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3565;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, y, Graph.Right";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3567;BA.debugLine="If Abs(y - y1) > 1.8 * Texts.ScaleTextHeight T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_y,_y1}, "-",1, 1)))),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3568;BA.debugLine="xcvsGraph.DrawText(PD.X, Graph.Left - 0.6 * T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),RemoteObject.createImmutable(0.6),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.4),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 3569;BA.debugLine="y1 = y";
Debug.JustUpdateDeviceLine();
_y1 = _y;Debug.locals.put("y1", _y1);
 BA.debugLineNum = 3570;BA.debugLine="xcvsGraph.DrawLine(Graph.Left - l1, y, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_l1}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 3575;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step22 = 1;
final int limit22 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step22 > 0 && _i.<Integer>get().intValue() <= limit22) || (step22 < 0 && _i.<Integer>get().intValue() >= limit22) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step22))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3576;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3577;BA.debugLine="Private ip As Int";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3579;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3580;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3581;BA.debugLine="y = Graph.Top + Graph.XOffset + (ip + 0.5) * Gr";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 3582;BA.debugLine="If PD.ShowTick = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"ShowTick" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3583;BA.debugLine="If Graph.DrawHorizontalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawHorizontalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3584;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, y, Graph.Right";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3586;BA.debugLine="If Abs(y - y1) > 1.8 * Texts.ScaleTextHeight T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_y,_y1}, "-",1, 1)))),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3587;BA.debugLine="xcvsGraph.DrawText(PD.X, Graph.Left - 0.6 * T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),RemoteObject.createImmutable(0.6),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.4),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 3588;BA.debugLine="y1 = y";
Debug.JustUpdateDeviceLine();
_y1 = _y;Debug.locals.put("y1", _y1);
 };
 BA.debugLineNum = 3590;BA.debugLine="xcvsGraph.DrawLine(Graph.Left - l1, y, Graph.L";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_l1}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 3594;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawscalexhline(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawScaleXHLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3598);
if (RapidSub.canDelegate("drawscalexhline")) { return __ref.runUserSub(false, "xchart","drawscalexhline", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _h1 = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _y2 = RemoteObject.createImmutable(0);
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
 BA.debugLineNum = 3598;BA.debugLine="Private Sub DrawScaleXHLine";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3599;BA.debugLine="Private i, ip, h1, y, y1, y2 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_h1 = RemoteObject.createImmutable(0);Debug.locals.put("h1", _h1);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
_y2 = RemoteObject.createImmutable(0);Debug.locals.put("y2", _y2);
 BA.debugLineNum = 3600;BA.debugLine="Private rectText As B4XRect";
Debug.JustUpdateDeviceLine();
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 3602;BA.debugLine="rectText = xcvsGraph.MeasureText(\"0\", Texts.Scale";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("0")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 3604;BA.debugLine="y2 = 10000";
Debug.JustUpdateDeviceLine();
_y2 = BA.numberCast(int.class, 10000);Debug.locals.put("y2", _y2);
 BA.debugLineNum = 3606;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step5 = 1;
final int limit5 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step5 > 0 && _i.<Integer>get().intValue() <= limit5) || (step5 < 0 && _i.<Integer>get().intValue() >= limit5) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step5))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3607;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3609;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 3610;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 3611;BA.debugLine="If mHChartsTicksTopDown = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3612;BA.debugLine="y = Graph.Bottom - ip * Graph.YInterval";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_ip,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "-*",1, 1);Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 3614;BA.debugLine="y = Graph.Top + ip * Graph.YInterval";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_ip,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "+*",1, 1);Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 3616;BA.debugLine="y1 = y - rectText.CenterY";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,_recttext.runMethod(true,"getCenterY")}, "-",1, 0));Debug.locals.put("y1", _y1);
 BA.debugLineNum = 3617;BA.debugLine="h1 = 1.8 * rectText.Height";
Debug.JustUpdateDeviceLine();
_h1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),_recttext.runMethod(true,"getHeight")}, "*",0, 0));Debug.locals.put("h1", _h1);
 BA.debugLineNum = 3618;BA.debugLine="If PD.ShowTick = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"ShowTick" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3619;BA.debugLine="If Graph.DrawVerticalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawVerticalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3620;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, y, Graph.Right,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3622;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3623;BA.debugLine="If Abs((y2 - y1)) > h1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, (RemoteObject.solve(new RemoteObject[] {_y2,_y1}, "-",1, 1))))),BA.numberCast(double.class, _h1))) { 
 BA.debugLineNum = 3624;BA.debugLine="xcvsGraph.DrawText(PD.X, Graph.Left - 6dip, y";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y1)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 3625;BA.debugLine="y2 = y1";
Debug.JustUpdateDeviceLine();
_y2 = _y1;Debug.locals.put("y2", _y2);
 };
 BA.debugLineNum = 3627;BA.debugLine="xcvsGraph.DrawLine(Graph.Left - 4dip, y, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3631;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawscaley(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawScaleY (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3243);
if (RapidSub.canDelegate("drawscaley")) { return __ref.runUserSub(false, "xchart","drawscaley", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
 BA.debugLineNum = 3243;BA.debugLine="Private Sub DrawScaleY";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3244;BA.debugLine="Private i, y, y1 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
 BA.debugLineNum = 3245;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3247;BA.debugLine="y1 = Graph.Bottom";
Debug.JustUpdateDeviceLine();
_y1 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ );Debug.locals.put("y1", _y1);
 BA.debugLineNum = 3248;BA.debugLine="For i = 0 To Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step4 > 0 && _i.<Integer>get().intValue() <= limit4) || (step4 < 0 && _i.<Integer>get().intValue() >= limit4) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step4))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3249;BA.debugLine="y = Graph.Bottom - i * Graph.YInterval";
Debug.JustUpdateDeviceLine();
_y = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_i,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ )}, "-*",1, 1);Debug.locals.put("y", _y);
 BA.debugLineNum = 3251;BA.debugLine="If Graph.DrawHorizontalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawHorizontalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3252;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, y, Graph.Right,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3255;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3256;BA.debugLine="xcvsGraph.DrawLine(Graph.Left - 4dip, y, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _y)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3257;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3258;BA.debugLine="txt = \"\"";
Debug.JustUpdateDeviceLine();
_txt = BA.ObjectToString("");Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 3260;BA.debugLine="If Scale(sY(0)).ReverseYScale = True And (Grap";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("BUBBLE")))))) { 
 BA.debugLineNum = 3261;BA.debugLine="txt = NumberFormat3(Scale(sY(0)).MaxVal - i *";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Interval" /*RemoteObject*/ )}, "-*",1, 0)),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 3263;BA.debugLine="txt = NumberFormat3(Scale(sY(0)).MinVal + i *";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Interval" /*RemoteObject*/ )}, "+*",1, 0)),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 };
 };
 BA.debugLineNum = 3267;BA.debugLine="If i = 0 Or MeasureTextHeight(txt, Texts.ScaleF";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("<",RemoteObject.solve(new RemoteObject[] {__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ ))),RemoteObject.createImmutable(1.8)}, "*",0, 0),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_y1,_y}, "-",1, 1)))) { 
 BA.debugLineNum = 3269;BA.debugLine="xcvsGraph.DrawText(txt, Graph.Left - 0.75 * Te";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.52),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 3275;BA.debugLine="y1 = y";
Debug.JustUpdateDeviceLine();
_y1 = _y;Debug.locals.put("y1", _y1);
 };
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3279;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3280;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, Graph.Top, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 3283;BA.debugLine="If HLines.Size > 0 And Scale(sY(0)).Different = F";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3284;BA.debugLine="DrawHorizontalLines";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawhorizontallines" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3286;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawscaleyh(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawScaleYH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3290);
if (RapidSub.canDelegate("drawscaleyh")) { return __ref.runUserSub(false, "xchart","drawscaleyh", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _ytext = RemoteObject.createImmutable(0);
RemoteObject _ytickt = RemoteObject.createImmutable(0);
RemoteObject _ytickb = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _h1 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3290;BA.debugLine="Private Sub DrawScaleYH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3291;BA.debugLine="Private i, x, x1, yText, yTickT, yTickB As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_ytext = RemoteObject.createImmutable(0);Debug.locals.put("yText", _ytext);
_ytickt = RemoteObject.createImmutable(0);Debug.locals.put("yTickT", _ytickt);
_ytickb = RemoteObject.createImmutable(0);Debug.locals.put("yTickB", _ytickb);
 BA.debugLineNum = 3292;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3293;BA.debugLine="Private h1 As Double";
Debug.JustUpdateDeviceLine();
_h1 = RemoteObject.createImmutable(0);Debug.locals.put("h1", _h1);
 BA.debugLineNum = 3298;BA.debugLine="h1 = 1.65";
Debug.JustUpdateDeviceLine();
_h1 = BA.numberCast(double.class, 1.65);Debug.locals.put("h1", _h1);
 BA.debugLineNum = 3301;BA.debugLine="x1 = Graph.Left";
Debug.JustUpdateDeviceLine();
_x1 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ );Debug.locals.put("x1", _x1);
 BA.debugLineNum = 3302;BA.debugLine="If mHChartsXScaleOnTop = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartsxscaleontop" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 3303;BA.debugLine="yText = Graph.Bottom + h1 * Texts.ScaleTextHeigh";
Debug.JustUpdateDeviceLine();
_ytext = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h1,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yText", _ytext);
 BA.debugLineNum = 3304;BA.debugLine="yTickT = Graph.Bottom";
Debug.JustUpdateDeviceLine();
_ytickt = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ );Debug.locals.put("yTickT", _ytickt);
 BA.debugLineNum = 3305;BA.debugLine="yTickB = Graph.Bottom + 4dip";
Debug.JustUpdateDeviceLine();
_ytickb = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "+",1, 1);Debug.locals.put("yTickB", _ytickb);
 }else {
 BA.debugLineNum = 3307;BA.debugLine="yText = Graph.Top - 0.6 * Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_ytext = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.6),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yText", _ytext);
 BA.debugLineNum = 3308;BA.debugLine="yTickT = Graph.Top - 4dip";
Debug.JustUpdateDeviceLine();
_ytickt = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "-",1, 1);Debug.locals.put("yTickT", _ytickt);
 BA.debugLineNum = 3309;BA.debugLine="yTickB = Graph.Top";
Debug.JustUpdateDeviceLine();
_ytickb = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ );Debug.locals.put("yTickB", _ytickb);
 };
 BA.debugLineNum = 3311;BA.debugLine="For i = 0 To Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
{
final int step15 = 1;
final int limit15 = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step15 > 0 && _i.<Integer>get().intValue() <= limit15) || (step15 < 0 && _i.<Integer>get().intValue() >= limit15) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step15))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 3312;BA.debugLine="x = Graph.Left + i * Graph.XInterval";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_i,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 3314;BA.debugLine="If Graph.DrawVerticalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawVerticalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3315;BA.debugLine="xcvsGraph.DrawLine(x, Graph.Top, x, Graph.Botto";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3318;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3319;BA.debugLine="xcvsGraph.DrawLine(x, yTickT, x, yTickB, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _ytickt)),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _ytickb)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3320;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3321;BA.debugLine="txt = \"\"";
Debug.JustUpdateDeviceLine();
_txt = BA.ObjectToString("");Debug.locals.put("txt", _txt);
 }else {
 BA.debugLineNum = 3323;BA.debugLine="txt = NumberFormat3(Scale(sY(0)).MinVal + i *";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),_i,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Interval" /*RemoteObject*/ )}, "+*",1, 0)),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 3326;BA.debugLine="If i = 0 Or (x - x1) > 1.3 * MeasureTextWidth(t";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_x,_x1}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))}, "*",0, 0))) { 
 BA.debugLineNum = 3327;BA.debugLine="xcvsGraph.DrawText(txt, x, yText, Texts.ScaleF";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _ytext)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 3328;BA.debugLine="x1 = x";
Debug.JustUpdateDeviceLine();
_x1 = _x;Debug.locals.put("x1", _x1);
 };
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 3332;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, Graph.Bottom, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3334;BA.debugLine="If HLines.Size > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3335;BA.debugLine="DrawHorizontalLinesH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawhorizontallinesh" /*RemoteObject*/ );
 };
 BA.debugLineNum = 3337;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawstackedarea(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawStackedArea (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4052);
if (RapidSub.canDelegate("drawstackedarea")) { return __ref.runUserSub(false, "xchart","drawstackedarea", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _smax = RemoteObject.createImmutable(0);
RemoteObject _smin = RemoteObject.createImmutable(0);
RemoteObject _smean = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _lstcoords = RemoteObject.declareNull("anywheresoftware.b4a.objects.collections.List");
RemoteObject _ptharea = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _coords = null;
RemoteObject _coords0 = null;
RemoteObject _coords1 = null;
 BA.debugLineNum = 4052;BA.debugLine="Private Sub DrawStackedArea";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4053;BA.debugLine="Private i, ip, l, mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4055;BA.debugLine="xcvsGraph.ClearRect(xcvsGraph.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 4056;BA.debugLine="xcvsGraph.DrawRect(xcvsGraph.TargetRect, Graph.Ch";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 4058;BA.debugLine="If Items.Size = 1 And (MinMaxMeanValues(0) <> 0 O";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 1)) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("!",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0)))))) { 
 BA.debugLineNum = 4059;BA.debugLine="Private sMax, sMin, sMean As Double";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.createImmutable(0);Debug.locals.put("sMax", _smax);
_smin = RemoteObject.createImmutable(0);Debug.locals.put("sMin", _smin);
_smean = RemoteObject.createImmutable(0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 4060;BA.debugLine="If Graph.IncludeMinLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4061;BA.debugLine="sMin = Graph.Bottom - (MinMaxMeanValues(0) - Sc";
Debug.JustUpdateDeviceLine();
_smin = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMin", _smin);
 BA.debugLineNum = 4062;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMin, Graph.Righ";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smin)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smin)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MinLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 4064;BA.debugLine="If Graph.IncludeMaxLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4065;BA.debugLine="sMax = Graph.Bottom - (MinMaxMeanValues(1) - Sc";
Debug.JustUpdateDeviceLine();
_smax = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMax", _smax);
 BA.debugLineNum = 4066;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMax, Graph.Righ";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smax)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smax)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MaxLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 4068;BA.debugLine="If Graph.IncludeMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4069;BA.debugLine="sMean = Graph.Bottom - (MinMaxMeanValues(2) - S";
Debug.JustUpdateDeviceLine();
_smean = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0);Debug.locals.put("sMean", _smean);
 BA.debugLineNum = 4070;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, sMean, Graph.Rig";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _smean)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 BA.debugLineNum = 4074;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4075;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal * S";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 }else 
{ BA.debugLineNum = 4076;BA.debugLine="Else If Scale(sY(0)).MinVal< 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4077;BA.debugLine="mYAxis0 = Graph.Top";
Debug.JustUpdateDeviceLine();
_myaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ );Debug.locals.put("mYAxis0", _myaxis0);
 }else {
 BA.debugLineNum = 4079;BA.debugLine="mYAxis0 = Graph.Bottom";
Debug.JustUpdateDeviceLine();
_myaxis0 = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ );Debug.locals.put("mYAxis0", _myaxis0);
 }}
;
 BA.debugLineNum = 4082;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 4083;BA.debugLine="Private lstCoords As List";
Debug.JustUpdateDeviceLine();
_lstcoords = RemoteObject.createNew ("anywheresoftware.b4a.objects.collections.List");Debug.locals.put("lstCoords", _lstcoords);
 BA.debugLineNum = 4084;BA.debugLine="Private pthArea As B4XPath";
Debug.JustUpdateDeviceLine();
_ptharea = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("pthArea", _ptharea);
 BA.debugLineNum = 4086;BA.debugLine="lstCoords.Initialize";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Initialize");
 BA.debugLineNum = 4087;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step30 = 1;
final int limit30 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step30 > 0 && _i.<Integer>get().intValue() <= limit30) || (step30 < 0 && _i.<Integer>get().intValue() >= limit30) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step30))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4088;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4090;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4091;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4092;BA.debugLine="Private Coords(PD.YArray.Length + 1) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "+",1, 1).<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 4093;BA.debugLine="Coords(0) = Graph.Left + ip * Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_ip,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 4094;BA.debugLine="Coords(1) = Graph.Bottom - (PD.YArray(0) - Scale";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0)),BA.numberCast(int.class, 1));
 BA.debugLineNum = 4095;BA.debugLine="For l = 1 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step37 = 1;
final int limit37 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 1) ;
for (;(step37 > 0 && _l.<Integer>get().intValue() <= limit37) || (step37 < 0 && _l.<Integer>get().intValue() >= limit37) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step37))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4096;BA.debugLine="Coords(l + 1) = Coords(l) - (PD.YArray(l) - Sca";
Debug.JustUpdateDeviceLine();
_coords.setArrayElement (BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_coords.getArrayElement(true,_l),(RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_l),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0)),RemoteObject.solve(new RemoteObject[] {_l,RemoteObject.createImmutable(1)}, "+",1, 1));
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4098;BA.debugLine="lstCoords.Add(Coords)";
Debug.JustUpdateDeviceLine();
_lstcoords.runVoidMethod ("Add",(Object)((_coords)));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4101;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4102;BA.debugLine="For l = Items.Size - 1 To 0 Step -1";
Debug.JustUpdateDeviceLine();
{
final int step43 = -1;
final int limit43 = 0;
_l = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1) ;
for (;(step43 > 0 && _l.<Integer>get().intValue() <= limit43) || (step43 < 0 && _l.<Integer>get().intValue() >= limit43) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step43))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4103;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4104;BA.debugLine="pthArea.Initialize(Graph.Left, Graph.Bottom)";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))));
 BA.debugLineNum = 4105;BA.debugLine="For i = 0 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step46 = 1;
final int limit46 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step46 > 0 && _i.<Integer>get().intValue() <= limit46) || (step46 < 0 && _i.<Integer>get().intValue() >= limit46) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step46))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4106;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4107;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 4108;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 4109;BA.debugLine="Private Coords0(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 4110;BA.debugLine="Coords0 = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 4111;BA.debugLine="If i = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4112;BA.debugLine="pthArea.Initialize(Coords0(0), mYAxis0)";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _myaxis0)));
 };
 BA.debugLineNum = 4114;BA.debugLine="pthArea.LineTo(Coords0(0), Coords0(l + 1))";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_l,RemoteObject.createImmutable(1)}, "+",1, 1)))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 4117;BA.debugLine="If l = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_l,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4118;BA.debugLine="pthArea.LineTo(Coords0(0), mYAxis0)";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _myaxis0)));
 BA.debugLineNum = 4119;BA.debugLine="pthArea.LineTo(Graph.Left, mYAxis0)	'??? Missin";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)));
 }else {
 BA.debugLineNum = 4121;BA.debugLine="For i = lstCoords.Size - 1 To 0 Step -1";
Debug.JustUpdateDeviceLine();
{
final int step61 = -1;
final int limit61 = 0;
_i = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1) ;
for (;(step61 > 0 && _i.<Integer>get().intValue() <= limit61) || (step61 < 0 && _i.<Integer>get().intValue() >= limit61) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step61))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4122;BA.debugLine="Private Coords0(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 4123;BA.debugLine="Coords0 = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 4124;BA.debugLine="pthArea.LineTo(Coords0(0), Coords0(l))";
Debug.JustUpdateDeviceLine();
_ptharea.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,_l))));
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 4128;BA.debugLine="xcvsGraph.DrawPath(pthArea, ID.Color - Graph.Are";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_ptharea),(Object)(RemoteObject.solve(new RemoteObject[] {_id.getField(true,"Color" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"AreaFillAlphaValue" /*RemoteObject*/ )}, "-",1, 1)),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4130;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4132;BA.debugLine="DrawGridV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawgridv" /*RemoteObject*/ );
 BA.debugLineNum = 4134;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4135;BA.debugLine="For l = Items.Size - 1 To 0 Step -1";
Debug.JustUpdateDeviceLine();
{
final int step72 = -1;
final int limit72 = 0;
_l = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1) ;
for (;(step72 > 0 && _l.<Integer>get().intValue() <= limit72) || (step72 < 0 && _l.<Integer>get().intValue() >= limit72) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step72))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4136;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4137;BA.debugLine="For i = 1 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step74 = 1;
final int limit74 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step74 > 0 && _i.<Integer>get().intValue() <= limit74) || (step74 < 0 && _i.<Integer>get().intValue() >= limit74) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step74))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4138;BA.debugLine="Private Coords0(2), Coords1(2) As Int";
Debug.JustUpdateDeviceLine();
_coords0 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords0", _coords0);
_coords1 = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 4139;BA.debugLine="Coords0 = lstCoords.Get(i - 1)";
Debug.JustUpdateDeviceLine();
_coords0 = (_lstcoords.runMethod(false,"Get",(Object)(RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "-",1, 1))));Debug.locals.put("Coords0", _coords0);
 BA.debugLineNum = 4140;BA.debugLine="Coords1 = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords1 = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords1", _coords1);
 BA.debugLineNum = 4141;BA.debugLine="xcvsGraph.DrawLine(Coords0(0), Coords0(l + 1),";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords0.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_l,RemoteObject.createImmutable(1)}, "+",1, 1)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,BA.numberCast(int.class, 0)))),(Object)(BA.numberCast(float.class, _coords1.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_l,RemoteObject.createImmutable(1)}, "+",1, 1)))),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 }
}Debug.locals.put("i", _i);
;
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4145;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4147;BA.debugLine="For l = Items.Size - 1 To 0 Step -1";
Debug.JustUpdateDeviceLine();
{
final int step82 = -1;
final int limit82 = 0;
_l = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1) ;
for (;(step82 > 0 && _l.<Integer>get().intValue() <= limit82) || (step82 < 0 && _l.<Integer>get().intValue() >= limit82) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step82))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4148;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4149;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 4150;BA.debugLine="For i = 0 To lstCoords.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step85 = 1;
final int limit85 = RemoteObject.solve(new RemoteObject[] {_lstcoords.runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step85 > 0 && _i.<Integer>get().intValue() <= limit85) || (step85 < 0 && _i.<Integer>get().intValue() >= limit85) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step85))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4151;BA.debugLine="Private Coords(2) As Int";
Debug.JustUpdateDeviceLine();
_coords = RemoteObject.createNewArray ("int", new int[] {2}, new Object[]{});Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 4152;BA.debugLine="Coords = lstCoords.Get(i)";
Debug.JustUpdateDeviceLine();
_coords = (_lstcoords.runMethod(false,"Get",(Object)(_i)));Debug.locals.put("Coords", _coords);
 BA.debugLineNum = 4153;BA.debugLine="DrawPoint(Coords(0), Coords(l + 1), ID.PointCo";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_coords.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_coords.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_l,RemoteObject.createImmutable(1)}, "+",1, 1))),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 }
}Debug.locals.put("i", _i);
;
 };
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4158;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4159;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4160;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4162;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 4166;BA.debugLine="If HLines.Size > 0 And Scale(sY(0)).Different = F";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4167;BA.debugLine="DrawHorizontalLinesValue";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawhorizontallinesvalue" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4170;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And Zoom.NbVisi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4171;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4174;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 4175;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawwaterfallvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawWaterfallValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6004);
if (RapidSub.canDelegate("drawwaterfallvalues")) { return __ref.runUserSub(false, "xchart","drawwaterfallvalues", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _xt = RemoteObject.createImmutable(0);
RemoteObject _dy = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _yt = RemoteObject.createImmutable(0);
RemoteObject _col = RemoteObject.createImmutable(0);
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _recttextbackground = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _textwidth = RemoteObject.createImmutable(0);
RemoteObject _textheight = RemoteObject.createImmutable(0);
RemoteObject _localbarvalueorientation = RemoteObject.createImmutable("");
RemoteObject _valtext = RemoteObject.createImmutable("");
RemoteObject _localtextsize = RemoteObject.createImmutable(0f);
RemoteObject _localtextheight = RemoteObject.createImmutable(0);
RemoteObject _localfont = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _py = null;
RemoteObject _textalignment = RemoteObject.createImmutable("");
RemoteObject _dyt = RemoteObject.createImmutable(0);
RemoteObject _dyb = RemoteObject.createImmutable(0);
 BA.debugLineNum = 6004;BA.debugLine="Private Sub DrawWaterfallValues";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6005;BA.debugLine="If MinMaxMeanValues(0) = 0 And MinMaxMeanValues(1";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("=",__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 6007;BA.debugLine="Private i, ip, h, x, xt, dy, y, yt As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_xt = RemoteObject.createImmutable(0);Debug.locals.put("xt", _xt);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_yt = RemoteObject.createImmutable(0);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6008;BA.debugLine="Private Col As Int";
Debug.JustUpdateDeviceLine();
_col = RemoteObject.createImmutable(0);Debug.locals.put("Col", _col);
 BA.debugLineNum = 6009;BA.debugLine="Private mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 6010;BA.debugLine="Private rectText, rectTextBackground As B4XRect";
Debug.JustUpdateDeviceLine();
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
_recttextbackground = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectTextBackground", _recttextbackground);
 BA.debugLineNum = 6011;BA.debugLine="Private TextWidth, TextHeight As Int";
Debug.JustUpdateDeviceLine();
_textwidth = RemoteObject.createImmutable(0);Debug.locals.put("TextWidth", _textwidth);
_textheight = RemoteObject.createImmutable(0);Debug.locals.put("TextHeight", _textheight);
 BA.debugLineNum = 6012;BA.debugLine="Private LocalBarValueOrientation As String";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = RemoteObject.createImmutable("");Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 6013;BA.debugLine="Private valText As String";
Debug.JustUpdateDeviceLine();
_valtext = RemoteObject.createImmutable("");Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 6014;BA.debugLine="Private LocalTextSize As Float";
Debug.JustUpdateDeviceLine();
_localtextsize = RemoteObject.createImmutable(0f);Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6015;BA.debugLine="Private LocalTextHeight As Int";
Debug.JustUpdateDeviceLine();
_localtextheight = RemoteObject.createImmutable(0);Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6016;BA.debugLine="Private LocalFont As B4XFont";
Debug.JustUpdateDeviceLine();
_localfont = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6018;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal * Sc";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 6020;BA.debugLine="LocalBarValueOrientation = Graph.BarValueOrientat";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarValueOrientation" /*RemoteObject*/ );Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 6021;BA.debugLine="LocalFont = Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ );Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6022;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
_localtextheight = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ );Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6023;BA.debugLine="LocalTextSize = Texts.ScaleTextSize";
Debug.JustUpdateDeviceLine();
_localtextsize = __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ );Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6025;BA.debugLine="If Graph.BarValueOrientation = \"HORIZONTAL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarValueOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"))) { 
 BA.debugLineNum = 6026;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step18 = 1;
final int limit18 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step18 > 0 && _i.<Integer>get().intValue() <= limit18) || (step18 < 0 && _i.<Integer>get().intValue() >= limit18) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step18))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6027;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6029;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6030;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 6031;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 6032;BA.debugLine="rectText = xcvsGraph.MeasureText(NumberFormat3(";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6033;BA.debugLine="TextWidth = rectText.Width + 1.5 * Texts.ScaleT";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 6034;BA.debugLine="If TextWidth + 0.1 * Texts.ScaleTextHeight > Gr";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {_textwidth,RemoteObject.createImmutable(0.1),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 6035;BA.debugLine="LocalBarValueOrientation = \"VERTICAL\"";
Debug.JustUpdateDeviceLine();
_localbarvalueorientation = BA.ObjectToString("VERTICAL");Debug.locals.put("LocalBarValueOrientation", _localbarvalueorientation);
 BA.debugLineNum = 6036;BA.debugLine="Log(\"xChart BarValueOrientation set to VERTICA";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99764896",RemoteObject.createImmutable("xChart BarValueOrientation set to VERTICAL"),0);
 BA.debugLineNum = 6037;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 6042;BA.debugLine="If LocalBarValueOrientation = \"VERTICAL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_localbarvalueorientation,BA.ObjectToString("VERTICAL"))) { 
 BA.debugLineNum = 6043;BA.debugLine="Private TextAlignment As String";
Debug.JustUpdateDeviceLine();
_textalignment = RemoteObject.createImmutable("");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6046;BA.debugLine="If Texts.ScaleTextHeight * 1.5 + 4dip > Graph.Ba";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "*+",1, 0),BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 6047;BA.debugLine="rectText = xcvsGraph.MeasureText(\"10\", Texts.Sc";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("10")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6048;BA.debugLine="LocalTextSize = Min(Texts.ScaleTextSize, Texts.";
Debug.JustUpdateDeviceLine();
_localtextsize = BA.numberCast(float.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.2)}, "*//",0, 0))));Debug.locals.put("LocalTextSize", _localtextsize);
 BA.debugLineNum = 6049;BA.debugLine="LocalFont = xui.CreateFont2(Texts.ScaleFont, Lo";
Debug.JustUpdateDeviceLine();
_localfont = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_localtextsize));Debug.locals.put("LocalFont", _localfont);
 BA.debugLineNum = 6050;BA.debugLine="LocalTextHeight = Texts.ScaleTextHeight * Local";
Debug.JustUpdateDeviceLine();
_localtextheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_localtextsize,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ )}, "*/",0, 0));Debug.locals.put("LocalTextHeight", _localtextheight);
 BA.debugLineNum = 6051;BA.debugLine="If LocalTextSize < 6 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_localtextsize,BA.numberCast(double.class, 6))) { 
 BA.debugLineNum = 6052;BA.debugLine="Log(\"Bar value text size too small\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","99764912",RemoteObject.createImmutable("Bar value text size too small"),0);
 BA.debugLineNum = 6053;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 };
 BA.debugLineNum = 6057;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step44 = 1;
final int limit44 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step44 > 0 && _i.<Integer>get().intValue() <= limit44) || (step44 < 0 && _i.<Integer>get().intValue() >= limit44) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step44))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6058;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6060;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 6061;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6062;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 6063;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 6064;BA.debugLine="valText = NumberFormat3(py(0), Values.MaxDigits";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 6066;BA.debugLine="If Min(py(0), py(1)) >= Round2(Scale(sY(0)).Min";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",xchart.__c.runMethod(true,"Min",(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 1)))),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 14)))) && RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Min",(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 1)))),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 14))))) { 
 BA.debugLineNum = 6067;BA.debugLine="xt = Graph.Left + Graph.XOffset + (ip + 0.5) *";
Debug.JustUpdateDeviceLine();
_xt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),RemoteObject.createImmutable(0.4),_localtextheight}, "++*+*",3, 0));Debug.locals.put("xt", _xt);
 BA.debugLineNum = 6068;BA.debugLine="x = xt - 0.8 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xt,RemoteObject.createImmutable(0.8),_localtextheight}, "-*",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 6069;BA.debugLine="rectText = xcvsGraph.MeasureText(valText, Loca";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_valtext),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6070;BA.debugLine="TextWidth = 0.8 * LocalTextHeight + rectText.W";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.8),_localtextheight,_recttext.runMethod(true,"getWidth")}, "*+",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 6071;BA.debugLine="dy = 0.4 * LocalTextHeight";
Debug.JustUpdateDeviceLine();
_dy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.4),_localtextheight}, "*",0, 0));Debug.locals.put("dy", _dy);
 BA.debugLineNum = 6073;BA.debugLine="If py(0) >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_py.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6074;BA.debugLine="h = Graph.Height - (py(1) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 6075;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 6076;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).Min";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6077;BA.debugLine="yt = y - dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "-",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6078;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6079;BA.debugLine="Col = GetContrastColor(Graph.ChartBackground";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6080;BA.debugLine="rectTextBackground.Initialize(x, y - TextWid";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 6081;BA.debugLine="rectTextBackground.Top = y - TextWidth - 2di";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 BA.debugLineNum = 6082;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 BA.debugLineNum = 6083;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 6085;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6086;BA.debugLine="h = (py(0) - Scale(sY(0)).MinVal) * Scale(s";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6088;BA.debugLine="h = py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 BA.debugLineNum = 6090;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 6091;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).Mi";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6092;BA.debugLine="yt = y + dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6093;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6094;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6095;BA.debugLine="Col = GetContrastColor(Bar.WickColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 6097;BA.debugLine="Col = GetContrastColor(Bar.IncreaseColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"IncreaseColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 };
 BA.debugLineNum = 6099;BA.debugLine="rectTextBackground.Initialize(x, y, x + Loc";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "+",1, 1))));
 BA.debugLineNum = 6100;BA.debugLine="rectTextBackground.Top = y + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 BA.debugLineNum = 6101;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 }else {
 BA.debugLineNum = 6103;BA.debugLine="If PD.BarType = \"V\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("V"))) { 
 BA.debugLineNum = 6104;BA.debugLine="y = Graph.Bottom - (py(1) - py(0) - Scale(";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "--",2, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6105;BA.debugLine="yt = y + dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6106;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6107;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgrou";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6108;BA.debugLine="rectTextBackground.Initialize(x, y, x + Lo";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "+",1, 1))));
 BA.debugLineNum = 6109;BA.debugLine="rectTextBackground.Top = y + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 BA.debugLineNum = 6110;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 BA.debugLineNum = 6111;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Gra";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 }else {
 BA.debugLineNum = 6116;BA.debugLine="h = (py(1) - Scale(sY(0)).MinVal) * Scale(sY(";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 6117;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 6118;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).Min";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6119;BA.debugLine="yt = y + dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6120;BA.debugLine="TextAlignment = \"RIGHT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("RIGHT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6121;BA.debugLine="Col = GetContrastColor(Graph.ChartBackground";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6122;BA.debugLine="rectTextBackground.Initialize(x, y, x + Loca";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "+",1, 1))));
 BA.debugLineNum = 6123;BA.debugLine="rectTextBackground.Top = y + 2dip";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1)));
 BA.debugLineNum = 6124;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 BA.debugLineNum = 6125;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 6127;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6128;BA.debugLine="h = mYAxis0 - py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6130;BA.debugLine="h = py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 BA.debugLineNum = 6132;BA.debugLine="If Abs(h) > TextWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textwidth))) { 
 BA.debugLineNum = 6133;BA.debugLine="y = mYAxis0 - py(1) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6134;BA.debugLine="yt = y - dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "-",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6135;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6136;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6137;BA.debugLine="Col = GetContrastColor(Bar.WickColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 6139;BA.debugLine="Col = GetContrastColor(Bar.DecreaseColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 };
 BA.debugLineNum = 6141;BA.debugLine="rectTextBackground.Initialize(x, y - TextWi";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 6142;BA.debugLine="rectTextBackground.Top = y - TextWidth - 2d";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 BA.debugLineNum = 6143;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 }else {
 BA.debugLineNum = 6145;BA.debugLine="y = mYAxis0 - (py(1) - py(0)) * Scale(sY(0)";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_myaxis0,(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6146;BA.debugLine="yt = y - dy";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dy}, "-",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6147;BA.debugLine="TextAlignment = \"LEFT\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("LEFT");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6148;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroun";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6149;BA.debugLine="rectTextBackground.Initialize(x, y - TextWi";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_localtextheight}, "+",1, 1))),(Object)(BA.numberCast(float.class, _y)));
 BA.debugLineNum = 6150;BA.debugLine="rectTextBackground.Top = y - TextWidth - 2d";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setTop",BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textwidth,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1)));
 BA.debugLineNum = 6151;BA.debugLine="rectTextBackground.Height = TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runMethod(true,"setHeight",BA.numberCast(float.class, _textwidth));
 BA.debugLineNum = 6152;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 BA.debugLineNum = 6156;BA.debugLine="xcvsGraph.DrawTextRotated(valText, xt, yt, Loc";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _xt)),(Object)(BA.numberCast(float.class, _yt)),(Object)(_localfont),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),_textalignment)),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 };
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 6160;BA.debugLine="Private dyt, dyb As Int";
Debug.JustUpdateDeviceLine();
_dyt = RemoteObject.createImmutable(0);Debug.locals.put("dyt", _dyt);
_dyb = RemoteObject.createImmutable(0);Debug.locals.put("dyb", _dyb);
 BA.debugLineNum = 6162;BA.debugLine="TextHeight = Texts.ScaleTextHeight * 1.2";
Debug.JustUpdateDeviceLine();
_textheight = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.2)}, "*",0, 0));Debug.locals.put("TextHeight", _textheight);
 BA.debugLineNum = 6163;BA.debugLine="rectText = xcvsGraph.MeasureText(10, LocalFont)";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.NumberToString(10)),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6164;BA.debugLine="dyt = 0.35 * TextHeight";
Debug.JustUpdateDeviceLine();
_dyt = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.35),_textheight}, "*",0, 0));Debug.locals.put("dyt", _dyt);
 BA.debugLineNum = 6165;BA.debugLine="dyb = 0.9 * TextHeight";
Debug.JustUpdateDeviceLine();
_dyb = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.9),_textheight}, "*",0, 0));Debug.locals.put("dyb", _dyb);
 BA.debugLineNum = 6167;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step149 = 1;
final int limit149 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step149 > 0 && _i.<Integer>get().intValue() <= limit149) || (step149 < 0 && _i.<Integer>get().intValue() >= limit149) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step149))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6168;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6170;BA.debugLine="ip = i - Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip = RemoteObject.solve(new RemoteObject[] {_i,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 6171;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6172;BA.debugLine="Private py(PD.YArray.Length) As Double";
Debug.JustUpdateDeviceLine();
_py = RemoteObject.createNewArray ("double", new int[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("py", _py);
 BA.debugLineNum = 6173;BA.debugLine="py = PD.YArray";
Debug.JustUpdateDeviceLine();
_py = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("py", _py);
 BA.debugLineNum = 6174;BA.debugLine="valText = NumberFormat3(py(0), Values.MaxDigits";
Debug.JustUpdateDeviceLine();
_valtext = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_py.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("valText", _valtext);
 BA.debugLineNum = 6175;BA.debugLine="rectText = xcvsGraph.MeasureText(valText, Local";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_valtext),(Object)(_localfont));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 6176;BA.debugLine="TextWidth = rectText.Width + Texts.ScaleTextHei";
Debug.JustUpdateDeviceLine();
_textwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_recttext.runMethod(true,"getWidth"),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+",1, 0));Debug.locals.put("TextWidth", _textwidth);
 BA.debugLineNum = 6177;BA.debugLine="TextAlignment = \"CENTER\"";
Debug.JustUpdateDeviceLine();
_textalignment = BA.ObjectToString("CENTER");Debug.locals.put("TextAlignment", _textalignment);
 BA.debugLineNum = 6179;BA.debugLine="x = Graph.Left + Graph.XOffset + (ip + 0.5) * G";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_ip,RemoteObject.createImmutable(0.5)}, "+",1, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "++*",2, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 6181;BA.debugLine="If py(0) >= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_py.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 6182;BA.debugLine="h = Graph.Height - (py(1) - Scale(sY(0)).MinVa";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-*-",2, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 6183;BA.debugLine="If Abs(h) > TextHeight Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textheight))) { 
 BA.debugLineNum = 6184;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6185;BA.debugLine="yt = y - dyt";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dyt}, "-",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6186;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6187;BA.debugLine="rectTextBackground.Initialize(x - TextWidth /";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textheight,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-",1, 1))));
 BA.debugLineNum = 6188;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 6190;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6191;BA.debugLine="h = py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6193;BA.debugLine="h = py(0) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 BA.debugLineNum = 6195;BA.debugLine="If Abs(h) > TextHeight Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textheight))) { 
 BA.debugLineNum = 6198;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6199;BA.debugLine="Col = GetContrastColor(Bar.WickColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6200;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).Mi";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 6202;BA.debugLine="Col = GetContrastColor(Bar.DecreaseColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6203;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).Mi";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 6205;BA.debugLine="yt = y + dyb";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dyb}, "+",1, 1);Debug.locals.put("yt", _yt);
 }else {
 BA.debugLineNum = 6207;BA.debugLine="y = Graph.Bottom - (py(1) - (py(0)) - Scale(";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),(_py.getArrayElement(true,BA.numberCast(int.class, 0))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "--",2, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6208;BA.debugLine="yt = y + dyb";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dyb}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6209;BA.debugLine="Col = GetContrastColor(Graph.ChartBackground";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6210;BA.debugLine="rectTextBackground.Initialize(x - TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textheight,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1))));
 BA.debugLineNum = 6211;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 }else {
 BA.debugLineNum = 6215;BA.debugLine="h = (py(1) - Scale(sY(0)).MinVal) * Scale(sY(0";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 6216;BA.debugLine="If Abs(h) > TextHeight Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textheight))) { 
 BA.debugLineNum = 6217;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6218;BA.debugLine="yt = y + dyb";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dyb}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6219;BA.debugLine="Col = GetContrastColor(Graph.ChartBackgroundC";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6220;BA.debugLine="rectTextBackground.Initialize(x - TextWidth /";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textheight,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1))));
 BA.debugLineNum = 6221;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 6223;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6224;BA.debugLine="h = py(1) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 }else {
 BA.debugLineNum = 6226;BA.debugLine="h = Abs(py(1) - py(0)) * Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),_py.getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("h", _h);
 };
 BA.debugLineNum = 6228;BA.debugLine="If Abs(h) > TextHeight Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Abs",(Object)(BA.numberCast(double.class, _h))),BA.numberCast(double.class, _textheight))) { 
 BA.debugLineNum = 6229;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).Min";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6230;BA.debugLine="yt = y - dyt";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dyt}, "-",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6231;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 6232;BA.debugLine="Col = GetContrastColor(Bar.WickColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 }else {
 BA.debugLineNum = 6234;BA.debugLine="Col = GetContrastColor(Bar.DecreaseColor)";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 };
 }else {
 BA.debugLineNum = 6237;BA.debugLine="y = Graph.Bottom - (py(1) - Scale(sY(0)).Min";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_py.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 6238;BA.debugLine="yt = y + dyb";
Debug.JustUpdateDeviceLine();
_yt = RemoteObject.solve(new RemoteObject[] {_y,_dyb}, "+",1, 1);Debug.locals.put("yt", _yt);
 BA.debugLineNum = 6239;BA.debugLine="Col = GetContrastColor(Graph.ChartBackground";
Debug.JustUpdateDeviceLine();
_col = __ref.runClassMethod (b4a.example.xchart.class, "_getcontrastcolor" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )));Debug.locals.put("Col", _col);
 BA.debugLineNum = 6240;BA.debugLine="rectTextBackground.Initialize(x - TextWidth";
Debug.JustUpdateDeviceLine();
_recttextbackground.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "-/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_textwidth,RemoteObject.createImmutable(2)}, "+/",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_textheight,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "++",2, 1))));
 BA.debugLineNum = 6241;BA.debugLine="xcvsGraph.DrawRect(rectTextBackground, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_recttextbackground),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartBackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 };
 BA.debugLineNum = 6245;BA.debugLine="xcvsGraph.DrawText(valText, x, yt, Texts.ScaleF";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_valtext),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _yt)),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_col),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 6248;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawxscalelog(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawXScaleLog (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3634);
if (RapidSub.canDelegate("drawxscalelog")) { return __ref.runUserSub(false, "xchart","drawxscalelog", __ref);}
RemoteObject _xi = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _xn = RemoteObject.createImmutable(0);
RemoteObject _manti = RemoteObject.createImmutable(0);
RemoteObject _logi = RemoteObject.createImmutable(0);
RemoteObject _l1 = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _val0 = RemoteObject.createImmutable(0);
RemoteObject _h1 = RemoteObject.createImmutable(0);
RemoteObject _h2 = RemoteObject.createImmutable(0);
RemoteObject _h3 = RemoteObject.createImmutable(0);
RemoteObject _h4 = RemoteObject.createImmutable(0);
RemoteObject _h5 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3634;BA.debugLine="Private Sub DrawXScaleLog";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3635;BA.debugLine="Private xi, x0, xn, Manti, Logi, l1 As Int";
Debug.JustUpdateDeviceLine();
_xi = RemoteObject.createImmutable(0);Debug.locals.put("xi", _xi);
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_xn = RemoteObject.createImmutable(0);Debug.locals.put("xn", _xn);
_manti = RemoteObject.createImmutable(0);Debug.locals.put("Manti", _manti);
_logi = RemoteObject.createImmutable(0);Debug.locals.put("Logi", _logi);
_l1 = RemoteObject.createImmutable(0);Debug.locals.put("l1", _l1);
 BA.debugLineNum = 3636;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3637;BA.debugLine="Private Val0 As Double";
Debug.JustUpdateDeviceLine();
_val0 = RemoteObject.createImmutable(0);Debug.locals.put("Val0", _val0);
 BA.debugLineNum = 3638;BA.debugLine="Private h1, h2, h3, h4, h5 As Double";
Debug.JustUpdateDeviceLine();
_h1 = RemoteObject.createImmutable(0);Debug.locals.put("h1", _h1);
_h2 = RemoteObject.createImmutable(0);Debug.locals.put("h2", _h2);
_h3 = RemoteObject.createImmutable(0);Debug.locals.put("h3", _h3);
_h4 = RemoteObject.createImmutable(0);Debug.locals.put("h4", _h4);
_h5 = RemoteObject.createImmutable(0);Debug.locals.put("h5", _h5);
 BA.debugLineNum = 3647;BA.debugLine="h1 = 1.1";
Debug.JustUpdateDeviceLine();
_h1 = BA.numberCast(double.class, 1.1);Debug.locals.put("h1", _h1);
 BA.debugLineNum = 3648;BA.debugLine="h2 = 0.25";
Debug.JustUpdateDeviceLine();
_h2 = BA.numberCast(double.class, 0.25);Debug.locals.put("h2", _h2);
 BA.debugLineNum = 3649;BA.debugLine="h3 = 0.3";
Debug.JustUpdateDeviceLine();
_h3 = BA.numberCast(double.class, 0.3);Debug.locals.put("h3", _h3);
 BA.debugLineNum = 3650;BA.debugLine="h4 = 0.6";
Debug.JustUpdateDeviceLine();
_h4 = BA.numberCast(double.class, 0.6);Debug.locals.put("h4", _h4);
 BA.debugLineNum = 3651;BA.debugLine="h5 = 0.8";
Debug.JustUpdateDeviceLine();
_h5 = BA.numberCast(double.class, 0.8);Debug.locals.put("h5", _h5);
 BA.debugLineNum = 3653;BA.debugLine="l1 = 4dip";
Debug.JustUpdateDeviceLine();
_l1 = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)));Debug.locals.put("l1", _l1);
 BA.debugLineNum = 3655;BA.debugLine="x0 = Graph.Left - (ScaleLog(sX).MantMin + ScaleLo";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 3656;BA.debugLine="Val0 = -1";
Debug.JustUpdateDeviceLine();
_val0 = BA.numberCast(double.class, -(double) (0 + 1));Debug.locals.put("Val0", _val0);
 BA.debugLineNum = 3657;BA.debugLine="Manti = ScaleLog(sX).MantMin";
Debug.JustUpdateDeviceLine();
_manti = __ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ );Debug.locals.put("Manti", _manti);
 BA.debugLineNum = 3658;BA.debugLine="Logi = ScaleLog(sX).LogMinIndex";
Debug.JustUpdateDeviceLine();
_logi = __ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMinIndex" /*RemoteObject*/ );Debug.locals.put("Logi", _logi);
 BA.debugLineNum = 3659;BA.debugLine="Do While Val0 < Scale(sX).MaxVal";
Debug.JustUpdateDeviceLine();
while (RemoteObject.solveBoolean("<",_val0,__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ))) {
 BA.debugLineNum = 3660;BA.debugLine="xi = x0 + (ScaleLog(sX).Logs(Logi) + Manti) * Sc";
Debug.JustUpdateDeviceLine();
_xi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_x0,(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,_logi),_manti}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("xi", _xi);
 BA.debugLineNum = 3661;BA.debugLine="xcvsGraph.DrawLine(xi, Graph.Bottom - 4dip, xi,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3662;BA.debugLine="If ScaleLog(sX).Logs(Logi) <> 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,_logi),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3663;BA.debugLine="xcvsGraph.DrawLine(xi, Graph.Top, xi, Graph.Bot";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 3665;BA.debugLine="xcvsGraph.DrawLine(xi, Graph.Top, xi, Graph.Bot";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColorDark" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 3667;BA.debugLine="Val0 = Power(10, ScaleLog(sX).Logs(Logi) + Manti";
Debug.JustUpdateDeviceLine();
_val0 = xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,_logi),_manti}, "+",1, 0)));Debug.locals.put("Val0", _val0);
 BA.debugLineNum = 3668;BA.debugLine="txt = NumberFormat3(Val0, 6)";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_val0),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3670;BA.debugLine="Select Graph.XScaleTextOrientation";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XScaleTextOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"),BA.ObjectToString("VERTICAL"),BA.ObjectToString("45 DEGREES"))) {
case 0: {
 BA.debugLineNum = 3672;BA.debugLine="If (xi - xn) > 1.3 * MeasureTextWidth(txt, Tex";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_xi,_xn}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.3),__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))}, "*",0, 0))) { 
 BA.debugLineNum = 3673;BA.debugLine="xcvsGraph.DrawText(txt, xi, Graph.Bottom + h1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h1,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("CENTER"))));
 BA.debugLineNum = 3674;BA.debugLine="xn = xi";
Debug.JustUpdateDeviceLine();
_xn = _xi;Debug.locals.put("xn", _xn);
 };
 break; }
case 1: {
 BA.debugLineNum = 3677;BA.debugLine="If (xi - xn) > 1.8 * Texts.ScaleTextHeight The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_xi,_xn}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3678;BA.debugLine="xcvsGraph.DrawTextRotated(txt, xi + h2 * Text";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xi,_h2,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h4,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"RIGHT")),(Object)(BA.numberCast(float.class, -(double) (0 + 90))));
 BA.debugLineNum = 3679;BA.debugLine="xn = xi";
Debug.JustUpdateDeviceLine();
_xn = _xi;Debug.locals.put("xn", _xn);
 };
 break; }
case 2: {
 BA.debugLineNum = 3682;BA.debugLine="If (xi - xn) > 1.8 * Texts.ScaleTextHeight The";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",(RemoteObject.solve(new RemoteObject[] {_xi,_xn}, "-",1, 1)),RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "*",0, 0))) { 
 BA.debugLineNum = 3683;BA.debugLine="xcvsGraph.DrawTextRotated(txt, xi + h3 * Text";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawTextRotated",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_xi,_h3,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_h5,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),"RIGHT")),(Object)(BA.numberCast(float.class, -(double) (0 + 45))));
 BA.debugLineNum = 3684;BA.debugLine="xn = xi";
Debug.JustUpdateDeviceLine();
_xn = _xi;Debug.locals.put("xn", _xn);
 };
 BA.debugLineNum = 3686;BA.debugLine="xcvsGraph.DrawLine(xi, Graph.Bottom, xi, Graph";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _xi)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),_l1}, "+",1, 1))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 break; }
}
;
 BA.debugLineNum = 3689;BA.debugLine="Logi = Logi + 1";
Debug.JustUpdateDeviceLine();
_logi = RemoteObject.solve(new RemoteObject[] {_logi,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("Logi", _logi);
 BA.debugLineNum = 3690;BA.debugLine="If Logi = ScaleLog(sX).Logs.Length - 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_logi,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(false,"Logs" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1)))) { 
 BA.debugLineNum = 3691;BA.debugLine="Logi = 0";
Debug.JustUpdateDeviceLine();
_logi = BA.numberCast(int.class, 0);Debug.locals.put("Logi", _logi);
 BA.debugLineNum = 3692;BA.debugLine="Manti = Manti + 1";
Debug.JustUpdateDeviceLine();
_manti = RemoteObject.solve(new RemoteObject[] {_manti,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("Manti", _manti);
 };
 }
;
 BA.debugLineNum = 3695;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawyscalelog(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawYScaleLog (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,3413);
if (RapidSub.canDelegate("drawyscalelog")) { return __ref.runUserSub(false, "xchart","drawyscalelog", __ref);}
RemoteObject _yi = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _manti = RemoteObject.createImmutable(0);
RemoteObject _logi = RemoteObject.createImmutable(0);
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _val0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 3413;BA.debugLine="Private Sub DrawYScaleLog";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 3414;BA.debugLine="Private yi, y0, Manti, Logi As Int";
Debug.JustUpdateDeviceLine();
_yi = RemoteObject.createImmutable(0);Debug.locals.put("yi", _yi);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_manti = RemoteObject.createImmutable(0);Debug.locals.put("Manti", _manti);
_logi = RemoteObject.createImmutable(0);Debug.locals.put("Logi", _logi);
 BA.debugLineNum = 3415;BA.debugLine="Private txt As String";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.createImmutable("");Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3416;BA.debugLine="Private Val0 As Double";
Debug.JustUpdateDeviceLine();
_val0 = RemoteObject.createImmutable(0);Debug.locals.put("Val0", _val0);
 BA.debugLineNum = 3418;BA.debugLine="ScaleLog(sY(0)).Scale = Graph.Height / (ScaleLog(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ )}, "+--",3, 0))}, "/",0, 0));
 BA.debugLineNum = 3419;BA.debugLine="y0 = Graph.Bottom + (ScaleLog(sY(0)).MantMin + Sc";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 3420;BA.debugLine="Val0 = -1";
Debug.JustUpdateDeviceLine();
_val0 = BA.numberCast(double.class, -(double) (0 + 1));Debug.locals.put("Val0", _val0);
 BA.debugLineNum = 3421;BA.debugLine="Manti = ScaleLog(sY(0)).MantMin";
Debug.JustUpdateDeviceLine();
_manti = __ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ );Debug.locals.put("Manti", _manti);
 BA.debugLineNum = 3422;BA.debugLine="Logi = ScaleLog(sY(0)).LogMinIndex";
Debug.JustUpdateDeviceLine();
_logi = __ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMinIndex" /*RemoteObject*/ );Debug.locals.put("Logi", _logi);
 BA.debugLineNum = 3423;BA.debugLine="Do While Val0 < Round2(Scale(sY(0)).MaxVal, 12)";
Debug.JustUpdateDeviceLine();
while (RemoteObject.solveBoolean("<",_val0,xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 12))))) {
 BA.debugLineNum = 3424;BA.debugLine="yi = y0 - (ScaleLog(sY(0)).Logs(Logi) + Manti) *";
Debug.JustUpdateDeviceLine();
_yi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y0,(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,_logi),_manti}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("yi", _yi);
 BA.debugLineNum = 3425;BA.debugLine="xcvsGraph.DrawLine(Graph.Left - 4dip, yi, Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, _yi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _yi)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 3426;BA.debugLine="If Graph.DrawHorizontalGridLines = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawHorizontalGridLines" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3427;BA.debugLine="If ScaleLog(sY(0)).Logs(Logi) <> 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,_logi),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 3428;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, yi, Graph.Right";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _yi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _yi)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 3430;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, yi, Graph.Right";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _yi)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _yi)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridColorDark" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 3434;BA.debugLine="If Scale(sY(0)).DrawYScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 3435;BA.debugLine="Val0 = Round2(Power(10, ScaleLog(sY(0)).Logs(Lo";
Debug.JustUpdateDeviceLine();
_val0 = xchart.__c.runMethod(true,"Round2",(Object)(xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,_logi),_manti}, "+",1, 0)))),(Object)(BA.numberCast(int.class, 12)));Debug.locals.put("Val0", _val0);
 BA.debugLineNum = 3436;BA.debugLine="txt = NumberFormat3(Val0, 6)";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_val0),(Object)(BA.numberCast(int.class, 6)));Debug.locals.put("txt", _txt);
 BA.debugLineNum = 3438;BA.debugLine="xcvsGraph.DrawText(txt, Graph.Left - 0.75 * Text";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_yi,RemoteObject.createImmutable(0.52),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 3445;BA.debugLine="Logi = Logi + 1";
Debug.JustUpdateDeviceLine();
_logi = RemoteObject.solve(new RemoteObject[] {_logi,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("Logi", _logi);
 BA.debugLineNum = 3446;BA.debugLine="If Logi = ScaleLog(sY(0)).Logs.Length - 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_logi,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(false,"Logs" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1)))) { 
 BA.debugLineNum = 3447;BA.debugLine="Logi = 0";
Debug.JustUpdateDeviceLine();
_logi = BA.numberCast(int.class, 0);Debug.locals.put("Logi", _logi);
 BA.debugLineNum = 3448;BA.debugLine="Manti = Manti + 1";
Debug.JustUpdateDeviceLine();
_manti = RemoteObject.solve(new RemoteObject[] {_manti,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("Manti", _manti);
 };
 };
 }
;
 BA.debugLineNum = 3452;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawyxchartvalues(RemoteObject __ref,RemoteObject _cursx,RemoteObject _cursy) throws Exception{
try {
		Debug.PushSubsStack("DrawYXChartValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8511);
if (RapidSub.canDelegate("drawyxchartvalues")) { return __ref.runUserSub(false, "xchart","drawyxchartvalues", __ref, _cursx, _cursy);}
RemoteObject _pointx = RemoteObject.createImmutable(0);
RemoteObject _pointy = RemoteObject.createImmutable(0);
RemoteObject _logval = RemoteObject.createImmutable(0);
RemoteObject _ic = RemoteObject.createImmutable(0);
RemoteObject _ip = RemoteObject.createImmutable(0);
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _xi = RemoteObject.createImmutable(0);
RemoteObject _yi = RemoteObject.createImmutable(0);
RemoteObject _found = RemoteObject.createImmutable(false);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _dx = RemoteObject.createImmutable(0);
RemoteObject _dy = RemoteObject.createImmutable(0);
RemoteObject _yx = null;
RemoteObject _cx = RemoteObject.createImmutable(0);
RemoteObject _cy = RemoteObject.createImmutable(0);
RemoteObject _rectdisplay = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _recttext = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _wcurvename = RemoteObject.createImmutable(0);
RemoteObject _wtextx = RemoteObject.createImmutable(0);
RemoteObject _wtexty = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _yrecttop = RemoteObject.createImmutable(0);
RemoteObject _texttop = RemoteObject.createImmutable(0);
RemoteObject _textleft = RemoteObject.createImmutable(0);
RemoteObject _hdisplay = RemoteObject.createImmutable(0);
RemoteObject _wdisplay = RemoteObject.createImmutable(0);
RemoteObject _txtx = RemoteObject.createImmutable("");
RemoteObject _txty = RemoteObject.createImmutable("");
Debug.locals.put("CursX", _cursx);
Debug.locals.put("CursY", _cursy);
 BA.debugLineNum = 8511;BA.debugLine="Private Sub DrawYXChartValues(CursX As Float, Curs";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8512;BA.debugLine="Private PointX, PointY, LogVal As Double";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.createImmutable(0);Debug.locals.put("PointX", _pointx);
_pointy = RemoteObject.createImmutable(0);Debug.locals.put("PointY", _pointy);
_logval = RemoteObject.createImmutable(0);Debug.locals.put("LogVal", _logval);
 BA.debugLineNum = 8513;BA.debugLine="Private ic, ip As Int";
Debug.JustUpdateDeviceLine();
_ic = RemoteObject.createImmutable(0);Debug.locals.put("ic", _ic);
_ip = RemoteObject.createImmutable(0);Debug.locals.put("ip", _ip);
 BA.debugLineNum = 8514;BA.debugLine="Private x0, y0, xi, yi As Int";
Debug.JustUpdateDeviceLine();
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_xi = RemoteObject.createImmutable(0);Debug.locals.put("xi", _xi);
_yi = RemoteObject.createImmutable(0);Debug.locals.put("yi", _yi);
 BA.debugLineNum = 8515;BA.debugLine="Private Found = False As Boolean";
Debug.JustUpdateDeviceLine();
_found = xchart.__c.getField(true,"False");Debug.locals.put("Found", _found);Debug.locals.put("Found", _found);
 BA.debugLineNum = 8517;BA.debugLine="If Scale(sX).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8518;BA.debugLine="PointX = Scale(sX).MinVal + (CursX - Graph.Left)";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursx,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointX", _pointx);
 }else {
 BA.debugLineNum = 8520;BA.debugLine="LogVal = (CursX - Graph.Left) / ScaleLog(sX).Sca";
Debug.JustUpdateDeviceLine();
_logval = RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_cursx,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "/++",2, 0);Debug.locals.put("LogVal", _logval);
 BA.debugLineNum = 8521;BA.debugLine="PointX = Power(10, LogVal)";
Debug.JustUpdateDeviceLine();
_pointx = xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(_logval));Debug.locals.put("PointX", _pointx);
 };
 BA.debugLineNum = 8524;BA.debugLine="If Scale(sY(0)).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8525;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8526;BA.debugLine="PointY = Scale(sY(0)).MaxVal - (CursY - Graph.T";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursy,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-/",1, 0);Debug.locals.put("PointY", _pointy);
 }else {
 BA.debugLineNum = 8528;BA.debugLine="PointY = Scale(sY(0)).MinVal + (CursY - Graph.T";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursy,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointY", _pointy);
 };
 }else {
 BA.debugLineNum = 8531;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8532;BA.debugLine="LogVal = ScaleLog(sY(0)).MantMax + ScaleLog(sY(";
Debug.JustUpdateDeviceLine();
_logval = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMax" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursy,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+-/",2, 0);Debug.locals.put("LogVal", _logval);
 }else {
 BA.debugLineNum = 8534;BA.debugLine="LogVal = ScaleLog(sY(0)).MantMin - ScaleLog(sY(";
Debug.JustUpdateDeviceLine();
_logval = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_cursy,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-+/",2, 0);Debug.locals.put("LogVal", _logval);
 };
 BA.debugLineNum = 8536;BA.debugLine="PointY = Power(10, LogVal)";
Debug.JustUpdateDeviceLine();
_pointy = xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(_logval));Debug.locals.put("PointY", _pointy);
 };
 BA.debugLineNum = 8539;BA.debugLine="If Scale(sX).Logarithmic = False And Scale(sY(0))";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8540;BA.debugLine="For ic = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step26 = 1;
final int limit26 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ic = BA.numberCast(int.class, 0) ;
for (;(step26 > 0 && _ic.<Integer>get().intValue() <= limit26) || (step26 < 0 && _ic.<Integer>get().intValue() >= limit26) ;_ic = RemoteObject.createImmutable((int)(0 + _ic.<Integer>get().intValue() + step26))  ) {
Debug.locals.put("ic", _ic);
 BA.debugLineNum = 8541;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 8542;BA.debugLine="Private dx, dy As Double";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.createImmutable(0);Debug.locals.put("dx", _dx);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8544;BA.debugLine="ID = Items.Get(ic)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ic)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 8545;BA.debugLine="dx = 5dip / Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "/",0, 0);Debug.locals.put("dx", _dx);
 BA.debugLineNum = 8546;BA.debugLine="dy = 5dip / Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_dy = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "/",0, 0);Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8548;BA.debugLine="For ip = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step32 = 1;
final int limit32 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ip = BA.numberCast(int.class, 0) ;
for (;(step32 > 0 && _ip.<Integer>get().intValue() <= limit32) || (step32 < 0 && _ip.<Integer>get().intValue() >= limit32) ;_ip = RemoteObject.createImmutable((int)(0 + _ip.<Integer>get().intValue() + step32))  ) {
Debug.locals.put("ip", _ip);
 BA.debugLineNum = 8549;BA.debugLine="Private YX(2) As Double";
Debug.JustUpdateDeviceLine();
_yx = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8550;BA.debugLine="YX = ID.YXArray.Get(ip)";
Debug.JustUpdateDeviceLine();
_yx = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ip)));Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8551;BA.debugLine="If Abs(YX(0) - PointX) < dx And Abs(YX(1) - Po";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 0)),_pointx}, "-",1, 0))),_dx) && RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 1)),_pointy}, "-",1, 0))),_dy)) { 
 BA.debugLineNum = 8552;BA.debugLine="Found = True";
Debug.JustUpdateDeviceLine();
_found = xchart.__c.getField(true,"True");Debug.locals.put("Found", _found);
 BA.debugLineNum = 8553;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ip", _ip);
;
 BA.debugLineNum = 8556;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8557;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ic", _ic);
;
 }else 
{ BA.debugLineNum = 8560;BA.debugLine="Else If Scale(sX).Logarithmic = True And Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8561;BA.debugLine="For ic = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step45 = 1;
final int limit45 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ic = BA.numberCast(int.class, 0) ;
for (;(step45 > 0 && _ic.<Integer>get().intValue() <= limit45) || (step45 < 0 && _ic.<Integer>get().intValue() >= limit45) ;_ic = RemoteObject.createImmutable((int)(0 + _ic.<Integer>get().intValue() + step45))  ) {
Debug.locals.put("ic", _ic);
 BA.debugLineNum = 8562;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 8563;BA.debugLine="Private dx, dy As Double";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.createImmutable(0);Debug.locals.put("dx", _dx);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8565;BA.debugLine="ID = Items.Get(ic)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ic)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 8566;BA.debugLine="dx = 5dip";
Debug.JustUpdateDeviceLine();
_dx = BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));Debug.locals.put("dx", _dx);
 BA.debugLineNum = 8567;BA.debugLine="dy = 5dip / Scale(sY(0)).Scale";
Debug.JustUpdateDeviceLine();
_dy = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "/",0, 0);Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8569;BA.debugLine="xi = Graph.Left - (ScaleLog(sX).MantMin + Scale";
Debug.JustUpdateDeviceLine();
_xi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("xi", _xi);
 BA.debugLineNum = 8570;BA.debugLine="For ip = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step52 = 1;
final int limit52 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ip = BA.numberCast(int.class, 0) ;
for (;(step52 > 0 && _ip.<Integer>get().intValue() <= limit52) || (step52 < 0 && _ip.<Integer>get().intValue() >= limit52) ;_ip = RemoteObject.createImmutable((int)(0 + _ip.<Integer>get().intValue() + step52))  ) {
Debug.locals.put("ip", _ip);
 BA.debugLineNum = 8571;BA.debugLine="Private YX(2) As Double";
Debug.JustUpdateDeviceLine();
_yx = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8572;BA.debugLine="YX = ID.YXArray.Get(ip)";
Debug.JustUpdateDeviceLine();
_yx = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ip)));Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8573;BA.debugLine="x0 = xi + Logarithm(YX(0), 10) * ScaleLog(sX).";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 8574;BA.debugLine="If Abs(x0 - CursX) < dx And Abs(YX(1) - PointY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_x0,_cursx}, "-",1, 0))),_dx) && RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 1)),_pointy}, "-",1, 0))),_dy)) { 
 BA.debugLineNum = 8575;BA.debugLine="Found = True";
Debug.JustUpdateDeviceLine();
_found = xchart.__c.getField(true,"True");Debug.locals.put("Found", _found);
 BA.debugLineNum = 8576;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ip", _ip);
;
 BA.debugLineNum = 8579;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8580;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ic", _ic);
;
 }else 
{ BA.debugLineNum = 8583;BA.debugLine="Else If Scale(sX).Logarithmic = False And Scale(s";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8584;BA.debugLine="For ic = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step66 = 1;
final int limit66 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ic = BA.numberCast(int.class, 0) ;
for (;(step66 > 0 && _ic.<Integer>get().intValue() <= limit66) || (step66 < 0 && _ic.<Integer>get().intValue() >= limit66) ;_ic = RemoteObject.createImmutable((int)(0 + _ic.<Integer>get().intValue() + step66))  ) {
Debug.locals.put("ic", _ic);
 BA.debugLineNum = 8585;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 8586;BA.debugLine="Private dx, dy As Double";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.createImmutable(0);Debug.locals.put("dx", _dx);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8588;BA.debugLine="ID = Items.Get(ic)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ic)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 8589;BA.debugLine="dx = 5dip / Scale(sX).Scale";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "/",0, 0);Debug.locals.put("dx", _dx);
 BA.debugLineNum = 8590;BA.debugLine="dy = 5dip";
Debug.JustUpdateDeviceLine();
_dy = BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8592;BA.debugLine="yi = Graph.Bottom + (ScaleLog(sY(0)).MantMin +";
Debug.JustUpdateDeviceLine();
_yi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yi", _yi);
 BA.debugLineNum = 8593;BA.debugLine="For ip = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step73 = 1;
final int limit73 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ip = BA.numberCast(int.class, 0) ;
for (;(step73 > 0 && _ip.<Integer>get().intValue() <= limit73) || (step73 < 0 && _ip.<Integer>get().intValue() >= limit73) ;_ip = RemoteObject.createImmutable((int)(0 + _ip.<Integer>get().intValue() + step73))  ) {
Debug.locals.put("ip", _ip);
 BA.debugLineNum = 8594;BA.debugLine="Private YX(2) As Double";
Debug.JustUpdateDeviceLine();
_yx = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8595;BA.debugLine="YX = ID.YXArray.Get(ip)";
Debug.JustUpdateDeviceLine();
_yx = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ip)));Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8596;BA.debugLine="y0 = yi - Logarithm(YX(1), 10) * ScaleLog(sY(0";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 8597;BA.debugLine="If Abs(YX(0) - PointX) < dx And Abs(y0 - CursY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 0)),_pointx}, "-",1, 0))),_dx) && RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_y0,_cursy}, "-",1, 0))),_dy)) { 
 BA.debugLineNum = 8598;BA.debugLine="Found = True";
Debug.JustUpdateDeviceLine();
_found = xchart.__c.getField(true,"True");Debug.locals.put("Found", _found);
 BA.debugLineNum = 8599;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ip", _ip);
;
 BA.debugLineNum = 8602;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8603;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ic", _ic);
;
 }else 
{ BA.debugLineNum = 8606;BA.debugLine="Else If Scale(sX).Logarithmic = True And Scale(sY";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8607;BA.debugLine="For ic = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step87 = 1;
final int limit87 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ic = BA.numberCast(int.class, 0) ;
for (;(step87 > 0 && _ic.<Integer>get().intValue() <= limit87) || (step87 < 0 && _ic.<Integer>get().intValue() >= limit87) ;_ic = RemoteObject.createImmutable((int)(0 + _ic.<Integer>get().intValue() + step87))  ) {
Debug.locals.put("ic", _ic);
 BA.debugLineNum = 8608;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 8609;BA.debugLine="Private dx, dy As Double";
Debug.JustUpdateDeviceLine();
_dx = RemoteObject.createImmutable(0);Debug.locals.put("dx", _dx);
_dy = RemoteObject.createImmutable(0);Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8611;BA.debugLine="ID = Items.Get(ic)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ic)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 8612;BA.debugLine="dx = 5dip";
Debug.JustUpdateDeviceLine();
_dx = BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));Debug.locals.put("dx", _dx);
 BA.debugLineNum = 8613;BA.debugLine="dy = 5dip";
Debug.JustUpdateDeviceLine();
_dy = BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));Debug.locals.put("dy", _dy);
 BA.debugLineNum = 8615;BA.debugLine="xi = Graph.Left - (ScaleLog(sX).MantMin + Scale";
Debug.JustUpdateDeviceLine();
_xi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("xi", _xi);
 BA.debugLineNum = 8616;BA.debugLine="yi = Graph.Bottom + (ScaleLog(sY(0)).MantMin +";
Debug.JustUpdateDeviceLine();
_yi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yi", _yi);
 BA.debugLineNum = 8617;BA.debugLine="For ip = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step95 = 1;
final int limit95 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_ip = BA.numberCast(int.class, 0) ;
for (;(step95 > 0 && _ip.<Integer>get().intValue() <= limit95) || (step95 < 0 && _ip.<Integer>get().intValue() >= limit95) ;_ip = RemoteObject.createImmutable((int)(0 + _ip.<Integer>get().intValue() + step95))  ) {
Debug.locals.put("ip", _ip);
 BA.debugLineNum = 8618;BA.debugLine="Private YX(2) As Double";
Debug.JustUpdateDeviceLine();
_yx = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8619;BA.debugLine="YX = ID.YXArray.Get(ip)";
Debug.JustUpdateDeviceLine();
_yx = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_ip)));Debug.locals.put("YX", _yx);
 BA.debugLineNum = 8620;BA.debugLine="x0 = xi + Logarithm(YX(0), 10) * ScaleLog(sX).";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 BA.debugLineNum = 8621;BA.debugLine="y0 = yi - Logarithm(YX(1), 10) * ScaleLog(sY(0";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 BA.debugLineNum = 8623;BA.debugLine="If Abs(x0 - CursX) < dx And Abs(y0 - CursY) <";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_x0,_cursx}, "-",1, 0))),_dx) && RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(RemoteObject.solve(new RemoteObject[] {_y0,_cursy}, "-",1, 0))),_dy)) { 
 BA.debugLineNum = 8624;BA.debugLine="Found = True";
Debug.JustUpdateDeviceLine();
_found = xchart.__c.getField(true,"True");Debug.locals.put("Found", _found);
 BA.debugLineNum = 8625;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ip", _ip);
;
 BA.debugLineNum = 8628;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8629;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("ic", _ic);
;
 }}}}
;
 BA.debugLineNum = 8634;BA.debugLine="xcvsCursor.ClearRect(xcvsCursor.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 8635;BA.debugLine="xcvsValues.ClearRect(xcvsValues.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 8637;BA.debugLine="If mYXChartDisplayCrossHair = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplaycrosshair" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8638;BA.debugLine="If Found = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8639;BA.debugLine="xcvsCursor.DrawLine(CursX, Graph.Top, CursX, Gr";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(_cursx),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(_cursx),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(true,"_myxchartcrosshaircolor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 8640;BA.debugLine="xcvsCursor.DrawLine(Graph.Left, CursY, Graph.Ri";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(_cursy),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(_cursy),(Object)(__ref.getField(true,"_myxchartcrosshaircolor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 8642;BA.debugLine="Private cx, cy As Int";
Debug.JustUpdateDeviceLine();
_cx = RemoteObject.createImmutable(0);Debug.locals.put("cx", _cx);
_cy = RemoteObject.createImmutable(0);Debug.locals.put("cy", _cy);
 BA.debugLineNum = 8643;BA.debugLine="If Scale(sX).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8644;BA.debugLine="cx = (YX(0) - Scale(sX).MinVal) * Scale(sX).Sc";
Debug.JustUpdateDeviceLine();
_cx = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "*+",1, 0));Debug.locals.put("cx", _cx);
 }else {
 BA.debugLineNum = 8646;BA.debugLine="xi = Graph.Left - (ScaleLog(sX).MantMin + Scal";
Debug.JustUpdateDeviceLine();
_xi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("xi", _xi);
 BA.debugLineNum = 8647;BA.debugLine="cx = xi + Logarithm(YX(0), 10) * ScaleLog(sX).";
Debug.JustUpdateDeviceLine();
_cx = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("cx", _cx);
 };
 BA.debugLineNum = 8650;BA.debugLine="If Scale(sY(0)).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8651;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8652;BA.debugLine="cy =  Graph.Bottom - (YX(1) - Scale(sY(0)).Mi";
Debug.JustUpdateDeviceLine();
_cy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("cy", _cy);
 }else {
 BA.debugLineNum = 8654;BA.debugLine="cy =  Graph.Top + (YX(1) - Scale(sY(0)).MinVa";
Debug.JustUpdateDeviceLine();
_cy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yx.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("cy", _cy);
 };
 }else {
 BA.debugLineNum = 8657;BA.debugLine="yi = Graph.Bottom + (ScaleLog(sY(0)).MantMin +";
Debug.JustUpdateDeviceLine();
_yi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yi", _yi);
 BA.debugLineNum = 8658;BA.debugLine="cy = yi - Logarithm(YX(1), 10) * ScaleLog(sY(0";
Debug.JustUpdateDeviceLine();
_cy = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("cy", _cy);
 };
 BA.debugLineNum = 8660;BA.debugLine="xcvsCursor.DrawLine(cx, Graph.Top, cx, Graph.Bo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _cx)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _cx)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 8661;BA.debugLine="xcvsCursor.DrawLine(Graph.Left, cy, Graph.Right";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _cy)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _cy)),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 8662;BA.debugLine="If ID.PointType = \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 8663;BA.debugLine="xcvsCursor.DrawCircle(cx, cy, 5dip, ID.Color,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("DrawCircle",(Object)(BA.numberCast(float.class, _cx)),(Object)(BA.numberCast(float.class, _cy)),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))))),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 };
 };
 BA.debugLineNum = 8668;BA.debugLine="If mYXChartDisplayValues = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplayvalues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8669;BA.debugLine="Private rectDisplay, rectText As B4XRect";
Debug.JustUpdateDeviceLine();
_rectdisplay = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectDisplay", _rectdisplay);
_recttext = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 8670;BA.debugLine="Private wCurveName, wTextX, wTextY As Int";
Debug.JustUpdateDeviceLine();
_wcurvename = RemoteObject.createImmutable(0);Debug.locals.put("wCurveName", _wcurvename);
_wtextx = RemoteObject.createImmutable(0);Debug.locals.put("wTextX", _wtextx);
_wtexty = RemoteObject.createImmutable(0);Debug.locals.put("wTextY", _wtexty);
 BA.debugLineNum = 8671;BA.debugLine="Private x, y, yRectTop, TextTop, TextLeft, hDisp";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
_yrecttop = RemoteObject.createImmutable(0);Debug.locals.put("yRectTop", _yrecttop);
_texttop = RemoteObject.createImmutable(0);Debug.locals.put("TextTop", _texttop);
_textleft = RemoteObject.createImmutable(0);Debug.locals.put("TextLeft", _textleft);
_hdisplay = RemoteObject.createImmutable(0);Debug.locals.put("hDisplay", _hdisplay);
_wdisplay = RemoteObject.createImmutable(0);Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8672;BA.debugLine="Private txtX, txtY As String";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.createImmutable("");Debug.locals.put("txtX", _txtx);
_txty = RemoteObject.createImmutable("");Debug.locals.put("txtY", _txty);
 BA.debugLineNum = 8674;BA.debugLine="rectText = xcvsCursor.MeasureText(\"My\", Texts.Sc";
Debug.JustUpdateDeviceLine();
_recttext = __ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(BA.ObjectToString("My")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("rectText", _recttext);
 BA.debugLineNum = 8675;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8676;BA.debugLine="txtX = \"x = \" & NumberFormat3(YX(0), 6)";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.concat(RemoteObject.createImmutable("x = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtX", _txtx);
 BA.debugLineNum = 8677;BA.debugLine="txtY = \"y = \" & NumberFormat3(YX(1), 6)";
Debug.JustUpdateDeviceLine();
_txty = RemoteObject.concat(RemoteObject.createImmutable("y = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_yx.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtY", _txty);
 BA.debugLineNum = 8678;BA.debugLine="wCurveName = MeasureTextWidth(ID.Name, Texts.Sc";
Debug.JustUpdateDeviceLine();
_wcurvename = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_id.getField(true,"Name" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wCurveName", _wcurvename);
 BA.debugLineNum = 8679;BA.debugLine="wTextX = MeasureTextWidth(txtX, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtextx = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txtx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextX", _wtextx);
 BA.debugLineNum = 8680;BA.debugLine="wTextY = MeasureTextWidth(txtY, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtexty = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txty),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextY", _wtexty);
 BA.debugLineNum = 8681;BA.debugLine="wDisplay = Max(wCurveName, wTextX)";
Debug.JustUpdateDeviceLine();
_wdisplay = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _wcurvename)),(Object)(BA.numberCast(double.class, _wtextx))));Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8682;BA.debugLine="wDisplay = Max(wTextY, wDisplay) + 10dip";
Debug.JustUpdateDeviceLine();
_wdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _wtexty)),(Object)(BA.numberCast(double.class, _wdisplay))),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 0));Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8683;BA.debugLine="hDisplay = 3.1 * rectText.Height + 10dip";
Debug.JustUpdateDeviceLine();
_hdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(3.1),_recttext.runMethod(true,"getHeight"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "*+",1, 0));Debug.locals.put("hDisplay", _hdisplay);
 }else {
 BA.debugLineNum = 8685;BA.debugLine="txtX = \"x = \" & NumberFormat3(PointX, 6)";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.concat(RemoteObject.createImmutable("x = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_pointx),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtX", _txtx);
 BA.debugLineNum = 8686;BA.debugLine="txtY = \"y = \" & NumberFormat3(PointY, 6)";
Debug.JustUpdateDeviceLine();
_txty = RemoteObject.concat(RemoteObject.createImmutable("y = "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_pointy),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txtY", _txty);
 BA.debugLineNum = 8687;BA.debugLine="wTextX = MeasureTextWidth(txtX, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtextx = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txtx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextX", _wtextx);
 BA.debugLineNum = 8688;BA.debugLine="wTextY = MeasureTextWidth(txtY, Texts.ScaleFont";
Debug.JustUpdateDeviceLine();
_wtexty = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txty),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("wTextY", _wtexty);
 BA.debugLineNum = 8689;BA.debugLine="wDisplay = Max(wTextX, wTextY) + 10dip";
Debug.JustUpdateDeviceLine();
_wdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _wtextx)),(Object)(BA.numberCast(double.class, _wtexty))),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 0));Debug.locals.put("wDisplay", _wdisplay);
 BA.debugLineNum = 8690;BA.debugLine="hDisplay = 2 * rectText.Height + 10dip";
Debug.JustUpdateDeviceLine();
_hdisplay = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),_recttext.runMethod(true,"getHeight"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "*+",1, 0));Debug.locals.put("hDisplay", _hdisplay);
 };
 BA.debugLineNum = 8693;BA.debugLine="If mYXChartDisplayPosition = \"CORNERS\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplayposition" /*RemoteObject*/ ),BA.ObjectToString("CORNERS"))) { 
 BA.debugLineNum = 8694;BA.debugLine="yRectTop = Graph.Top + 2dip '2dip to be insides";
Debug.JustUpdateDeviceLine();
_yrecttop = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1);Debug.locals.put("yRectTop", _yrecttop);
 BA.debugLineNum = 8695;BA.debugLine="TextTop = yRectTop + 5dip";
Debug.JustUpdateDeviceLine();
_texttop = RemoteObject.solve(new RemoteObject[] {_yrecttop,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextTop", _texttop);
 BA.debugLineNum = 8696;BA.debugLine="If CursX < (Graph.Left + Graph.Right) / 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_cursx,RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ )}, "+",1, 1)),RemoteObject.createImmutable(2)}, "/",0, 0))) { 
 BA.debugLineNum = 8697;BA.debugLine="TextLeft = Graph.Left + 5dip";
Debug.JustUpdateDeviceLine();
_textleft = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextLeft", _textleft);
 BA.debugLineNum = 8698;BA.debugLine="rectDisplay.Initialize(Graph.Left + 2dip, yRec";
Debug.JustUpdateDeviceLine();
_rectdisplay.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, _yrecttop)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),_wdisplay}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_yrecttop,_hdisplay}, "+",1, 1))));
 }else {
 BA.debugLineNum = 8700;BA.debugLine="TextLeft = Graph.Right - wDisplay + 3dip	'3dip";
Debug.JustUpdateDeviceLine();
_textleft = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_wdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3)))}, "-+",2, 1);Debug.locals.put("TextLeft", _textleft);
 BA.debugLineNum = 8701;BA.debugLine="rectDisplay.Initialize(Graph.Right - wDisplay";
Debug.JustUpdateDeviceLine();
_rectdisplay.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),_wdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1))),(Object)(BA.numberCast(float.class, _yrecttop)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_yrecttop,_hdisplay}, "+",1, 1))));
 };
 }else {
 BA.debugLineNum = 8710;BA.debugLine="x = Max(Graph.Left + 5dip, CursX - wDisplay / 2";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1))),(Object)(RemoteObject.solve(new RemoteObject[] {_cursx,_wdisplay,RemoteObject.createImmutable(2)}, "-/",1, 0))));Debug.locals.put("x", _x);
 BA.debugLineNum = 8711;BA.debugLine="x = Min(Graph.Right - 5dip - wDisplay, x)";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))),_wdisplay}, "--",2, 1))),(Object)(BA.numberCast(double.class, _x))));Debug.locals.put("x", _x);
 BA.debugLineNum = 8712;BA.debugLine="TextLeft = x + 5dip";
Debug.JustUpdateDeviceLine();
_textleft = RemoteObject.solve(new RemoteObject[] {_x,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextLeft", _textleft);
 BA.debugLineNum = 8713;BA.debugLine="If CursY > Graph.Top + hDisplay + 10dip Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_cursy,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),_hdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "++",2, 1)))) { 
 BA.debugLineNum = 8714;BA.debugLine="y = CursY - hDisplay - 10dip";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_cursy,_hdisplay,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "--",2, 0));Debug.locals.put("y", _y);
 }else {
 BA.debugLineNum = 8716;BA.debugLine="y = CursY + 10dip";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_cursy,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10)))}, "+",1, 0));Debug.locals.put("y", _y);
 };
 BA.debugLineNum = 8718;BA.debugLine="rectDisplay.Initialize(x, y, x + wDisplay, y +";
Debug.JustUpdateDeviceLine();
_rectdisplay.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _y)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x,_wdisplay}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,_hdisplay}, "+",1, 1))));
 BA.debugLineNum = 8719;BA.debugLine="TextTop = y + 5dip";
Debug.JustUpdateDeviceLine();
_texttop = RemoteObject.solve(new RemoteObject[] {_y,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1);Debug.locals.put("TextTop", _texttop);
 };
 BA.debugLineNum = 8723;BA.debugLine="xcvsValues.DrawRect(rectDisplay, Values.Backgrou";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rectdisplay),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"BackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 BA.debugLineNum = 8725;BA.debugLine="If Found = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_found,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8726;BA.debugLine="xcvsValues.DrawText(ID.Name, TextLeft, TextTop";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_id.getField(true,"Name" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop")}, "-",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8727;BA.debugLine="xcvsValues.DrawText(txtX, TextLeft, TextTop - r";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txtx),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop"),_recttext.runMethod(true,"getHeight")}, "-+",2, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8728;BA.debugLine="xcvsValues.DrawText(txtY, TextLeft,  TextTop -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txty),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop"),RemoteObject.createImmutable(2.1),_recttext.runMethod(true,"getHeight")}, "-+*",2, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 }else {
 BA.debugLineNum = 8730;BA.debugLine="xcvsValues.DrawText(txtX, TextLeft, TextTop - r";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txtx),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop")}, "-",1, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 BA.debugLineNum = 8731;BA.debugLine="xcvsValues.DrawText(txtY, TextLeft,  TextTop -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txty),(Object)(BA.numberCast(float.class, _textleft)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_texttop,_recttext.runMethod(true,"getTop"),_recttext.runMethod(true,"getHeight")}, "-+",2, 0))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("LEFT"))));
 };
 };
 BA.debugLineNum = 8734;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 8735;BA.debugLine="xcvsValues.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 8736;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawyxlines(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawYXLines (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4310);
if (RapidSub.canDelegate("drawyxlines")) { return __ref.runUserSub(false, "xchart","drawyxlines", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _yxval = null;
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _xi = RemoteObject.createImmutable(0);
RemoteObject _yi = RemoteObject.createImmutable(0);
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _mxaxis0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 4310;BA.debugLine="Private Sub DrawYXLines";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4311;BA.debugLine="Private i, l As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
 BA.debugLineNum = 4312;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 4313;BA.debugLine="Private yxVal(2) As Double";
Debug.JustUpdateDeviceLine();
_yxval = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4314;BA.debugLine="Private x0, y0, x1, y1, xi, yi As Int";
Debug.JustUpdateDeviceLine();
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
_xi = RemoteObject.createImmutable(0);Debug.locals.put("xi", _xi);
_yi = RemoteObject.createImmutable(0);Debug.locals.put("yi", _yi);
 BA.debugLineNum = 4316;BA.debugLine="If Items.Size = 0 Then Return";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 4318;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4319;BA.debugLine="xi = Graph.Left - (ScaleLog(sX).MantMin + ScaleLo";
Debug.JustUpdateDeviceLine();
_xi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("xi", _xi);
 BA.debugLineNum = 4320;BA.debugLine="yi = Graph.Bottom + (ScaleLog(sY(0)).MantMin + Sc";
Debug.JustUpdateDeviceLine();
_yi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yi", _yi);
 BA.debugLineNum = 4321;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step9 = 1;
final int limit9 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step9 > 0 && _l.<Integer>get().intValue() <= limit9) || (step9 < 0 && _l.<Integer>get().intValue() >= limit9) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step9))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4322;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4323;BA.debugLine="yxVal = ID.YXArray.Get(0)";
Debug.JustUpdateDeviceLine();
_yxval = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4324;BA.debugLine="If Scale(sX).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4325;BA.debugLine="x0 = Graph.Left + (yxVal(0) - Scale(sX).MinVal)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 }else {
 BA.debugLineNum = 4327;BA.debugLine="x0 = xi + Logarithm(yxVal(0), 10) * ScaleLog(sX";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 };
 BA.debugLineNum = 4329;BA.debugLine="If Scale(sY(0)).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4330;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4331;BA.debugLine="y0 = Graph.Bottom - (yxVal(1) - Scale(sY(0)).M";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 4333;BA.debugLine="y0 = Graph.Top + (yxVal(1) - Scale(sY(0)).MinV";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y0", _y0);
 };
 }else {
 BA.debugLineNum = 4336;BA.debugLine="y0 = yi - Logarithm(yxVal(1), 10) * ScaleLog(sY";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 4339;BA.debugLine="If ID.YXArray.Size = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 4340;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 4341;BA.debugLine="DrawPoint(x0, y0, ID.PointColor, ID.PointType,";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_x0),(Object)(_y0),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 };
 }else {
 BA.debugLineNum = 4344;BA.debugLine="For i = 1 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step31 = 1;
final int limit31 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 1) ;
for (;(step31 > 0 && _i.<Integer>get().intValue() <= limit31) || (step31 < 0 && _i.<Integer>get().intValue() >= limit31) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step31))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4345;BA.debugLine="yxVal = ID.YXArray.Get(i)";
Debug.JustUpdateDeviceLine();
_yxval = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4346;BA.debugLine="If Scale(sX).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4347;BA.debugLine="x1 = Graph.Left + (yxVal(0) - Scale(sX).MinVa";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x1", _x1);
 }else {
 BA.debugLineNum = 4349;BA.debugLine="x1 = xi + Logarithm(yxVal(0), 10) * ScaleLog(";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x1", _x1);
 };
 BA.debugLineNum = 4351;BA.debugLine="If Scale(sY(0)).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4352;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4353;BA.debugLine="y1 = Graph.Bottom - (yxVal(1) - Scale(sY(0))";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y1", _y1);
 }else {
 BA.debugLineNum = 4355;BA.debugLine="y1 = Graph.Top + (yxVal(1) - Scale(sY(0)).Mi";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y1", _y1);
 };
 }else {
 BA.debugLineNum = 4358;BA.debugLine="y1 = yi - Logarithm(yxVal(1), 10) * ScaleLog(";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y1", _y1);
 };
 BA.debugLineNum = 4360;BA.debugLine="If ID.DrawLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"DrawLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4361;BA.debugLine="xcvsGraph.DrawLine(x0, y0, x1, y1 , ID.Color,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 };
 BA.debugLineNum = 4363;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 4364;BA.debugLine="DrawPoint(x0, y0, ID.PointColor, ID.PointType";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_x0),(Object)(_y0),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 BA.debugLineNum = 4365;BA.debugLine="If i = ID.YXArray.Size - 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1)))) { 
 BA.debugLineNum = 4366;BA.debugLine="DrawPoint(x1, y1, ID.PointColor, ID.PointTyp";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_x1),(Object)(_y1),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 };
 };
 BA.debugLineNum = 4369;BA.debugLine="x0 = x1";
Debug.JustUpdateDeviceLine();
_x0 = _x1;Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4370;BA.debugLine="y0 = y1";
Debug.JustUpdateDeviceLine();
_y0 = _y1;Debug.locals.put("y0", _y0);
 }
}Debug.locals.put("i", _i);
;
 };
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4375;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4377;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4378;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4379;BA.debugLine="Private mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4380;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4381;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal *";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 }else {
 BA.debugLineNum = 4383;BA.debugLine="mYAxis0 = Graph.Top - Scale(sY(0)).MinVal * Sca";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 };
 BA.debugLineNum = 4385;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4386;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4388;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 4392;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4393;BA.debugLine="If Scale(sX).MinVal< 0 And Scale(sX).MaxVal > 0 T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4394;BA.debugLine="Private mXAxis0 = Graph.Left - Scale(sX).MinVal";
Debug.JustUpdateDeviceLine();
_mxaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mXAxis0", _mxaxis0);Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 4395;BA.debugLine="If Scale(sX).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4396;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis0,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4398;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis0,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 4402;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And (Zoom.NbVis";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("YX_CHART")))))) { 
 BA.debugLineNum = 4403;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4406;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 4407;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _drawyxlinesnscales(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("DrawYXLinesNScales (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,4410);
if (RapidSub.canDelegate("drawyxlinesnscales")) { return __ref.runUserSub(false, "xchart","drawyxlinesnscales", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _yxval = null;
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
RemoteObject _x1 = RemoteObject.createImmutable(0);
RemoteObject _y1 = RemoteObject.createImmutable(0);
RemoteObject _xi = RemoteObject.createImmutable(0);
RemoteObject _yi = RemoteObject.createImmutable(0);
RemoteObject _myaxis0 = RemoteObject.createImmutable(0);
RemoteObject _mxaxis0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 4410;BA.debugLine="Private Sub DrawYXLinesNScales";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 4411;BA.debugLine="Private i, l As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_l = RemoteObject.createImmutable(0);Debug.locals.put("l", _l);
 BA.debugLineNum = 4412;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 4413;BA.debugLine="Private yxVal(2) As Double";
Debug.JustUpdateDeviceLine();
_yxval = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4414;BA.debugLine="Private x0, y0, x1, y1, xi, yi As Int";
Debug.JustUpdateDeviceLine();
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
_x1 = RemoteObject.createImmutable(0);Debug.locals.put("x1", _x1);
_y1 = RemoteObject.createImmutable(0);Debug.locals.put("y1", _y1);
_xi = RemoteObject.createImmutable(0);Debug.locals.put("xi", _xi);
_yi = RemoteObject.createImmutable(0);Debug.locals.put("yi", _yi);
 BA.debugLineNum = 4416;BA.debugLine="If Items.Size = 0 Then Return";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
if (true) return RemoteObject.createImmutable("");};
 BA.debugLineNum = 4418;BA.debugLine="xcvsGraph.ClipPath(pthGrid)	'avoids drawing outsi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClipPath",(Object)(__ref.getField(false,"_pthgrid" /*RemoteObject*/ )));
 BA.debugLineNum = 4419;BA.debugLine="xi = Graph.Left - (ScaleLog(sX).MantMin + ScaleLo";
Debug.JustUpdateDeviceLine();
_xi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("xi", _xi);
 BA.debugLineNum = 4420;BA.debugLine="yi = Graph.Bottom + (ScaleLog(sY(0)).MantMin + Sc";
Debug.JustUpdateDeviceLine();
_yi = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ )}, "+",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("yi", _yi);
 BA.debugLineNum = 4421;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step9 = 1;
final int limit9 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = BA.numberCast(int.class, 0) ;
for (;(step9 > 0 && _l.<Integer>get().intValue() <= limit9) || (step9 < 0 && _l.<Integer>get().intValue() >= limit9) ;_l = RemoteObject.createImmutable((int)(0 + _l.<Integer>get().intValue() + step9))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 4422;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_l)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 4423;BA.debugLine="yxVal = ID.YXArray.Get(0)";
Debug.JustUpdateDeviceLine();
_yxval = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4424;BA.debugLine="If Scale(sX).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4425;BA.debugLine="x0 = Graph.Left + (yxVal(0) - Scale(sX).MinVal)";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 }else {
 BA.debugLineNum = 4427;BA.debugLine="x0 = xi + Logarithm(yxVal(0), 10) * ScaleLog(sX";
Debug.JustUpdateDeviceLine();
_x0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x0", _x0);
 };
 BA.debugLineNum = 4429;BA.debugLine="If Scale(sY(0)).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4430;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4431;BA.debugLine="y0 = Graph.Bottom - (yxVal(1) - Scale(sY(l)).M";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 }else {
 BA.debugLineNum = 4433;BA.debugLine="y0 = Graph.Top + (yxVal(1) - Scale(sY(l)).MinV";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y0", _y0);
 };
 }else {
 BA.debugLineNum = 4436;BA.debugLine="y0 = yi - Logarithm(yxVal(1), 10) * ScaleLog(sY";
Debug.JustUpdateDeviceLine();
_y0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y0", _y0);
 };
 BA.debugLineNum = 4439;BA.debugLine="For i = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step26 = 1;
final int limit26 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step26 > 0 && _i.<Integer>get().intValue() <= limit26) || (step26 < 0 && _i.<Integer>get().intValue() >= limit26) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step26))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 4440;BA.debugLine="yxVal = ID.YXArray.Get(i)";
Debug.JustUpdateDeviceLine();
_yxval = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("yxVal", _yxval);
 BA.debugLineNum = 4441;BA.debugLine="If Scale(sX).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4442;BA.debugLine="x1 = Graph.Left + (yxVal(0) - Scale(sX).MinVal";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x1", _x1);
 }else {
 BA.debugLineNum = 4444;BA.debugLine="x1 = xi + Logarithm(yxVal(0), 10) * ScaleLog(s";
Debug.JustUpdateDeviceLine();
_x1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_xi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("x1", _x1);
 };
 BA.debugLineNum = 4446;BA.debugLine="If Scale(sY(0)).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4447;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4448;BA.debugLine="y1 = Graph.Bottom - (yxVal(1) - Scale(sY(l)).";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y1", _y1);
 }else {
 BA.debugLineNum = 4450;BA.debugLine="y1 = Graph.Top + (yxVal(1) - Scale(sY(l)).Min";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_yxval.getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("y1", _y1);
 };
 }else {
 BA.debugLineNum = 4453;BA.debugLine="y1 = yi - Logarithm(yxVal(1), 10) * ScaleLog(s";
Debug.JustUpdateDeviceLine();
_y1 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_yi,xchart.__c.runMethod(true,"Logarithm",(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(BA.numberCast(double.class, 10))),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_l)).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("y1", _y1);
 };
 BA.debugLineNum = 4455;BA.debugLine="If ID.DrawLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(true,"DrawLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4456;BA.debugLine="xcvsGraph.DrawLine(x0, y0, x1, y1 , ID.Color,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, _x1)),(Object)(BA.numberCast(float.class, _y1)),(Object)(_id.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, _id.getField(true,"StrokeWidth" /*RemoteObject*/ ))));
 };
 BA.debugLineNum = 4458;BA.debugLine="If ID.PointType <> \"NONE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_id.getField(true,"PointType" /*RemoteObject*/ ),BA.ObjectToString("NONE"))) { 
 BA.debugLineNum = 4459;BA.debugLine="If i = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4460;BA.debugLine="DrawPoint(x0, y0, ID.PointColor, ID.PointType";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_x0),(Object)(_y0),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 }else {
 BA.debugLineNum = 4462;BA.debugLine="DrawPoint(x1, y1, ID.PointColor, ID.PointType";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawpoint" /*RemoteObject*/ ,(Object)(_x1),(Object)(_y1),(Object)(_id.getField(true,"PointColor" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointType" /*RemoteObject*/ )),(Object)(_id.getField(true,"PointFilled" /*RemoteObject*/ )),(Object)(_id.getField(true,"StrokeWidth" /*RemoteObject*/ )));
 };
 };
 BA.debugLineNum = 4465;BA.debugLine="x0 = x1";
Debug.JustUpdateDeviceLine();
_x0 = _x1;Debug.locals.put("x0", _x0);
 BA.debugLineNum = 4466;BA.debugLine="y0 = y1";
Debug.JustUpdateDeviceLine();
_y0 = _y1;Debug.locals.put("y0", _y0);
 }
}Debug.locals.put("i", _i);
;
 }
}Debug.locals.put("l", _l);
;
 BA.debugLineNum = 4470;BA.debugLine="xcvsGraph.RemoveClip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("RemoveClip");
 BA.debugLineNum = 4472;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4473;BA.debugLine="If Scale(sY(0)).MinVal< 0 And Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4474;BA.debugLine="Private mYAxis0 As Int";
Debug.JustUpdateDeviceLine();
_myaxis0 = RemoteObject.createImmutable(0);Debug.locals.put("mYAxis0", _myaxis0);
 BA.debugLineNum = 4475;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 4476;BA.debugLine="mYAxis0 = Graph.Bottom + Scale(sY(0)).MinVal *";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 }else {
 BA.debugLineNum = 4478;BA.debugLine="mYAxis0 = Graph.Top - Scale(sY(0)).MinVal * Sca";
Debug.JustUpdateDeviceLine();
_myaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mYAxis0", _myaxis0);
 };
 BA.debugLineNum = 4480;BA.debugLine="If Scale(sY(0)).YZeroAxisHighlight = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 4481;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 }else {
 BA.debugLineNum = 4483;BA.debugLine="xcvsGraph.DrawLine(Graph.Left, mYAxis0, Graph.R";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _myaxis0)),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 };
 BA.debugLineNum = 4487;BA.debugLine="xcvsGraph.DrawRect(Graph.Rect, Graph.GridFrameCol";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 BA.debugLineNum = 4488;BA.debugLine="If Scale(sX).MinVal< 0 And Scale(sX).MaxVal > 0 T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 4489;BA.debugLine="Private mXAxis0 = Graph.Left - Scale(sX).MinVal";
Debug.JustUpdateDeviceLine();
_mxaxis0 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "-*",1, 0));Debug.locals.put("mXAxis0", _mxaxis0);Debug.locals.put("mXAxis0", _mxaxis0);
 BA.debugLineNum = 4490;BA.debugLine="xcvsGraph.DrawLine(mXAxis0, Graph.Top, mXAxis0,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("DrawLine",(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, _mxaxis0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GridFrameColor" /*RemoteObject*/ )),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))))));
 };
 BA.debugLineNum = 4493;BA.debugLine="If Legend.IncludeLegend <> \"NONE\" And (Zoom.NbVis";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("YX_CHART")))))) { 
 BA.debugLineNum = 4494;BA.debugLine="DrawLegend";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawlegend" /*RemoteObject*/ );
 };
 BA.debugLineNum = 4497;BA.debugLine="xcvsGraph.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 4498;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getareafillalphavalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getAreaFillAlphaValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8132);
if (RapidSub.canDelegate("getareafillalphavalue")) { return __ref.runUserSub(false, "xchart","getareafillalphavalue", __ref);}
 BA.debugLineNum = 8132;BA.debugLine="Public Sub getAreaFillAlphaValue As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8134;BA.debugLine="Return (256 + Graph.AreaFillAlphaValue / 16777216";
Debug.JustUpdateDeviceLine();
if (true) return BA.numberCast(int.class, (RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(256),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"AreaFillAlphaValue" /*RemoteObject*/ ),RemoteObject.createImmutable(16777216)}, "+/",1, 0)));
 BA.debugLineNum = 8135;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getautomaticscale(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getAutomaticScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7401);
if (RapidSub.canDelegate("getautomaticscale")) { return __ref.runUserSub(false, "xchart","getautomaticscale", __ref);}
 BA.debugLineNum = 7401;BA.debugLine="Public Sub getAutomaticScale As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7402;BA.debugLine="Return Scale(sY(0)).Automatic";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ );
 BA.debugLineNum = 7403;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getautomatictextsizes(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getAutomaticTextSizes (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7503);
if (RapidSub.canDelegate("getautomatictextsizes")) { return __ref.runUserSub(false, "xchart","getautomatictextsizes", __ref);}
 BA.debugLineNum = 7503;BA.debugLine="Public Sub getAutomaticTextSizes As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7504;BA.debugLine="Return Texts.AutomaticTextSizes";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AutomaticTextSizes" /*RemoteObject*/ );
 BA.debugLineNum = 7505;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getaxistextsize(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getAxisTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7525);
if (RapidSub.canDelegate("getaxistextsize")) { return __ref.runUserSub(false, "xchart","getaxistextsize", __ref);}
 BA.debugLineNum = 7525;BA.debugLine="Public Sub getAxisTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7526;BA.debugLine="Return Texts.AxisTextSize";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextSize" /*RemoteObject*/ );
 BA.debugLineNum = 7527;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0f);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getbarmarginmode(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getBarMarginMode (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8032);
if (RapidSub.canDelegate("getbarmarginmode")) { return __ref.runUserSub(false, "xchart","getbarmarginmode", __ref);}
 BA.debugLineNum = 8032;BA.debugLine="Public Sub getBarMarginMode As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8033;BA.debugLine="Return Graph.BarMarginMode";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarMarginMode" /*RemoteObject*/ );
 BA.debugLineNum = 8034;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getbarpointsminmaxvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("GetBarPointsMinMaxValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2724);
if (RapidSub.canDelegate("getbarpointsminmaxvalues")) { return __ref.runUserSub(false, "xchart","getbarpointsminmaxvalues", __ref);}
RemoteObject _j = RemoteObject.createImmutable(0);
RemoteObject _minmax = null;
int _i = 0;
RemoteObject _yvals = null;
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _nb = RemoteObject.createImmutable(0);
RemoteObject _total = RemoteObject.createImmutable(0);
 BA.debugLineNum = 2724;BA.debugLine="Private Sub GetBarPointsMinMaxValues As Double()";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2725;BA.debugLine="Private j, j As Int";
Debug.JustUpdateDeviceLine();
_j = RemoteObject.createImmutable(0);Debug.locals.put("j", _j);
_j = RemoteObject.createImmutable(0);Debug.locals.put("j", _j);
 BA.debugLineNum = 2726;BA.debugLine="Private MinMax(2) As Double";
Debug.JustUpdateDeviceLine();
_minmax = RemoteObject.createNewArray ("double", new int[] {2}, new Object[]{});Debug.locals.put("MinMax", _minmax);
 BA.debugLineNum = 2728;BA.debugLine="If Points.Size > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2730;BA.debugLine="If Graph.ChartType = \"BAR\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("RADAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"))) { 
 BA.debugLineNum = 2732;BA.debugLine="MinMax(1) = -1E10";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (BA.numberCast(double.class, -1e10),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2733;BA.debugLine="MinMax(0) = 1E10";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (BA.numberCast(double.class, 1e10),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2736;BA.debugLine="For i = 0 To Points.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step7 = 1;
final int limit7 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step7 > 0 && _i <= limit7) || (step7 < 0 && _i >= limit7) ;_i = ((int)(0 + _i + step7))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2737;BA.debugLine="Private YVals() As Double";
Debug.JustUpdateDeviceLine();
_yvals = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2738;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2739;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2740;BA.debugLine="YVals = PD.YArray";
Debug.JustUpdateDeviceLine();
_yvals = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2741;BA.debugLine="Private nb As Int";
Debug.JustUpdateDeviceLine();
_nb = RemoteObject.createImmutable(0);Debug.locals.put("nb", _nb);
 BA.debugLineNum = 2742;BA.debugLine="nb = PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
_nb = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("nb", _nb);
 BA.debugLineNum = 2743;BA.debugLine="If Graph.ChartType = \"CANDLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"))) { 
 BA.debugLineNum = 2744;BA.debugLine="nb = nb - 1";
Debug.JustUpdateDeviceLine();
_nb = RemoteObject.solve(new RemoteObject[] {_nb,RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("nb", _nb);
 };
 BA.debugLineNum = 2747;BA.debugLine="For j = 0 To nb";
Debug.JustUpdateDeviceLine();
{
final int step17 = 1;
final int limit17 = _nb.<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step17 > 0 && _j.<Integer>get().intValue() <= limit17) || (step17 < 0 && _j.<Integer>get().intValue() >= limit17) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step17))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 2748;BA.debugLine="MinMax(1) = Max(MinMax(1), YVals(j))";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_minmax.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yvals.getArrayElement(true,_j))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2749;BA.debugLine="MinMax(0) = Min(MinMax(0), YVals(j))";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_minmax.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yvals.getArrayElement(true,_j))),BA.numberCast(int.class, 0));
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2752;BA.debugLine="MinMaxMeanValues(0) = MinMax(0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_minmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2753;BA.debugLine="MinMaxMeanValues(1) = MinMax(1)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_minmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2754;BA.debugLine="If Graph.ChartType <> \"CANDLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"))) { 
 BA.debugLineNum = 2755;BA.debugLine="If MinMax(0) > 0 And MinMax(1) > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_minmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean(">",_minmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2756;BA.debugLine="MinMax(0) = 0";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 0));
 };
 BA.debugLineNum = 2758;BA.debugLine="If MinMax(0) < 0 And MinMax(1) < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_minmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("<",_minmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2759;BA.debugLine="MinMax(1) = 0";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 1));
 };
 }else {
 BA.debugLineNum = 2762;BA.debugLine="If Bar.CandleDisplayVolume = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2764;BA.debugLine="MinMaxMeanValues(0) = MinMaxMeanValues(0) - (";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)),__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))}, "-",1, 0)),RemoteObject.createImmutable(9)}, "-/",1, 0),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2765;BA.debugLine="MinMax(0) = MinMaxMeanValues(0)";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(int.class, 0));
 };
 };
 }else {
 BA.debugLineNum = 2770;BA.debugLine="MinMax(1) = 0";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2771;BA.debugLine="MinMax(0) = 0";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2774;BA.debugLine="For i = 0 To Points.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step40 = 1;
final int limit40 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step40 > 0 && _i <= limit40) || (step40 < 0 && _i >= limit40) ;_i = ((int)(0 + _i + step40))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2775;BA.debugLine="Private YVals(), Total As Double";
Debug.JustUpdateDeviceLine();
_yvals = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YVals", _yvals);
_total = RemoteObject.createImmutable(0);Debug.locals.put("Total", _total);
 BA.debugLineNum = 2776;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2777;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2778;BA.debugLine="YVals = PD.YArray";
Debug.JustUpdateDeviceLine();
_yvals = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2779;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step45 = 1;
final int limit45 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step45 > 0 && _j.<Integer>get().intValue() <= limit45) || (step45 < 0 && _j.<Integer>get().intValue() >= limit45) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step45))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 2780;BA.debugLine="Total = Total + YVals(j)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_yvals.getArrayElement(true,_j)}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("j", _j);
;
 BA.debugLineNum = 2782;BA.debugLine="MinMax(1) = Max(MinMax(1), Total)";
Debug.JustUpdateDeviceLine();
_minmax.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_minmax.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_total)),BA.numberCast(int.class, 1));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2784;BA.debugLine="MinMaxMeanValues(0) = MinMax(0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_minmax.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2785;BA.debugLine="MinMaxMeanValues(1) = MinMax(1)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_minmax.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(int.class, 1));
 };
 };
 BA.debugLineNum = 2789;BA.debugLine="Return MinMax";
Debug.JustUpdateDeviceLine();
if (true) return _minmax;
 BA.debugLineNum = 2790;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(null);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getbarvalueorientation(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getBarValueOrientation (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8015);
if (RapidSub.canDelegate("getbarvalueorientation")) { return __ref.runUserSub(false, "xchart","getbarvalueorientation", __ref);}
 BA.debugLineNum = 8015;BA.debugLine="Public Sub getBarValueOrientation As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8016;BA.debugLine="Return Graph.BarValueOrientation";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarValueOrientation" /*RemoteObject*/ );
 BA.debugLineNum = 8017;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getbubblediametermax(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getBubbleDiameterMax (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8457);
if (RapidSub.canDelegate("getbubblediametermax")) { return __ref.runUserSub(false, "xchart","getbubblediametermax", __ref);}
 BA.debugLineNum = 8457;BA.debugLine="Public Sub getBubbleDiameterMax As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8458;BA.debugLine="Return mBubbleDiameterMax";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mbubblediametermax" /*RemoteObject*/ );
 BA.debugLineNum = 8459;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getbubblediametermin(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getBubbleDiameterMin (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8444);
if (RapidSub.canDelegate("getbubblediametermin")) { return __ref.runUserSub(false, "xchart","getbubblediametermin", __ref);}
 BA.debugLineNum = 8444;BA.debugLine="Public Sub getBubbleDiameterMin As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8445;BA.debugLine="Return mBubbleDiameterMin";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mbubblediametermin" /*RemoteObject*/ );
 BA.debugLineNum = 8446;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getbubblesmallsnap(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getBubbleSmallSnap (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8469);
if (RapidSub.canDelegate("getbubblesmallsnap")) { return __ref.runUserSub(false, "xchart","getbubblesmallsnap", __ref);}
 BA.debugLineNum = 8469;BA.debugLine="Public Sub getBubbleSmallSnap As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8470;BA.debugLine="Return mBubbleSmallSnap";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mbubblesmallsnap" /*RemoteObject*/ );
 BA.debugLineNum = 8471;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getcandledisplayvolume(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getCandleDisplayVolume (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8372);
if (RapidSub.canDelegate("getcandledisplayvolume")) { return __ref.runUserSub(false, "xchart","getcandledisplayvolume", __ref);}
 BA.debugLineNum = 8372;BA.debugLine="Public Sub getCandleDisplayVolume As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8373;BA.debugLine="Return Bar.CandleDisplayVolume";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ );
 BA.debugLineNum = 8374;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getcandledrawbodyborder(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getCandleDrawBodyBorder (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8421);
if (RapidSub.canDelegate("getcandledrawbodyborder")) { return __ref.runUserSub(false, "xchart","getcandledrawbodyborder", __ref);}
 BA.debugLineNum = 8421;BA.debugLine="Public Sub getCandleDrawBodyBorder As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8422;BA.debugLine="Return Bar.DrawBodyBorder";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DrawBodyBorder" /*RemoteObject*/ );
 BA.debugLineNum = 8423;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getcandlewickcolor(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getCandleWickColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8361);
if (RapidSub.canDelegate("getcandlewickcolor")) { return __ref.runUserSub(false, "xchart","getcandlewickcolor", __ref);}
 BA.debugLineNum = 8361;BA.debugLine="Public Sub getCandleWickColor As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8362;BA.debugLine="Return Bar.WickColor";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickColor" /*RemoteObject*/ );
 BA.debugLineNum = 8363;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getcandlewickwidth(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getCandleWickWidth (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8384);
if (RapidSub.canDelegate("getcandlewickwidth")) { return __ref.runUserSub(false, "xchart","getcandlewickwidth", __ref);}
 BA.debugLineNum = 8384;BA.debugLine="Public Sub getCandleWickWidth As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8385;BA.debugLine="Return Bar.WickWidth / xui.Scale";
Debug.JustUpdateDeviceLine();
if (true) return BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"WickWidth" /*RemoteObject*/ ),__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"getScale")}, "/",0, 0));
 BA.debugLineNum = 8386;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getcharttype(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getChartType (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7441);
if (RapidSub.canDelegate("getcharttype")) { return __ref.runUserSub(false, "xchart","getcharttype", __ref);}
 BA.debugLineNum = 7441;BA.debugLine="Public Sub getChartType As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7442;BA.debugLine="Return Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ );
 BA.debugLineNum = 7443;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getcontrastcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("GetContrastColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6962);
if (RapidSub.canDelegate("getcontrastcolor")) { return __ref.runUserSub(false, "xchart","getcontrastcolor", __ref, _color);}
RemoteObject _a = RemoteObject.createImmutable(0);
RemoteObject _r = RemoteObject.createImmutable(0);
RemoteObject _g = RemoteObject.createImmutable(0);
RemoteObject _b = RemoteObject.createImmutable(0);
RemoteObject _yiq = RemoteObject.createImmutable(0);
Debug.locals.put("Color", _color);
 BA.debugLineNum = 6962;BA.debugLine="Private Sub GetContrastColor(Color As Int) As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6963;BA.debugLine="Private a, r, g, b, yiq As Int	'ignore";
Debug.JustUpdateDeviceLine();
_a = RemoteObject.createImmutable(0);Debug.locals.put("a", _a);
_r = RemoteObject.createImmutable(0);Debug.locals.put("r", _r);
_g = RemoteObject.createImmutable(0);Debug.locals.put("g", _g);
_b = RemoteObject.createImmutable(0);Debug.locals.put("b", _b);
_yiq = RemoteObject.createImmutable(0);Debug.locals.put("yiq", _yiq);
 BA.debugLineNum = 6965;BA.debugLine="a = Bit.UnsignedShiftRight(Bit.And(Color, 0xff000";
Debug.JustUpdateDeviceLine();
_a = xchart.__c.getField(false,"Bit").runMethod(true,"UnsignedShiftRight",(Object)(xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff000000))))),(Object)(BA.numberCast(int.class, 24)));Debug.locals.put("a", _a);
 BA.debugLineNum = 6966;BA.debugLine="r = Bit.UnsignedShiftRight(Bit.And(Color, 0xff000";
Debug.JustUpdateDeviceLine();
_r = xchart.__c.getField(false,"Bit").runMethod(true,"UnsignedShiftRight",(Object)(xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff0000))))),(Object)(BA.numberCast(int.class, 16)));Debug.locals.put("r", _r);
 BA.debugLineNum = 6967;BA.debugLine="g = Bit.UnsignedShiftRight(Bit.And(Color, 0xff00)";
Debug.JustUpdateDeviceLine();
_g = xchart.__c.getField(false,"Bit").runMethod(true,"UnsignedShiftRight",(Object)(xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff00))))),(Object)(BA.numberCast(int.class, 8)));Debug.locals.put("g", _g);
 BA.debugLineNum = 6968;BA.debugLine="b = Bit.And(Color, 0xff)";
Debug.JustUpdateDeviceLine();
_b = xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff))));Debug.locals.put("b", _b);
 BA.debugLineNum = 6970;BA.debugLine="yiq = r * 0.299 + g * 0.587 + b * 0.114";
Debug.JustUpdateDeviceLine();
_yiq = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_r,RemoteObject.createImmutable(0.299),_g,RemoteObject.createImmutable(0.587),_b,RemoteObject.createImmutable(0.114)}, "*+*+*",2, 0));Debug.locals.put("yiq", _yiq);
 BA.debugLineNum = 6972;BA.debugLine="If yiq > 128 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_yiq,BA.numberCast(double.class, 128))) { 
 BA.debugLineNum = 6973;BA.debugLine="Return xui.Color_Black";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black");
 }else {
 BA.debugLineNum = 6975;BA.debugLine="Return xui.Color_White";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_White");
 };
 BA.debugLineNum = 6977;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getcursorindex(RemoteObject __ref,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("GetCursorIndex (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1167);
if (RapidSub.canDelegate("getcursorindex")) { return __ref.runUserSub(false, "xchart","getcursorindex", __ref, _x, _y);}
RemoteObject _index = RemoteObject.createImmutable(0);
RemoteObject _angle = RemoteObject.createImmutable(0);
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
 BA.debugLineNum = 1167;BA.debugLine="Private Sub GetCursorIndex(X As Float, Y As Float)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1168;BA.debugLine="Private Index As Int";
Debug.JustUpdateDeviceLine();
_index = RemoteObject.createImmutable(0);Debug.locals.put("Index", _index);
 BA.debugLineNum = 1170;BA.debugLine="If Graph.ChartType <> \"PIE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE"))) { 
 BA.debugLineNum = 1171;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR"),BA.ObjectToString("STACKED_BAR"),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"),BA.ObjectToString("LINE"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("RADAR"))) {
case 0: 
case 1: 
case 2: 
case 3: {
 BA.debugLineNum = 1173;BA.debugLine="Index =(x - Graph.Left - Graph.XOffset) / Grap";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XOffset" /*RemoteObject*/ )}, "--",2, 0)),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ )}, "/",0, 0));Debug.locals.put("Index", _index);
 break; }
case 4: 
case 5: 
case 6: {
 BA.debugLineNum = 1175;BA.debugLine="Index = (x - Graph.Left) / Scale(sX).Scale + 0";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )}, "/++",2, 0));Debug.locals.put("Index", _index);
 break; }
case 7: {
 BA.debugLineNum = 1177;BA.debugLine="Private Angle As Double";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.createImmutable(0);Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 1178;BA.debugLine="Angle = ATan2D(y - Graph.CenterY, x - Graph.Ce";
Debug.JustUpdateDeviceLine();
_angle = xchart.__c.runMethod(true,"ATan2D",(Object)(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ )}, "-",1, 0)),(Object)(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ )}, "-",1, 0)));Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 1179;BA.debugLine="If Angle < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_angle,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1180;BA.debugLine="Angle = Angle + 360";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.solve(new RemoteObject[] {_angle,RemoteObject.createImmutable(360)}, "+",1, 0);Debug.locals.put("Angle", _angle);
 };
 BA.debugLineNum = 1182;BA.debugLine="Index = Angle * Zoom.NbVisiblePoints / 360 + 0";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_angle,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(360),RemoteObject.createImmutable(0.5)}, "*/+",1, 0));Debug.locals.put("Index", _index);
 BA.debugLineNum = 1183;BA.debugLine="Angle = 360 / Zoom.NbVisiblePoints * Index";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(360),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),_index}, "/*",0, 0);Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 1184;BA.debugLine="Angle = (ATan2D(y - Graph.CenterY, x - Graph.C";
Debug.JustUpdateDeviceLine();
_angle = (RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"ATan2D",(Object)(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterY" /*RemoteObject*/ )}, "-",1, 0)),(Object)(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ )}, "-",1, 0))),RemoteObject.createImmutable(360),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ )}, "+-",2, 0));Debug.locals.put("Angle", _angle);
 BA.debugLineNum = 1185;BA.debugLine="If Angle < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_angle,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1186;BA.debugLine="Angle = Angle + 360";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.solve(new RemoteObject[] {_angle,RemoteObject.createImmutable(360)}, "+",1, 0);Debug.locals.put("Angle", _angle);
 }else 
{ BA.debugLineNum = 1187;BA.debugLine="Else If Angle > 360 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_angle,BA.numberCast(double.class, 360))) { 
 BA.debugLineNum = 1188;BA.debugLine="Angle = Angle - 360";
Debug.JustUpdateDeviceLine();
_angle = RemoteObject.solve(new RemoteObject[] {_angle,RemoteObject.createImmutable(360)}, "-",1, 0);Debug.locals.put("Angle", _angle);
 }}
;
 BA.debugLineNum = 1190;BA.debugLine="Index = Angle * Zoom.NbVisiblePoints / 360 + 0";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_angle,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(360),RemoteObject.createImmutable(0.5)}, "*/+",1, 0));Debug.locals.put("Index", _index);
 break; }
}
;
 BA.debugLineNum = 1192;BA.debugLine="Index = Max(Index, Zoom.BeginIndex)";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _index)),(Object)(BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )))));Debug.locals.put("Index", _index);
 BA.debugLineNum = 1193;BA.debugLine="Index = Min(Index, Zoom.EndIndex)";
Debug.JustUpdateDeviceLine();
_index = BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, _index)),(Object)(BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ )))));Debug.locals.put("Index", _index);
 };
 BA.debugLineNum = 1196;BA.debugLine="Return Index";
Debug.JustUpdateDeviceLine();
if (true) return _index;
 BA.debugLineNum = 1197;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdecreasecolor(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDecreaseColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8411);
if (RapidSub.canDelegate("getdecreasecolor")) { return __ref.runUserSub(false, "xchart","getdecreasecolor", __ref);}
 BA.debugLineNum = 8411;BA.debugLine="Public Sub getDecreaseColor As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8412;BA.debugLine="Return Bar.DecreaseColor";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"DecreaseColor" /*RemoteObject*/ );
 BA.debugLineNum = 8413;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdifferentscales(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDifferentScales (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7417);
if (RapidSub.canDelegate("getdifferentscales")) { return __ref.runUserSub(false, "xchart","getdifferentscales", __ref);}
 BA.debugLineNum = 7417;BA.debugLine="Public Sub getDifferentScales As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7418;BA.debugLine="Return Scale(sY(0)).Different";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ );
 BA.debugLineNum = 7419;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdisplaycursor(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDisplayCursor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7574);
if (RapidSub.canDelegate("getdisplaycursor")) { return __ref.runUserSub(false, "xchart","getdisplaycursor", __ref);}
 BA.debugLineNum = 7574;BA.debugLine="Public Sub getDisplayCursor As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7575;BA.debugLine="Return Values.ShowCursor";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"ShowCursor" /*RemoteObject*/ );
 BA.debugLineNum = 7576;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdisplayvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDisplayValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7584);
if (RapidSub.canDelegate("getdisplayvalues")) { return __ref.runUserSub(false, "xchart","getdisplayvalues", __ref);}
 BA.debugLineNum = 7584;BA.debugLine="Public Sub getDisplayValues As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7585;BA.debugLine="Return Values.Show";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ );
 BA.debugLineNum = 7586;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdisplayvaluesonhover(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDisplayValuesOnHover (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7594);
if (RapidSub.canDelegate("getdisplayvaluesonhover")) { return __ref.runUserSub(false, "xchart","getdisplayvaluesonhover", __ref);}
 BA.debugLineNum = 7594;BA.debugLine="Public Sub getDisplayValuesOnHover As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7595;BA.debugLine="Return Values.ShowOnHover";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"ShowOnHover" /*RemoteObject*/ );
 BA.debugLineNum = 7596;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdrawgridframe(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDrawGridFrame (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7732);
if (RapidSub.canDelegate("getdrawgridframe")) { return __ref.runUserSub(false, "xchart","getdrawgridframe", __ref);}
 BA.debugLineNum = 7732;BA.debugLine="Public Sub getDrawGridFrame As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7733;BA.debugLine="Return Graph.DrawGridFrame";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawGridFrame" /*RemoteObject*/ );
 BA.debugLineNum = 7734;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdrawhorizontalgridlines(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDrawHorizontalGridLines (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7742);
if (RapidSub.canDelegate("getdrawhorizontalgridlines")) { return __ref.runUserSub(false, "xchart","getdrawhorizontalgridlines", __ref);}
 BA.debugLineNum = 7742;BA.debugLine="Public Sub getDrawHorizontalGridLines As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7743;BA.debugLine="Return Graph.DrawHorizontalGridLines";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawHorizontalGridLines" /*RemoteObject*/ );
 BA.debugLineNum = 7744;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdrawouterframe(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDrawOuterFrame (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7923);
if (RapidSub.canDelegate("getdrawouterframe")) { return __ref.runUserSub(false, "xchart","getdrawouterframe", __ref);}
 BA.debugLineNum = 7923;BA.debugLine="Public Sub getDrawOuterFrame As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7924;BA.debugLine="Return Graph.DrawOuterFrame";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawOuterFrame" /*RemoteObject*/ );
 BA.debugLineNum = 7925;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdrawverticalgridlines(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDrawVerticalGridLines (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7752);
if (RapidSub.canDelegate("getdrawverticalgridlines")) { return __ref.runUserSub(false, "xchart","getdrawverticalgridlines", __ref);}
 BA.debugLineNum = 7752;BA.debugLine="Public Sub getDrawVerticalGridLines As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7753;BA.debugLine="Return Graph.DrawVerticalGridLines";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"DrawVerticalGridLines" /*RemoteObject*/ );
 BA.debugLineNum = 7754;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdrawxscale(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDrawXScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7659);
if (RapidSub.canDelegate("getdrawxscale")) { return __ref.runUserSub(false, "xchart","getdrawxscale", __ref);}
 BA.debugLineNum = 7659;BA.debugLine="Public Sub getDrawXScale As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7660;BA.debugLine="Return Scale(sX).DrawXScale";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ );
 BA.debugLineNum = 7661;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getdrawyscale(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getDrawYScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7671);
if (RapidSub.canDelegate("getdrawyscale")) { return __ref.runUserSub(false, "xchart","getdrawyscale", __ref);}
 BA.debugLineNum = 7671;BA.debugLine="Public Sub getDrawYScale As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7672;BA.debugLine="Return Scale(sY(0)).DrawYScale";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ );
 BA.debugLineNum = 7673;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getgradientcolors(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getGradientColors (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7684);
if (RapidSub.canDelegate("getgradientcolors")) { return __ref.runUserSub(false, "xchart","getgradientcolors", __ref);}
 BA.debugLineNum = 7684;BA.debugLine="Public Sub getGradientColors As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7685;BA.debugLine="Return Graph.GradientColors";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColors" /*RemoteObject*/ );
 BA.debugLineNum = 7686;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getgradientcolorsalpha(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getGradientColorsAlpha (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7695);
if (RapidSub.canDelegate("getgradientcolorsalpha")) { return __ref.runUserSub(false, "xchart","getgradientcolorsalpha", __ref);}
 BA.debugLineNum = 7695;BA.debugLine="Public Sub getGradientColorsAlpha As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7696;BA.debugLine="Return Graph.GradientColorsAlpha";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ );
 BA.debugLineNum = 7697;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _gethchartstickstopdown(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getHChartsTicksTopDown (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8247);
if (RapidSub.canDelegate("gethchartstickstopdown")) { return __ref.runUserSub(false, "xchart","gethchartstickstopdown", __ref);}
 BA.debugLineNum = 8247;BA.debugLine="Public Sub getHChartsTicksTopDown As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8248;BA.debugLine="Return mHChartsTicksTopDown";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mhchartstickstopdown" /*RemoteObject*/ );
 BA.debugLineNum = 8249;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _gethchartsxscaleontop(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getHChartsXScaleOnTop (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8233);
if (RapidSub.canDelegate("gethchartsxscaleontop")) { return __ref.runUserSub(false, "xchart","gethchartsxscaleontop", __ref);}
 BA.debugLineNum = 8233;BA.debugLine="Public Sub getHChartsXScaleOnTop As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8234;BA.debugLine="Return mHChartsXScaleOnTop";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mhchartsxscaleontop" /*RemoteObject*/ );
 BA.debugLineNum = 8235;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getheight(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getHeight (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7483);
if (RapidSub.canDelegate("getheight")) { return __ref.runUserSub(false, "xchart","getheight", __ref);}
 BA.debugLineNum = 7483;BA.debugLine="Public Sub getHeight As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7484;BA.debugLine="Return mBase.Height";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight");
 BA.debugLineNum = 7485;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getincludebarmeanline(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getIncludeBarMeanLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7391);
if (RapidSub.canDelegate("getincludebarmeanline")) { return __ref.runUserSub(false, "xchart","getincludebarmeanline", __ref);}
 BA.debugLineNum = 7391;BA.debugLine="Public Sub getIncludeBarMeanLine As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7392;BA.debugLine="Return Graph.IncludeBarMeanLine";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeBarMeanLine" /*RemoteObject*/ );
 BA.debugLineNum = 7393;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getincludelegend(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getIncludeLegend (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7370);
if (RapidSub.canDelegate("getincludelegend")) { return __ref.runUserSub(false, "xchart","getincludelegend", __ref);}
 BA.debugLineNum = 7370;BA.debugLine="Public Sub getIncludeLegend As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7371;BA.debugLine="Return Legend.IncludeLegend";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ );
 BA.debugLineNum = 7372;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getincludemaxline(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getIncludeMaxLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7944);
if (RapidSub.canDelegate("getincludemaxline")) { return __ref.runUserSub(false, "xchart","getincludemaxline", __ref);}
 BA.debugLineNum = 7944;BA.debugLine="Public Sub getIncludeMaxLine As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7945;BA.debugLine="Return Graph.IncludeMaxLine";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ );
 BA.debugLineNum = 7946;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getincludemeanline(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getIncludeMeanLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7955);
if (RapidSub.canDelegate("getincludemeanline")) { return __ref.runUserSub(false, "xchart","getincludemeanline", __ref);}
 BA.debugLineNum = 7955;BA.debugLine="Public Sub getIncludeMeanLine As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7956;BA.debugLine="Return Graph.IncludeMeanLine";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ );
 BA.debugLineNum = 7957;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getincludeminline(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getIncludeMinLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7933);
if (RapidSub.canDelegate("getincludeminline")) { return __ref.runUserSub(false, "xchart","getincludeminline", __ref);}
 BA.debugLineNum = 7933;BA.debugLine="Public Sub getIncludeMinLine As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7934;BA.debugLine="Return Graph.IncludeMinLine";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ );
 BA.debugLineNum = 7935;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getincludevalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getIncludeValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7381);
if (RapidSub.canDelegate("getincludevalues")) { return __ref.runUserSub(false, "xchart","getincludevalues", __ref);}
 BA.debugLineNum = 7381;BA.debugLine="Public Sub getIncludeValues As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7382;BA.debugLine="Return Graph.IncludeValues";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ );
 BA.debugLineNum = 7383;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getincreasecolor(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getIncreaseColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8398);
if (RapidSub.canDelegate("getincreasecolor")) { return __ref.runUserSub(false, "xchart","getincreasecolor", __ref);}
 BA.debugLineNum = 8398;BA.debugLine="Public Sub getIncreaseColor As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8399;BA.debugLine="Return Bar.IncreaseColor";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"IncreaseColor" /*RemoteObject*/ );
 BA.debugLineNum = 8400;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getkeepdisplayvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getKeepDisplayValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8213);
if (RapidSub.canDelegate("getkeepdisplayvalues")) { return __ref.runUserSub(false, "xchart","getkeepdisplayvalues", __ref);}
 BA.debugLineNum = 8213;BA.debugLine="Public Sub getKeepDisplayValues As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8214;BA.debugLine="Return mKeepDisplayValues";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ );
 BA.debugLineNum = 8215;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getleft(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getLeft (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7455);
if (RapidSub.canDelegate("getleft")) { return __ref.runUserSub(false, "xchart","getleft", __ref);}
 BA.debugLineNum = 7455;BA.debugLine="Public Sub getLeft As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7456;BA.debugLine="Return mBase.Left";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getLeft");
 BA.debugLineNum = 7457;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getlegendlinenumbers(RemoteObject __ref,RemoteObject _limit) throws Exception{
try {
		Debug.PushSubsStack("GetLegendLineNumbers (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7081);
if (RapidSub.canDelegate("getlegendlinenumbers")) { return __ref.runUserSub(false, "xchart","getlegendlinenumbers", __ref, _limit);}
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _box = RemoteObject.createImmutable(0);
RemoteObject _alltoobig = RemoteObject.createImmutable(false);
int _i = 0;
RemoteObject _item = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _txt = RemoteObject.createImmutable("");
Debug.locals.put("Limit", _limit);
 BA.debugLineNum = 7081;BA.debugLine="Private Sub GetLegendLineNumbers(Limit As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7082;BA.debugLine="Private x As Int";
Debug.JustUpdateDeviceLine();
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
 BA.debugLineNum = 7083;BA.debugLine="Private box As Int = 1.05 * Legend.TextHeight";
Debug.JustUpdateDeviceLine();
_box = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.05),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("box", _box);Debug.locals.put("box", _box);
 BA.debugLineNum = 7085;BA.debugLine="Legend.LineNumber = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("LineNumber" /*RemoteObject*/ ,BA.numberCast(int.class, 1));
 BA.debugLineNum = 7086;BA.debugLine="Legend.LineNumbers.Clear";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineNumbers" /*RemoteObject*/ ).runVoidMethod ("Clear");
 BA.debugLineNum = 7087;BA.debugLine="Legend.LineChange.Clear";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineChange" /*RemoteObject*/ ).runVoidMethod ("Clear");
 BA.debugLineNum = 7089;BA.debugLine="Private AllTooBig = False As Boolean";
Debug.JustUpdateDeviceLine();
_alltoobig = xchart.__c.getField(true,"False");Debug.locals.put("AllTooBig", _alltoobig);Debug.locals.put("AllTooBig", _alltoobig);
 BA.debugLineNum = 7091;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step7 = 1;
final int limit7 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step7 > 0 && _i <= limit7) || (step7 < 0 && _i >= limit7) ;_i = ((int)(0 + _i + step7))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 7092;BA.debugLine="Private Item As ItemData";
Debug.JustUpdateDeviceLine();
_item = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("Item", _item);
 BA.debugLineNum = 7093;BA.debugLine="Item = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_item = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("Item", _item);
 BA.debugLineNum = 7094;BA.debugLine="Private txt As String = Item.Name";
Debug.JustUpdateDeviceLine();
_txt = _item.getField(true,"Name" /*RemoteObject*/ );Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 7095;BA.debugLine="If Graph.ChartType = \"PIE\" And Legend.IncludeLeg";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 7096;BA.debugLine="txt = txt & \" : \" & NumberFormat3(Item.Value, 6";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_txt,RemoteObject.createImmutable(" : "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, _item.getField(true,"Value" /*RemoteObject*/ ))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 7098;BA.debugLine="If 1.85 * box + MeasureTextWidth(txt, Legend.Tex";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.85),_box,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))}, "*+",1, 0),BA.numberCast(double.class, _limit))) { 
 BA.debugLineNum = 7099;BA.debugLine="AllTooBig = True";
Debug.JustUpdateDeviceLine();
_alltoobig = xchart.__c.getField(true,"True");Debug.locals.put("AllTooBig", _alltoobig);
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 7103;BA.debugLine="If AllTooBig = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_alltoobig,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 7104;BA.debugLine="Legend.LineNumber = Items.Size";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("LineNumber" /*RemoteObject*/ ,__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"));
 BA.debugLineNum = 7105;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step20 = 1;
final int limit20 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step20 > 0 && _i <= limit20) || (step20 < 0 && _i >= limit20) ;_i = ((int)(0 + _i + step20))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 7106;BA.debugLine="Legend.LineChange.Add(True)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineChange" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((xchart.__c.getField(true,"True"))));
 BA.debugLineNum = 7107;BA.debugLine="Legend.LineNumbers.Add(i)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineNumbers" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)(RemoteObject.createImmutable((_i))));
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 7110;BA.debugLine="x = 0";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, 0);Debug.locals.put("x", _x);
 BA.debugLineNum = 7111;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step26 = 1;
final int limit26 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step26 > 0 && _i <= limit26) || (step26 < 0 && _i >= limit26) ;_i = ((int)(0 + _i + step26))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 7112;BA.debugLine="Private Item As ItemData";
Debug.JustUpdateDeviceLine();
_item = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("Item", _item);
 BA.debugLineNum = 7113;BA.debugLine="Item = Items.Get(i)";
Debug.JustUpdateDeviceLine();
_item = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("Item", _item);
 BA.debugLineNum = 7114;BA.debugLine="Private txt As String = Item.Name";
Debug.JustUpdateDeviceLine();
_txt = _item.getField(true,"Name" /*RemoteObject*/ );Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 7115;BA.debugLine="If Graph.ChartType = \"PIE\" And Legend.IncludeLe";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeValues" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 7116;BA.debugLine="txt = txt & \" : \" & NumberFormat3(Item.Value,";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_txt,RemoteObject.createImmutable(" : "),__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, _item.getField(true,"Value" /*RemoteObject*/ ))),(Object)(BA.numberCast(int.class, 6))));Debug.locals.put("txt", _txt);
 };
 BA.debugLineNum = 7118;BA.debugLine="x = x + 1.85 * box + MeasureTextWidth(txt, Lege";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_x,RemoteObject.createImmutable(1.85),_box,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))}, "+*+",2, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 7119;BA.debugLine="If x > Limit Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, _limit))) { 
 BA.debugLineNum = 7120;BA.debugLine="x = 1.85 * box + MeasureTextWidth(txt, Legend.";
Debug.JustUpdateDeviceLine();
_x = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.85),_box,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))}, "*+",1, 0));Debug.locals.put("x", _x);
 BA.debugLineNum = 7121;BA.debugLine="Legend.LineNumber = Legend.LineNumber + 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("LineNumber" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"LineNumber" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+",1, 1));
 BA.debugLineNum = 7122;BA.debugLine="Legend.LineChange.Add(True)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineChange" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((xchart.__c.getField(true,"True"))));
 }else {
 BA.debugLineNum = 7124;BA.debugLine="Legend.LineChange.Add(False)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineChange" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((xchart.__c.getField(true,"False"))));
 };
 BA.debugLineNum = 7126;BA.debugLine="Legend.LineNumbers.Add(Legend.LineNumber - 1)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"LineNumbers" /*RemoteObject*/ ).runVoidMethod ("Add",(Object)((RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"LineNumber" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1))));
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 7129;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getlegendtextsize(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getLegendTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7549);
if (RapidSub.canDelegate("getlegendtextsize")) { return __ref.runUserSub(false, "xchart","getlegendtextsize", __ref);}
 BA.debugLineNum = 7549;BA.debugLine="Public Sub getLegendTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7550;BA.debugLine="Return Legend.TextSize";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ );
 BA.debugLineNum = 7551;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0f);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getlinepointsminmaxmeanvalues(RemoteObject __ref,RemoteObject _axis) throws Exception{
try {
		Debug.PushSubsStack("GetLinePointsMinMaxMeanValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2793);
if (RapidSub.canDelegate("getlinepointsminmaxmeanvalues")) { return __ref.runUserSub(false, "xchart","getlinepointsminmaxmeanvalues", __ref, _axis);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _j = RemoteObject.createImmutable(0);
RemoteObject _nbpoints = RemoteObject.createImmutable(0);
RemoteObject _ip0 = RemoteObject.createImmutable(0);
RemoteObject _ip1 = RemoteObject.createImmutable(0);
RemoteObject _mmmvalues = null;
RemoteObject _yvals = null;
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _total = RemoteObject.createImmutable(0);
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
int _l = 0;
RemoteObject _yxval = null;
Debug.locals.put("Axis", _axis);
 BA.debugLineNum = 2793;BA.debugLine="Private Sub GetLinePointsMinMaxMeanValues(Axis As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2794;BA.debugLine="Private i, j, NbPoints, iP0, iP1 As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_j = RemoteObject.createImmutable(0);Debug.locals.put("j", _j);
_nbpoints = RemoteObject.createImmutable(0);Debug.locals.put("NbPoints", _nbpoints);
_ip0 = RemoteObject.createImmutable(0);Debug.locals.put("iP0", _ip0);
_ip1 = RemoteObject.createImmutable(0);Debug.locals.put("iP1", _ip1);
 BA.debugLineNum = 2795;BA.debugLine="Private MMMValues(3) As Double";
Debug.JustUpdateDeviceLine();
_mmmvalues = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});Debug.locals.put("MMMValues", _mmmvalues);
 BA.debugLineNum = 2796;BA.debugLine="MMMValues(1) = -1E10";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, -1e10),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2797;BA.debugLine="MMMValues(0) = 1E10";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 1e10),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2798;BA.debugLine="MMMValues(2) = 0";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 2));
 BA.debugLineNum = 2800;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE"),BA.ObjectToString("H_LINE"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("YX_CHART"),BA.ObjectToString("BUBBLE"))) {
case 0: 
case 1: 
case 2: {
 BA.debugLineNum = 2802;BA.debugLine="If Zoom.ScalesOnZoomedPart = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ScalesOnZoomedPart" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2803;BA.debugLine="iP0 = 0";
Debug.JustUpdateDeviceLine();
_ip0 = BA.numberCast(int.class, 0);Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 2804;BA.debugLine="iP1 = Points.Size - 1";
Debug.JustUpdateDeviceLine();
_ip1 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("iP1", _ip1);
 }else {
 BA.debugLineNum = 2806;BA.debugLine="iP0 = Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_ip0 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ );Debug.locals.put("iP0", _ip0);
 BA.debugLineNum = 2807;BA.debugLine="iP1 = Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
_ip1 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ );Debug.locals.put("iP1", _ip1);
 };
 BA.debugLineNum = 2809;BA.debugLine="If Scale(Axis).Different = False Then 'mono sca";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2810;BA.debugLine="NbPoints = 0";
Debug.JustUpdateDeviceLine();
_nbpoints = BA.numberCast(int.class, 0);Debug.locals.put("NbPoints", _nbpoints);
 BA.debugLineNum = 2811;BA.debugLine="For i = iP0 To iP1";
Debug.JustUpdateDeviceLine();
{
final int step17 = 1;
final int limit17 = _ip1.<Integer>get().intValue();
_i = _ip0 ;
for (;(step17 > 0 && _i.<Integer>get().intValue() <= limit17) || (step17 < 0 && _i.<Integer>get().intValue() >= limit17) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step17))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2812;BA.debugLine="Private YVals() As Double";
Debug.JustUpdateDeviceLine();
_yvals = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2813;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2814;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2815;BA.debugLine="YVals = PD.YArray";
Debug.JustUpdateDeviceLine();
_yvals = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2816;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step22 = 1;
final int limit22 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step22 > 0 && _j.<Integer>get().intValue() <= limit22) || (step22 < 0 && _j.<Integer>get().intValue() >= limit22) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step22))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 2817;BA.debugLine="If YVals(j) <> mMissingDataValue Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_yvals.getArrayElement(true,_j),__ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 2818;BA.debugLine="MMMValues(1) = Max(MMMValues(1), YVals(j))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yvals.getArrayElement(true,_j))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2819;BA.debugLine="MMMValues(0) = Min(MMMValues(0), YVals(j))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yvals.getArrayElement(true,_j))),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2820;BA.debugLine="MMMValues(2) = MMMValues(2) + YVals(j)";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (RemoteObject.solve(new RemoteObject[] {_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 2)),_yvals.getArrayElement(true,_j)}, "+",1, 0),BA.numberCast(int.class, 2));
 BA.debugLineNum = 2821;BA.debugLine="NbPoints = NbPoints + 1";
Debug.JustUpdateDeviceLine();
_nbpoints = RemoteObject.solve(new RemoteObject[] {_nbpoints,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("NbPoints", _nbpoints);
 };
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 2826;BA.debugLine="NbPoints = 0";
Debug.JustUpdateDeviceLine();
_nbpoints = BA.numberCast(int.class, 0);Debug.locals.put("NbPoints", _nbpoints);
 BA.debugLineNum = 2827;BA.debugLine="For i = iP0 To iP1";
Debug.JustUpdateDeviceLine();
{
final int step33 = 1;
final int limit33 = _ip1.<Integer>get().intValue();
_i = _ip0 ;
for (;(step33 > 0 && _i.<Integer>get().intValue() <= limit33) || (step33 < 0 && _i.<Integer>get().intValue() >= limit33) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step33))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2828;BA.debugLine="Private YVals() As Double";
Debug.JustUpdateDeviceLine();
_yvals = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2829;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2830;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2831;BA.debugLine="YVals = PD.YArray";
Debug.JustUpdateDeviceLine();
_yvals = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2832;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step38 = 1;
final int limit38 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step38 > 0 && _j.<Integer>get().intValue() <= limit38) || (step38 < 0 && _j.<Integer>get().intValue() >= limit38) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step38))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 2833;BA.debugLine="If YVals(Axis - 1) <> mMissingDataValue Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_yvals.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_axis,RemoteObject.createImmutable(1)}, "-",1, 1)),__ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ ))) { 
 BA.debugLineNum = 2834;BA.debugLine="MMMValues(1) = Max(MMMValues(1), YVals(Axis";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yvals.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_axis,RemoteObject.createImmutable(1)}, "-",1, 1)))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2835;BA.debugLine="MMMValues(0) = Min(MMMValues(0), YVals(Axis";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yvals.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_axis,RemoteObject.createImmutable(1)}, "-",1, 1)))),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2836;BA.debugLine="MMMValues(2) = MMMValues(2) + YVals(Axis -";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (RemoteObject.solve(new RemoteObject[] {_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 2)),_yvals.getArrayElement(true,RemoteObject.solve(new RemoteObject[] {_axis,RemoteObject.createImmutable(1)}, "-",1, 1))}, "+",1, 0),BA.numberCast(int.class, 2));
 BA.debugLineNum = 2837;BA.debugLine="NbPoints = NbPoints + 1";
Debug.JustUpdateDeviceLine();
_nbpoints = RemoteObject.solve(new RemoteObject[] {_nbpoints,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("NbPoints", _nbpoints);
 };
 }
}Debug.locals.put("j", _j);
;
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 2842;BA.debugLine="MMMValues(2) = MMMValues(2) / NbPoints";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (RemoteObject.solve(new RemoteObject[] {_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 2)),_nbpoints}, "/",0, 0),BA.numberCast(int.class, 2));
 break; }
case 3: {
 BA.debugLineNum = 2844;BA.debugLine="MMMValues(1) = 0";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2845;BA.debugLine="MMMValues(0) = 0";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2846;BA.debugLine="MMMValues(2) = 0";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 2));
 BA.debugLineNum = 2849;BA.debugLine="For i = 0 To Points.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step53 = 1;
final int limit53 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step53 > 0 && _i.<Integer>get().intValue() <= limit53) || (step53 < 0 && _i.<Integer>get().intValue() >= limit53) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step53))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2850;BA.debugLine="Private YVals(), Total As Double";
Debug.JustUpdateDeviceLine();
_yvals = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YVals", _yvals);
_total = RemoteObject.createImmutable(0);Debug.locals.put("Total", _total);
 BA.debugLineNum = 2851;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2852;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2853;BA.debugLine="YVals = PD.YArray";
Debug.JustUpdateDeviceLine();
_yvals = _pd.getField(false,"YArray" /*RemoteObject*/ );Debug.locals.put("YVals", _yvals);
 BA.debugLineNum = 2854;BA.debugLine="For j = 0 To PD.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step58 = 1;
final int limit58 = RemoteObject.solve(new RemoteObject[] {_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_j = BA.numberCast(int.class, 0) ;
for (;(step58 > 0 && _j.<Integer>get().intValue() <= limit58) || (step58 < 0 && _j.<Integer>get().intValue() >= limit58) ;_j = RemoteObject.createImmutable((int)(0 + _j.<Integer>get().intValue() + step58))  ) {
Debug.locals.put("j", _j);
 BA.debugLineNum = 2855;BA.debugLine="Total = Total + YVals(j)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_yvals.getArrayElement(true,_j)}, "+",1, 0);Debug.locals.put("Total", _total);
 }
}Debug.locals.put("j", _j);
;
 BA.debugLineNum = 2857;BA.debugLine="MMMValues(1) = Max(MMMValues(1), Total)";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_total)),BA.numberCast(int.class, 1));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2859;BA.debugLine="MinMaxMeanValues(0) = MMMValues(0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2860;BA.debugLine="MinMaxMeanValues(1) = MMMValues(1)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(int.class, 1));
 break; }
case 4: 
case 5: {
 BA.debugLineNum = 2862;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 2863;BA.debugLine="If Graph.ChartType = \"BUBBLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 2864;BA.debugLine="mBubbleValMinMax(1) = -1E10";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbubblevalminmax" /*RemoteObject*/ ).setArrayElement (BA.numberCast(double.class, -1e10),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2865;BA.debugLine="mBubbleValMinMax(0) = 1E10";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbubblevalminmax" /*RemoteObject*/ ).setArrayElement (BA.numberCast(double.class, 1e10),BA.numberCast(int.class, 0));
 };
 BA.debugLineNum = 2867;BA.debugLine="If Scale(Axis).Different = False Then 'mono sca";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2868;BA.debugLine="For l = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step72 = 1;
final int limit72 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_l = 0 ;
for (;(step72 > 0 && _l <= limit72) || (step72 < 0 && _l >= limit72) ;_l = ((int)(0 + _l + step72))  ) {
Debug.locals.put("l", _l);
 BA.debugLineNum = 2869;BA.debugLine="ID = Items.Get(l)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _l))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 2870;BA.debugLine="For i = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step74 = 1;
final int limit74 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step74 > 0 && _i.<Integer>get().intValue() <= limit74) || (step74 < 0 && _i.<Integer>get().intValue() >= limit74) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step74))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2871;BA.debugLine="Private YXVal() As Double";
Debug.JustUpdateDeviceLine();
_yxval = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YXVal", _yxval);
 BA.debugLineNum = 2872;BA.debugLine="YXVal = ID.YXArray.Get(i)";
Debug.JustUpdateDeviceLine();
_yxval = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("YXVal", _yxval);
 BA.debugLineNum = 2873;BA.debugLine="If Axis = sX Then  'X axis";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_axis,BA.numberCast(double.class, __ref.getField(true,"_sx" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 2874;BA.debugLine="MMMValues(1) = Max(MMMValues(1), YXVal(0))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0)))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2875;BA.debugLine="MMMValues(0) = Min(MMMValues(0), YXVal(0))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0)))),BA.numberCast(int.class, 0));
 }else {
 BA.debugLineNum = 2877;BA.debugLine="MMMValues(1) = Max(MMMValues(1), YXVal(1))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1)))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2878;BA.debugLine="MMMValues(0) = Min(MMMValues(0), YXVal(1))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1)))),BA.numberCast(int.class, 0));
 };
 BA.debugLineNum = 2880;BA.debugLine="If Graph.ChartType = \"BUBBLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 2881;BA.debugLine="mBubbleValMinMax(1) = Max(mBubbleValMinMax(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbubblevalminmax" /*RemoteObject*/ ).setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(__ref.getField(false,"_mbubblevalminmax" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 2)))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2882;BA.debugLine="mBubbleValMinMax(0) = Min(mBubbleValMinMax(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbubblevalminmax" /*RemoteObject*/ ).setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(__ref.getField(false,"_mbubblevalminmax" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 2)))),BA.numberCast(int.class, 0));
 };
 }
}Debug.locals.put("i", _i);
;
 }
}Debug.locals.put("l", _l);
;
 }else {
 BA.debugLineNum = 2887;BA.debugLine="ID = Items.Get(Axis - 1)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(RemoteObject.solve(new RemoteObject[] {_axis,RemoteObject.createImmutable(1)}, "-",1, 1))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 2888;BA.debugLine="For i = 0 To ID.YXArray.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step92 = 1;
final int limit92 = RemoteObject.solve(new RemoteObject[] {_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step92 > 0 && _i.<Integer>get().intValue() <= limit92) || (step92 < 0 && _i.<Integer>get().intValue() >= limit92) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step92))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2889;BA.debugLine="Private YXVal() As Double";
Debug.JustUpdateDeviceLine();
_yxval = RemoteObject.createNewArray ("double", new int[] {0}, new Object[]{});Debug.locals.put("YXVal", _yxval);
 BA.debugLineNum = 2890;BA.debugLine="YXVal = ID.YXArray.Get(i)";
Debug.JustUpdateDeviceLine();
_yxval = (_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("YXVal", _yxval);
 BA.debugLineNum = 2891;BA.debugLine="If Axis = sX Then  'X axis";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_axis,BA.numberCast(double.class, __ref.getField(true,"_sx" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 2892;BA.debugLine="MMMValues(1) = Max(MMMValues(1), YXVal(0))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0)))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2893;BA.debugLine="MMMValues(0) = Min(MMMValues(0), YXVal(0))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 0)))),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2894;BA.debugLine="MMMValues(2) = MMMValues(2) + YXVal(0)";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (RemoteObject.solve(new RemoteObject[] {_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 2)),_yxval.getArrayElement(true,BA.numberCast(int.class, 0))}, "+",1, 0),BA.numberCast(int.class, 2));
 }else {
 BA.debugLineNum = 2896;BA.debugLine="MMMValues(1) = Max(MMMValues(1), YXVal(1))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1)))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2897;BA.debugLine="MMMValues(0) = Min(MMMValues(0), YXVal(1))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_yxval.getArrayElement(true,BA.numberCast(int.class, 1)))),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2898;BA.debugLine="MMMValues(2) = MMMValues(2) + YXVal(1)";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (RemoteObject.solve(new RemoteObject[] {_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 2)),_yxval.getArrayElement(true,BA.numberCast(int.class, 1))}, "+",1, 0),BA.numberCast(int.class, 2));
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 2902;BA.debugLine="MMMValues(2) = 0";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 2));
 break; }
}
;
 BA.debugLineNum = 2905;BA.debugLine="MinMaxMeanValues(0) = MMMValues(0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2906;BA.debugLine="MinMaxMeanValues(1) = MMMValues(1)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2907;BA.debugLine="MinMaxMeanValues(2) = MMMValues(2)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 2)),BA.numberCast(int.class, 2));
 BA.debugLineNum = 2909;BA.debugLine="Return MMMValues";
Debug.JustUpdateDeviceLine();
if (true) return _mmmvalues;
 BA.debugLineNum = 2910;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(null);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getmaxnumberbars(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("GetMaxNumberBars (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8866);
if (RapidSub.canDelegate("getmaxnumberbars")) { return __ref.runUserSub(false, "xchart","getmaxnumberbars", __ref);}
RemoteObject _maxbars = RemoteObject.createImmutable(0);
RemoteObject _minwidth = RemoteObject.createImmutable(0);
RemoteObject _margin = RemoteObject.createImmutable(0);
 BA.debugLineNum = 8866;BA.debugLine="Public Sub GetMaxNumberBars As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8867;BA.debugLine="Private MaxBars As Int";
Debug.JustUpdateDeviceLine();
_maxbars = RemoteObject.createImmutable(0);Debug.locals.put("MaxBars", _maxbars);
 BA.debugLineNum = 8868;BA.debugLine="Private MinWidth = 5dip As Int";
Debug.JustUpdateDeviceLine();
_minwidth = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)));Debug.locals.put("MinWidth", _minwidth);Debug.locals.put("MinWidth", _minwidth);
 BA.debugLineNum = 8869;BA.debugLine="Private Margin = 0.02 * xpnlGraph.Width As Int";
Debug.JustUpdateDeviceLine();
_margin = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.02),__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "*",0, 0));Debug.locals.put("Margin", _margin);Debug.locals.put("Margin", _margin);
 BA.debugLineNum = 8871;BA.debugLine="InitChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initchart" /*RemoteObject*/ );
 BA.debugLineNum = 8872;BA.debugLine="MaxBars = (Graph.Width - Margin) / MinWidth - 1";
Debug.JustUpdateDeviceLine();
_maxbars = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),_margin}, "-",1, 1)),_minwidth,RemoteObject.createImmutable(1)}, "/-",1, 0));Debug.locals.put("MaxBars", _maxbars);
 BA.debugLineNum = 8873;BA.debugLine="Return MaxBars";
Debug.JustUpdateDeviceLine();
if (true) return _maxbars;
 BA.debugLineNum = 8874;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getmaxnumberbars2(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("GetMaxNumberBars2 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8880);
if (RapidSub.canDelegate("getmaxnumberbars2")) { return __ref.runUserSub(false, "xchart","getmaxnumberbars2", __ref);}
RemoteObject _maxbars = RemoteObject.createImmutable(0);
RemoteObject _minitemwidth = RemoteObject.createImmutable(0);
RemoteObject _margin = RemoteObject.createImmutable(0);
RemoteObject _space = RemoteObject.createImmutable(0);
 BA.debugLineNum = 8880;BA.debugLine="Public Sub GetMaxNumberBars2 As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8881;BA.debugLine="Private MaxBars, MinItemWidth As Int";
Debug.JustUpdateDeviceLine();
_maxbars = RemoteObject.createImmutable(0);Debug.locals.put("MaxBars", _maxbars);
_minitemwidth = RemoteObject.createImmutable(0);Debug.locals.put("MinItemWidth", _minitemwidth);
 BA.debugLineNum = 8883;BA.debugLine="InitTextSizes";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_inittextsizes" /*RemoteObject*/ );
 BA.debugLineNum = 8884;BA.debugLine="Graph.Left = MeasureTextWidth(\"-99999\", Texts.Sca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(BA.ObjectToString("-99999")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ ))),RemoteObject.createImmutable(1.05),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 15)))}, "+*+",2, 0)));
 BA.debugLineNum = 8886;BA.debugLine="Graph.Left = Graph.Left + Texts.AxisTextHeight *";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.8)}, "+*",1, 0)));
 BA.debugLineNum = 8887;BA.debugLine="Graph.Right = xpnlGraph.Width - 1.5 * Texts.Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 BA.debugLineNum = 8888;BA.debugLine="Graph.Width = Graph.Right - Graph.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 8890;BA.debugLine="Private Margin = 0.02 * Graph.Width As Int";
Debug.JustUpdateDeviceLine();
_margin = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.02),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("Margin", _margin);Debug.locals.put("Margin", _margin);
 BA.debugLineNum = 8892;BA.debugLine="Private Space As Int";
Debug.JustUpdateDeviceLine();
_space = RemoteObject.createImmutable(0);Debug.locals.put("Space", _space);
 BA.debugLineNum = 8894;BA.debugLine="Space = 1dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("Space", _space);
 BA.debugLineNum = 8895;BA.debugLine="If Graph.ChartType = \"BAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR"))) { 
 BA.debugLineNum = 8896;BA.debugLine="MinItemWidth = 4dip * Items.Size + Space";
Debug.JustUpdateDeviceLine();
_minitemwidth = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))),__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),_space}, "*+",1, 1);Debug.locals.put("MinItemWidth", _minitemwidth);
 }else {
 BA.debugLineNum = 8898;BA.debugLine="MinItemWidth = 4dip + Space";
Debug.JustUpdateDeviceLine();
_minitemwidth = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))),_space}, "+",1, 1);Debug.locals.put("MinItemWidth", _minitemwidth);
 };
 BA.debugLineNum = 8901;BA.debugLine="MaxBars = (Graph.Width - Margin) / MinItemWidth";
Debug.JustUpdateDeviceLine();
_maxbars = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),_margin}, "-",1, 1)),_minitemwidth}, "/",0, 0));Debug.locals.put("MaxBars", _maxbars);
 BA.debugLineNum = 8902;BA.debugLine="Return MaxBars";
Debug.JustUpdateDeviceLine();
if (true) return _maxbars;
 BA.debugLineNum = 8903;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getmissingdatavalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getMissingDataValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8321);
if (RapidSub.canDelegate("getmissingdatavalue")) { return __ref.runUserSub(false, "xchart","getmissingdatavalue", __ref);}
 BA.debugLineNum = 8321;BA.debugLine="Public Sub getMissingDataValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8322;BA.debugLine="Return mMissingDataValue";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mmissingdatavalue" /*RemoteObject*/ );
 BA.debugLineNum = 8323;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getnbpoints(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getNbPoints (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7899);
if (RapidSub.canDelegate("getnbpoints")) { return __ref.runUserSub(false, "xchart","getnbpoints", __ref);}
 BA.debugLineNum = 7899;BA.debugLine="Public Sub getNbPoints As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7901;BA.debugLine="Return Points.Size";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize");
 BA.debugLineNum = 7902;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getnbxintervals(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getNbXIntervals (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7842);
if (RapidSub.canDelegate("getnbxintervals")) { return __ref.runUserSub(false, "xchart","getnbxintervals", __ref);}
 BA.debugLineNum = 7842;BA.debugLine="Public Sub getNbXIntervals As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7843;BA.debugLine="Return Scale(sX).NbIntervals";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"NbIntervals" /*RemoteObject*/ );
 BA.debugLineNum = 7844;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getnbyintervals(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getNbYIntervals (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7828);
if (RapidSub.canDelegate("getnbyintervals")) { return __ref.runUserSub(false, "xchart","getnbyintervals", __ref);}
 BA.debugLineNum = 7828;BA.debugLine="Public Sub getNbYIntervals As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7829;BA.debugLine="Return Scale(sY(0)).NbIntervals";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ );
 BA.debugLineNum = 7830;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getpieaddpercentage(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getPieAddPercentage (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8067);
if (RapidSub.canDelegate("getpieaddpercentage")) { return __ref.runUserSub(false, "xchart","getpieaddpercentage", __ref);}
 BA.debugLineNum = 8067;BA.debugLine="Public Sub getPieAddPercentage As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8068;BA.debugLine="Return Graph.PieAddPercentage";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieAddPercentage" /*RemoteObject*/ );
 BA.debugLineNum = 8069;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getpiegapdegrees(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getPieGapDegrees (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8057);
if (RapidSub.canDelegate("getpiegapdegrees")) { return __ref.runUserSub(false, "xchart","getpiegapdegrees", __ref);}
 BA.debugLineNum = 8057;BA.debugLine="Public Sub getPieGapDegrees As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8058;BA.debugLine="Return Graph.PieGapDegrees";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieGapDegrees" /*RemoteObject*/ );
 BA.debugLineNum = 8059;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getpiepercentagenbfractions(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getPiePercentageNbFractions (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8077);
if (RapidSub.canDelegate("getpiepercentagenbfractions")) { return __ref.runUserSub(false, "xchart","getpiepercentagenbfractions", __ref);}
 BA.debugLineNum = 8077;BA.debugLine="Public Sub getPiePercentageNbFractions As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8078;BA.debugLine="Return mPiePercentageNbFractions";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_mpiepercentagenbfractions" /*RemoteObject*/ );
 BA.debugLineNum = 8079;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getpiestartangle(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getPieStartAngle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8047);
if (RapidSub.canDelegate("getpiestartangle")) { return __ref.runUserSub(false, "xchart","getpiestartangle", __ref);}
 BA.debugLineNum = 8047;BA.debugLine="Public Sub getPieStartAngle As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8048;BA.debugLine="Return Graph.PieStartAngle";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"PieStartAngle" /*RemoteObject*/ );
 BA.debugLineNum = 8049;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getradardrawscale(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getRadarDrawScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8176);
if (RapidSub.canDelegate("getradardrawscale")) { return __ref.runUserSub(false, "xchart","getradardrawscale", __ref);}
 BA.debugLineNum = 8176;BA.debugLine="Public Sub getRadarDrawScale As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8177;BA.debugLine="Return Graph.RadarDrawScale";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarDrawScale" /*RemoteObject*/ );
 BA.debugLineNum = 8178;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getradardrawscalevalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getRadarDrawScaleValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8186);
if (RapidSub.canDelegate("getradardrawscalevalues")) { return __ref.runUserSub(false, "xchart","getradardrawscalevalues", __ref);}
 BA.debugLineNum = 8186;BA.debugLine="Public Sub getRadarDrawScaleValues As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8187;BA.debugLine="Return Graph.RadarDrawScaleValues";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarDrawScaleValues" /*RemoteObject*/ );
 BA.debugLineNum = 8188;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getradarscaletype(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getRadarScaleType (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8196);
if (RapidSub.canDelegate("getradarscaletype")) { return __ref.runUserSub(false, "xchart","getradarscaletype", __ref);}
 BA.debugLineNum = 8196;BA.debugLine="Public Sub getRadarScaleType As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8197;BA.debugLine="Return Graph.RadarScaleType";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarScaleType" /*RemoteObject*/ );
 BA.debugLineNum = 8198;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getradarstartangle(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getRadarStartAngle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8165);
if (RapidSub.canDelegate("getradarstartangle")) { return __ref.runUserSub(false, "xchart","getradarstartangle", __ref);}
 BA.debugLineNum = 8165;BA.debugLine="Public Sub getRadarStartAngle As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8166;BA.debugLine="Return Graph.RadarStartAngle";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"RadarStartAngle" /*RemoteObject*/ );
 BA.debugLineNum = 8167;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getreverseyscale(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getReverseYScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8332);
if (RapidSub.canDelegate("getreverseyscale")) { return __ref.runUserSub(false, "xchart","getreverseyscale", __ref);}
 BA.debugLineNum = 8332;BA.debugLine="Public Sub getReverseYScale As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8333;BA.debugLine="Return Scale(sY(0)).ReverseYScale";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ );
 BA.debugLineNum = 8334;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getrotation(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getRotation (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7912);
if (RapidSub.canDelegate("getrotation")) { return __ref.runUserSub(false, "xchart","getrotation", __ref);}
 BA.debugLineNum = 7912;BA.debugLine="Public Sub getRotation As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7913;BA.debugLine="Return Graph.Rotation";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Rotation" /*RemoteObject*/ );
 BA.debugLineNum = 7914;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getscalemant(RemoteObject __ref,RemoteObject _scalemant0,RemoteObject _axis) throws Exception{
try {
		Debug.PushSubsStack("GetScaleMant (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2704);
if (RapidSub.canDelegate("getscalemant")) { return __ref.runUserSub(false, "xchart","getscalemant", __ref, _scalemant0, _axis);}
RemoteObject _scalemant1 = RemoteObject.createImmutable(0);
int _i = 0;
Debug.locals.put("ScaleMant0", _scalemant0);
Debug.locals.put("Axis", _axis);
 BA.debugLineNum = 2704;BA.debugLine="Private Sub GetScaleMant(ScaleMant0 As Double, Axi";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2705;BA.debugLine="Private ScaleMant1 As Double";
Debug.JustUpdateDeviceLine();
_scalemant1 = RemoteObject.createImmutable(0);Debug.locals.put("ScaleMant1", _scalemant1);
 BA.debugLineNum = 2707;BA.debugLine="ScaleLogVals(Axis)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_scalelogvals" /*RemoteObject*/ ,(Object)(_axis));
 BA.debugLineNum = 2709;BA.debugLine="If Round2(ScaleMant0, 14) <= Round2(ScaleLog(Axis";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Round2",(Object)(_scalemant0),(Object)(BA.numberCast(int.class, 14))),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(BA.numberCast(int.class, 14))))) { 
 BA.debugLineNum = 2710;BA.debugLine="ScaleMant1 = 0";
Debug.JustUpdateDeviceLine();
_scalemant1 = BA.numberCast(double.class, 0);Debug.locals.put("ScaleMant1", _scalemant1);
 }else {
 BA.debugLineNum = 2712;BA.debugLine="For i = 0 To ScaleLog(Axis).Logs.Length - 2";
Debug.JustUpdateDeviceLine();
{
final int step6 = 1;
final int limit6 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(2)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step6 > 0 && _i <= limit6) || (step6 < 0 && _i >= limit6) ;_i = ((int)(0 + _i + step6))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2713;BA.debugLine="If Round2(ScaleMant0, 14) > Round2(ScaleLog(Axi";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",xchart.__c.runMethod(true,"Round2",(Object)(_scalemant0),(Object)(BA.numberCast(int.class, 14))),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))),(Object)(BA.numberCast(int.class, 14)))) && RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Round2",(Object)(_scalemant0),(Object)(BA.numberCast(int.class, 14))),xchart.__c.runMethod(true,"Round2",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Logs" /*RemoteObject*/ ).getArrayElement(true,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(_i),RemoteObject.createImmutable(1)}, "+",1, 1))),(Object)(BA.numberCast(int.class, 14))))) { 
 BA.debugLineNum = 2714;BA.debugLine="ScaleMant1 = Logarithm(ScaleLog(Axis).Vals(i +";
Debug.JustUpdateDeviceLine();
_scalemant1 = xchart.__c.runMethod(true,"Logarithm",(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(false,"Vals" /*RemoteObject*/ ).getArrayElement(true,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(_i),RemoteObject.createImmutable(1)}, "+",1, 1))),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("ScaleMant1", _scalemant1);
 BA.debugLineNum = 2715;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 2720;BA.debugLine="Return ScaleMant1";
Debug.JustUpdateDeviceLine();
if (true) return _scalemant1;
 BA.debugLineNum = 2721;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getscalesonzoomedpart(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getScalesOnZoomedPart (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8349);
if (RapidSub.canDelegate("getscalesonzoomedpart")) { return __ref.runUserSub(false, "xchart","getscalesonzoomedpart", __ref);}
 BA.debugLineNum = 8349;BA.debugLine="Public Sub getScalesOnZoomedPart As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8350;BA.debugLine="Return Zoom.ScalesOnZoomedPart";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ScalesOnZoomedPart" /*RemoteObject*/ );
 BA.debugLineNum = 8351;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getscaletextsize(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getScaleTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7537);
if (RapidSub.canDelegate("getscaletextsize")) { return __ref.runUserSub(false, "xchart","getscaletextsize", __ref);}
 BA.debugLineNum = 7537;BA.debugLine="Public Sub getScaleTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7538;BA.debugLine="Return Texts.ScaleTextSize";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ );
 BA.debugLineNum = 7539;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0f);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getscalevalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getScaleValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7606);
if (RapidSub.canDelegate("getscalevalues")) { return __ref.runUserSub(false, "xchart","getscalevalues", __ref);}
 BA.debugLineNum = 7606;BA.debugLine="Public Sub getScaleValues As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7607;BA.debugLine="Return Scale(sY(0)).ScaleValues";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ScaleValues" /*RemoteObject*/ );
 BA.debugLineNum = 7608;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getscalexvalueslog(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getScaleXValuesLog (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7643);
if (RapidSub.canDelegate("getscalexvalueslog")) { return __ref.runUserSub(false, "xchart","getscalexvalueslog", __ref);}
 BA.debugLineNum = 7643;BA.debugLine="Public Sub getScaleXValuesLog As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7644;BA.debugLine="Return ScaleLog(sX).ScaleValues";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"ScaleValues" /*RemoteObject*/ );
 BA.debugLineNum = 7645;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getscaleyvalueslog(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getScaleYValuesLog (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7626);
if (RapidSub.canDelegate("getscaleyvalueslog")) { return __ref.runUserSub(false, "xchart","getscaleyvalueslog", __ref);}
 BA.debugLineNum = 7626;BA.debugLine="Public Sub getScaleYValuesLog As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7627;BA.debugLine="Return ScaleLog(sY(0)).ScaleValues";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ScaleValues" /*RemoteObject*/ );
 BA.debugLineNum = 7628;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getsemitransparentcolor(RemoteObject __ref,RemoteObject _color,RemoteObject _alpha) throws Exception{
try {
		Debug.PushSubsStack("GetSemiTransparentColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6979);
if (RapidSub.canDelegate("getsemitransparentcolor")) { return __ref.runUserSub(false, "xchart","getsemitransparentcolor", __ref, _color, _alpha);}
RemoteObject _a = RemoteObject.createImmutable(0);
RemoteObject _r = RemoteObject.createImmutable(0);
RemoteObject _g = RemoteObject.createImmutable(0);
RemoteObject _b = RemoteObject.createImmutable(0);
RemoteObject _yiq = RemoteObject.createImmutable(0);
Debug.locals.put("Color", _color);
Debug.locals.put("Alpha", _alpha);
 BA.debugLineNum = 6979;BA.debugLine="Private Sub GetSemiTransparentColor(Color As Int,";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6980;BA.debugLine="Private a, r, g, b, yiq As Int	'ignore";
Debug.JustUpdateDeviceLine();
_a = RemoteObject.createImmutable(0);Debug.locals.put("a", _a);
_r = RemoteObject.createImmutable(0);Debug.locals.put("r", _r);
_g = RemoteObject.createImmutable(0);Debug.locals.put("g", _g);
_b = RemoteObject.createImmutable(0);Debug.locals.put("b", _b);
_yiq = RemoteObject.createImmutable(0);Debug.locals.put("yiq", _yiq);
 BA.debugLineNum = 6982;BA.debugLine="a = Bit.UnsignedShiftRight(Bit.And(Color, 0xff000";
Debug.JustUpdateDeviceLine();
_a = xchart.__c.getField(false,"Bit").runMethod(true,"UnsignedShiftRight",(Object)(xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff000000))))),(Object)(BA.numberCast(int.class, 24)));Debug.locals.put("a", _a);
 BA.debugLineNum = 6983;BA.debugLine="r = Bit.UnsignedShiftRight(Bit.And(Color, 0xff000";
Debug.JustUpdateDeviceLine();
_r = xchart.__c.getField(false,"Bit").runMethod(true,"UnsignedShiftRight",(Object)(xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff0000))))),(Object)(BA.numberCast(int.class, 16)));Debug.locals.put("r", _r);
 BA.debugLineNum = 6984;BA.debugLine="g = Bit.UnsignedShiftRight(Bit.And(Color, 0xff00)";
Debug.JustUpdateDeviceLine();
_g = xchart.__c.getField(false,"Bit").runMethod(true,"UnsignedShiftRight",(Object)(xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff00))))),(Object)(BA.numberCast(int.class, 8)));Debug.locals.put("g", _g);
 BA.debugLineNum = 6985;BA.debugLine="b = Bit.And(Color, 0xff)";
Debug.JustUpdateDeviceLine();
_b = xchart.__c.getField(false,"Bit").runMethod(true,"And",(Object)(_color),(Object)(BA.numberCast(int.class, ((int)0xff))));Debug.locals.put("b", _b);
 BA.debugLineNum = 6987;BA.debugLine="a = Alpha";
Debug.JustUpdateDeviceLine();
_a = _alpha;Debug.locals.put("a", _a);
 BA.debugLineNum = 6989;BA.debugLine="Return xui.Color_ARGB(a, r, g, b)";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_ARGB",(Object)(_a),(Object)(_r),(Object)(_g),(Object)(_b));
 BA.debugLineNum = 6990;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getsnapshot(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getSnapshot (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7905);
if (RapidSub.canDelegate("getsnapshot")) { return __ref.runUserSub(false, "xchart","getsnapshot", __ref);}
 BA.debugLineNum = 7905;BA.debugLine="Public Sub getSnapshot As B4XBitmap";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7906;BA.debugLine="Return xpnlGraph.Snapshot";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(false,"Snapshot");
 BA.debugLineNum = 7907;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(null);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getsubtitle(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getSubtitle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7986);
if (RapidSub.canDelegate("getsubtitle")) { return __ref.runUserSub(false, "xchart","getsubtitle", __ref);}
 BA.debugLineNum = 7986;BA.debugLine="Public Sub getSubtitle As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7987;BA.debugLine="Return Graph.Subtitle";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ );
 BA.debugLineNum = 7988;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getsubtitletextsize(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getSubtitleTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7996);
if (RapidSub.canDelegate("getsubtitletextsize")) { return __ref.runUserSub(false, "xchart","getsubtitletextsize", __ref);}
 BA.debugLineNum = 7996;BA.debugLine="Public Sub getSubtitleTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7997;BA.debugLine="Return Texts.AxisTextSize";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextSize" /*RemoteObject*/ );
 BA.debugLineNum = 7998;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0f);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _gettitle(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getTitle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7230);
if (RapidSub.canDelegate("gettitle")) { return __ref.runUserSub(false, "xchart","gettitle", __ref);}
 BA.debugLineNum = 7230;BA.debugLine="Public Sub getTitle As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7231;BA.debugLine="Return Graph.Title";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ );
 BA.debugLineNum = 7232;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _gettitletextsize(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getTitleTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7513);
if (RapidSub.canDelegate("gettitletextsize")) { return __ref.runUserSub(false, "xchart","gettitletextsize", __ref);}
 BA.debugLineNum = 7513;BA.debugLine="Public Sub getTitleTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7514;BA.debugLine="Return Texts.TitleTextSize";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextSize" /*RemoteObject*/ );
 BA.debugLineNum = 7515;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0f);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _gettop(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getTop (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7464);
if (RapidSub.canDelegate("gettop")) { return __ref.runUserSub(false, "xchart","gettop", __ref);}
 BA.debugLineNum = 7464;BA.debugLine="Public Sub getTop As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7465;BA.debugLine="Return mBase.Top";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getTop");
 BA.debugLineNum = 7466;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getvaluestextsize(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getValuesTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7561);
if (RapidSub.canDelegate("getvaluestextsize")) { return __ref.runUserSub(false, "xchart","getvaluestextsize", __ref);}
 BA.debugLineNum = 7561;BA.debugLine="Public Sub getValuesTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7562;BA.debugLine="Return Values.TextSize";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ );
 BA.debugLineNum = 7563;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0f);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getvisible(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getVisible (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7493);
if (RapidSub.canDelegate("getvisible")) { return __ref.runUserSub(false, "xchart","getvisible", __ref);}
 BA.debugLineNum = 7493;BA.debugLine="Public Sub getVisible As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7494;BA.debugLine="Return mBase.Visible";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getVisible");
 BA.debugLineNum = 7495;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getwaterfallminmaxvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("GetWaterfallMinMaxValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2913);
if (RapidSub.canDelegate("getwaterfallminmaxvalues")) { return __ref.runUserSub(false, "xchart","getwaterfallminmaxvalues", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _total = RemoteObject.createImmutable(0);
RemoteObject _mmmvalues = null;
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
 BA.debugLineNum = 2913;BA.debugLine="Private Sub GetWaterfallMinMaxValues As Double()";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2914;BA.debugLine="Private i As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
 BA.debugLineNum = 2915;BA.debugLine="Private Total, MMMValues(3) As Double";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.createImmutable(0);Debug.locals.put("Total", _total);
_mmmvalues = RemoteObject.createNewArray ("double", new int[] {3}, new Object[]{});Debug.locals.put("MMMValues", _mmmvalues);
 BA.debugLineNum = 2917;BA.debugLine="MMMValues(1) = -1E10";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, -1e10),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2918;BA.debugLine="MMMValues(0) = 1E10";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 1e10),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2919;BA.debugLine="MMMValues(2) = 0";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (BA.numberCast(double.class, 0),BA.numberCast(int.class, 2));
 BA.debugLineNum = 2921;BA.debugLine="For i = 0 To Points.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step6 = 1;
final int limit6 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step6 > 0 && _i.<Integer>get().intValue() <= limit6) || (step6 < 0 && _i.<Integer>get().intValue() >= limit6) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step6))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2922;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2923;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2924;BA.debugLine="If i = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_i,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2925;BA.debugLine="PD.YArray(1) = PD.YArray(0)";
Debug.JustUpdateDeviceLine();
_pd.getField(false,"YArray" /*RemoteObject*/ ).setArrayElement (_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2926;BA.debugLine="Total = PD.YArray(0)";
Debug.JustUpdateDeviceLine();
_total = _pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0));Debug.locals.put("Total", _total);
 }else {
 BA.debugLineNum = 2928;BA.debugLine="If PD.BarType = \"T\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"BarType" /*RemoteObject*/ ),BA.ObjectToString("T"))) { 
 BA.debugLineNum = 2929;BA.debugLine="PD.YArray(0) = Total";
Debug.JustUpdateDeviceLine();
_pd.getField(false,"YArray" /*RemoteObject*/ ).setArrayElement (_total,BA.numberCast(int.class, 0));
 BA.debugLineNum = 2930;BA.debugLine="PD.YArray(1) = Total";
Debug.JustUpdateDeviceLine();
_pd.getField(false,"YArray" /*RemoteObject*/ ).setArrayElement (_total,BA.numberCast(int.class, 1));
 }else {
 BA.debugLineNum = 2932;BA.debugLine="Total = Total + PD.YArray(0)";
Debug.JustUpdateDeviceLine();
_total = RemoteObject.solve(new RemoteObject[] {_total,_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))}, "+",1, 0);Debug.locals.put("Total", _total);
 BA.debugLineNum = 2933;BA.debugLine="PD.YArray(1) = Total";
Debug.JustUpdateDeviceLine();
_pd.getField(false,"YArray" /*RemoteObject*/ ).setArrayElement (_total,BA.numberCast(int.class, 1));
 };
 };
 BA.debugLineNum = 2936;BA.debugLine="MMMValues(1) = Max(MMMValues(1), PD.YArray(1))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Max",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1))),(Object)(_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)))),BA.numberCast(int.class, 1));
 BA.debugLineNum = 2937;BA.debugLine="MMMValues(0) = Min(MMMValues(0), PD.YArray(1))";
Debug.JustUpdateDeviceLine();
_mmmvalues.setArrayElement (xchart.__c.runMethod(true,"Min",(Object)(_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0))),(Object)(_pd.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1)))),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2940;BA.debugLine="MinMaxMeanValues(0) = MMMValues(0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 0)),BA.numberCast(int.class, 0));
 BA.debugLineNum = 2941;BA.debugLine="MinMaxMeanValues(1) = MMMValues(1)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_minmaxmeanvalues" /*RemoteObject*/ ).setArrayElement (_mmmvalues.getArrayElement(true,BA.numberCast(int.class, 1)),BA.numberCast(int.class, 1));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2944;BA.debugLine="Return MMMValues";
Debug.JustUpdateDeviceLine();
if (true) return _mmmvalues;
 BA.debugLineNum = 2945;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(null);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getwaterfalltotalbarcolor(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getWaterfallTotalBarColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8433);
if (RapidSub.canDelegate("getwaterfalltotalbarcolor")) { return __ref.runUserSub(false, "xchart","getwaterfalltotalbarcolor", __ref);}
 BA.debugLineNum = 8433;BA.debugLine="Public Sub getWaterfallTotalBarColor As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8434;BA.debugLine="Return Bar.TotalBarColor";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"TotalBarColor" /*RemoteObject*/ );
 BA.debugLineNum = 8435;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getwidth(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getWidth (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7473);
if (RapidSub.canDelegate("getwidth")) { return __ref.runUserSub(false, "xchart","getwidth", __ref);}
 BA.debugLineNum = 7473;BA.debugLine="Public Sub getWidth As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7474;BA.debugLine="Return mBase.Width";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth");
 BA.debugLineNum = 7475;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxaxisname(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXAxisName (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7239);
if (RapidSub.canDelegate("getxaxisname")) { return __ref.runUserSub(false, "xchart","getxaxisname", __ref);}
 BA.debugLineNum = 7239;BA.debugLine="Public Sub getXAxisName As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7240;BA.debugLine="Return Graph.XAxisName";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ );
 BA.debugLineNum = 7241;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxintervals(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("GetXIntervals (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6891);
if (RapidSub.canDelegate("getxintervals")) { return __ref.runUserSub(false, "xchart","getxintervals", __ref);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
 BA.debugLineNum = 6891;BA.debugLine="Private Sub GetXIntervals";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6892;BA.debugLine="Private i As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
 BA.debugLineNum = 6894;BA.debugLine="For i = Zoom.BeginIndex To Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
{
final int step2 = 1;
final int limit2 = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ).<Integer>get().intValue();
_i = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ) ;
for (;(step2 > 0 && _i.<Integer>get().intValue() <= limit2) || (step2 < 0 && _i.<Integer>get().intValue() >= limit2) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step2))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 6895;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6896;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 6897;BA.debugLine="If PD.ShowTick = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(true,"ShowTick" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 6898;BA.debugLine="Scale(sX).NbIntervals = Scale(sX).NbIntervals +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("NbIntervals" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"NbIntervals" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+",1, 1));
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 6901;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 6902;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 6903;BA.debugLine="Scale(sX).Scale = Graph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )));
 }else {
 BA.debugLineNum = 6905;BA.debugLine="Scale(sX).Scale = Graph.Height / (Zoom.NbVisibl";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1))}, "/",0, 0));
 };
 }else {
 BA.debugLineNum = 6908;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 6909;BA.debugLine="Scale(sX).Scale = Graph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ )));
 }else {
 BA.debugLineNum = 6911;BA.debugLine="Scale(sX).Scale = Graph.Width / (Zoom.NbVisible";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1))}, "/",0, 0));
 };
 };
 BA.debugLineNum = 6914;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxmaxvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8119);
if (RapidSub.canDelegate("getxmaxvalue")) { return __ref.runUserSub(false, "xchart","getxmaxvalue", __ref);}
 BA.debugLineNum = 8119;BA.debugLine="Public Sub getXMaxValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8120;BA.debugLine="Return Scale(sX).MaxManu";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxManu" /*RemoteObject*/ );
 BA.debugLineNum = 8121;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxminvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8109);
if (RapidSub.canDelegate("getxminvalue")) { return __ref.runUserSub(false, "xchart","getxminvalue", __ref);}
 BA.debugLineNum = 8109;BA.debugLine="Public Sub getXMinValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8110;BA.debugLine="Return Scale(sX).MinManu";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinManu" /*RemoteObject*/ );
 BA.debugLineNum = 8111;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxscalelogarithmic(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXScaleLogarithmic (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8100);
if (RapidSub.canDelegate("getxscalelogarithmic")) { return __ref.runUserSub(false, "xchart","getxscalelogarithmic", __ref);}
 BA.debugLineNum = 8100;BA.debugLine="Public Sub getXScaleLogarithmic As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8101;BA.debugLine="Return Scale(sX).Logarithmic";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ );
 BA.debugLineNum = 8102;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxscalemaxvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXScaleMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7344);
if (RapidSub.canDelegate("getxscalemaxvalue")) { return __ref.runUserSub(false, "xchart","getxscalemaxvalue", __ref);}
 BA.debugLineNum = 7344;BA.debugLine="Public Sub getXScaleMaxValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7345;BA.debugLine="Return Scale(sX).MaxVal";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ );
 BA.debugLineNum = 7346;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxscaleminvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXScaleMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7358);
if (RapidSub.canDelegate("getxscaleminvalue")) { return __ref.runUserSub(false, "xchart","getxscaleminvalue", __ref);}
 BA.debugLineNum = 7358;BA.debugLine="Public Sub getXScaleMinValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7359;BA.debugLine="Return Scale(sX).MinVal";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ );
 BA.debugLineNum = 7360;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxscaletextorientation(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXScaleTextOrientation (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7431);
if (RapidSub.canDelegate("getxscaletextorientation")) { return __ref.runUserSub(false, "xchart","getxscaletextorientation", __ref);}
 BA.debugLineNum = 7431;BA.debugLine="Public Sub getXScaleTextOrientation As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7432;BA.debugLine="Return Graph.XScaleTextOrientation";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XScaleTextOrientation" /*RemoteObject*/ );
 BA.debugLineNum = 7433;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxscalewidth(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("GetXScaleWidth (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2948);
if (RapidSub.canDelegate("getxscalewidth")) { return __ref.runUserSub(false, "xchart","getxscalewidth", __ref);}
RemoteObject _width = RemoteObject.createImmutable(0);
int _i = 0;
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
 BA.debugLineNum = 2948;BA.debugLine="Private Sub GetXScaleWidth As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2949;BA.debugLine="Private Width As Int";
Debug.JustUpdateDeviceLine();
_width = RemoteObject.createImmutable(0);Debug.locals.put("Width", _width);
 BA.debugLineNum = 2951;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Or Graph.ChartTyp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 2952;BA.debugLine="If Scale(sY(0)).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2953;BA.debugLine="Width = MeasureTextWidth(NumberFormat3(Scale(sX";
Debug.JustUpdateDeviceLine();
_width = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2954;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberForma";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2955;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberForma";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Interval" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 }else {
 BA.debugLineNum = 2957;BA.debugLine="Width = MeasureTextWidth(NumberFormat3(Scale(sX";
Debug.JustUpdateDeviceLine();
_width = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2958;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberForma";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2959;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberForma";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Interval" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2960;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberForma";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Interval" /*RemoteObject*/ )}, "-",1, 0)),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2961;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberForma";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Interval" /*RemoteObject*/ )}, "+",1, 0)),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 };
 }else {
 BA.debugLineNum = 2965;BA.debugLine="For i = 0 To Points.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step15 = 1;
final int limit15 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step15 > 0 && _i <= limit15) || (step15 < 0 && _i >= limit15) ;_i = ((int)(0 + _i + step15))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2966;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2967;BA.debugLine="PD = Points.Get(i)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, _i))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2968;BA.debugLine="If (Graph.ChartType = \"LINE\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("STACKED_AREA"))))) && RemoteObject.solveBoolean("=",_pd.getField(true,"ShowTick" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2969;BA.debugLine="Width = Max(Width, MeasureTextWidth(PD.X, Text";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 }else {
 BA.debugLineNum = 2971;BA.debugLine="Width = Max(Width, MeasureTextWidth(PD.X, Text";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_pd.getField(true,"X" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 };
 }
}Debug.locals.put("i", _i);
;
 };
 BA.debugLineNum = 2975;BA.debugLine="Return Width";
Debug.JustUpdateDeviceLine();
if (true) return _width;
 BA.debugLineNum = 2976;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxzeroaxis(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXZeroAxis (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7853);
if (RapidSub.canDelegate("getxzeroaxis")) { return __ref.runUserSub(false, "xchart","getxzeroaxis", __ref);}
 BA.debugLineNum = 7853;BA.debugLine="Public Sub getXZeroAxis As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7854;BA.debugLine="Return Scale(sX).YZeroAxis";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"YZeroAxis" /*RemoteObject*/ );
 BA.debugLineNum = 7855;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getxzeroaxishighlight(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getXZeroAxisHighlight (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7863);
if (RapidSub.canDelegate("getxzeroaxishighlight")) { return __ref.runUserSub(false, "xchart","getxzeroaxishighlight", __ref);}
 BA.debugLineNum = 7863;BA.debugLine="Public Sub getXZeroAxisHighlight As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7864;BA.debugLine="Return Scale(sX).YZeroAxisHighlight";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ );
 BA.debugLineNum = 7865;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyaxisname(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYAxisName (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7249);
if (RapidSub.canDelegate("getyaxisname")) { return __ref.runUserSub(false, "xchart","getyaxisname", __ref);}
 BA.debugLineNum = 7249;BA.debugLine="Public Sub getYAxisName As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7250;BA.debugLine="Return Graph.YAxisName";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ );
 BA.debugLineNum = 7251;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyaxisname2(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYAxisName2 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7260);
if (RapidSub.canDelegate("getyaxisname2")) { return __ref.runUserSub(false, "xchart","getyaxisname2", __ref);}
 BA.debugLineNum = 7260;BA.debugLine="Public Sub getYAxisName2 As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7261;BA.debugLine="Return Graph.YAxisName2";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName2" /*RemoteObject*/ );
 BA.debugLineNum = 7262;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getymaxvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8153);
if (RapidSub.canDelegate("getymaxvalue")) { return __ref.runUserSub(false, "xchart","getymaxvalue", __ref);}
 BA.debugLineNum = 8153;BA.debugLine="Public Sub getYMaxValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8154;BA.debugLine="Return Scale(sY(0)).MaxManu";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxManu" /*RemoteObject*/ );
 BA.debugLineNum = 8155;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyminvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8143);
if (RapidSub.canDelegate("getyminvalue")) { return __ref.runUserSub(false, "xchart","getyminvalue", __ref);}
 BA.debugLineNum = 8143;BA.debugLine="Public Sub getYMinValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8144;BA.debugLine="Return Scale(sY(0)).MinManu";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinManu" /*RemoteObject*/ );
 BA.debugLineNum = 8145;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyscalelogaritmic(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYScaleLogaritmic (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8089);
if (RapidSub.canDelegate("getyscalelogaritmic")) { return __ref.runUserSub(false, "xchart","getyscalelogaritmic", __ref);}
 BA.debugLineNum = 8089;BA.debugLine="Public Sub getYScaleLogaritmic As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8090;BA.debugLine="Return Scale(sY(0)).Logarithmic";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ );
 BA.debugLineNum = 8091;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyscalemaxvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYScaleMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7271);
if (RapidSub.canDelegate("getyscalemaxvalue")) { return __ref.runUserSub(false, "xchart","getyscalemaxvalue", __ref);}
 BA.debugLineNum = 7271;BA.debugLine="Public Sub getYScaleMaxValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7272;BA.debugLine="Return Scale(sY(0)).MaxVal";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ );
 BA.debugLineNum = 7273;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyscaleminvalue(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYScaleMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7307);
if (RapidSub.canDelegate("getyscaleminvalue")) { return __ref.runUserSub(false, "xchart","getyscaleminvalue", __ref);}
 BA.debugLineNum = 7307;BA.debugLine="Public Sub getYScaleMinValue As Double";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7308;BA.debugLine="Return Scale(sY(0)).MinVal";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ );
 BA.debugLineNum = 7309;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyscalenmaxvalue(RemoteObject __ref,RemoteObject _index) throws Exception{
try {
		Debug.PushSubsStack("GetYScaleNMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7285);
if (RapidSub.canDelegate("getyscalenmaxvalue")) { return __ref.runUserSub(false, "xchart","getyscalenmaxvalue", __ref, _index);}
Debug.locals.put("Index", _index);
 BA.debugLineNum = 7285;BA.debugLine="Public Sub GetYScaleNMaxValue(Index As Int) As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7286;BA.debugLine="Return Scale(sY(Index)).MaxVal";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MaxVal" /*RemoteObject*/ );
 BA.debugLineNum = 7287;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyscalenminvalue(RemoteObject __ref,RemoteObject _index) throws Exception{
try {
		Debug.PushSubsStack("GetYScaleNMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7321);
if (RapidSub.canDelegate("getyscalenminvalue")) { return __ref.runUserSub(false, "xchart","getyscalenminvalue", __ref, _index);}
Debug.locals.put("Index", _index);
 BA.debugLineNum = 7321;BA.debugLine="Public Sub GetYScaleNMinValue(Index As Int) As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7322;BA.debugLine="Return Scale(sY(Index)).MinVal";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MinVal" /*RemoteObject*/ );
 BA.debugLineNum = 7323;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyscalewidth(RemoteObject __ref,RemoteObject _index) throws Exception{
try {
		Debug.PushSubsStack("GetYScaleWidth (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2979);
if (RapidSub.canDelegate("getyscalewidth")) { return __ref.runUserSub(false, "xchart","getyscalewidth", __ref, _index);}
RemoteObject _width = RemoteObject.createImmutable(0);
int _i = 0;
Debug.locals.put("Index", _index);
 BA.debugLineNum = 2979;BA.debugLine="Private Sub GetYScaleWidth(Index As Int) As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2980;BA.debugLine="Private Width As Int";
Debug.JustUpdateDeviceLine();
_width = RemoteObject.createImmutable(0);Debug.locals.put("Width", _width);
 BA.debugLineNum = 2982;BA.debugLine="If Scale(sY(0)).Automatic = True And Scale(sY(0))";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2983;BA.debugLine="Width = MeasureTextWidth(NumberFormat3(Scale(sY(";
Debug.JustUpdateDeviceLine();
_width = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MinVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2984;BA.debugLine="For i = 1 To Scale(sY(Index)).NbIntervals";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"NbIntervals" /*RemoteObject*/ ).<Integer>get().intValue();
_i = 1 ;
for (;(step4 > 0 && _i <= limit4) || (step4 < 0 && _i >= limit4) ;_i = ((int)(0 + _i + step4))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2985;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberForma";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MinVal" /*RemoteObject*/ ),RemoteObject.createImmutable(_i),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"IntervalAuto" /*RemoteObject*/ )}, "+*",1, 0)),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 2988;BA.debugLine="Width = MeasureTextWidth(NumberFormat3(Scale(sY(";
Debug.JustUpdateDeviceLine();
_width = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MaxVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2989;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberFormat";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MinVal" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2990;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberFormat";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"Interval" /*RemoteObject*/ )),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2991;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberFormat";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,(_index))).getField(true,"Interval" /*RemoteObject*/ )}, "-",1, 0)),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 BA.debugLineNum = 2992;BA.debugLine="Width = Max(Width, MeasureTextWidth(NumberFormat";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).getField(true,"MinVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,(_index))).getField(true,"Interval" /*RemoteObject*/ )}, "+",1, 0)),(Object)(BA.numberCast(int.class, 6)))),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ )))))));Debug.locals.put("Width", _width);
 };
 BA.debugLineNum = 2994;BA.debugLine="Return Width";
Debug.JustUpdateDeviceLine();
if (true) return _width;
 BA.debugLineNum = 2995;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyxchartcrosshaircolor(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYXChartCrossHairColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8310);
if (RapidSub.canDelegate("getyxchartcrosshaircolor")) { return __ref.runUserSub(false, "xchart","getyxchartcrosshaircolor", __ref);}
 BA.debugLineNum = 8310;BA.debugLine="Public Sub getYXChartCrossHairColor As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8311;BA.debugLine="Return mYXChartCrossHairColor";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_myxchartcrosshaircolor" /*RemoteObject*/ );
 BA.debugLineNum = 8312;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyxchartcrosshairdeltay(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYXChartCrossHairDeltaY (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8299);
if (RapidSub.canDelegate("getyxchartcrosshairdeltay")) { return __ref.runUserSub(false, "xchart","getyxchartcrosshairdeltay", __ref);}
 BA.debugLineNum = 8299;BA.debugLine="Public Sub getYXChartCrossHairDeltaY As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8300;BA.debugLine="Return mYXChartCrossHairColor";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_myxchartcrosshaircolor" /*RemoteObject*/ );
 BA.debugLineNum = 8301;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyxchartdisplaycrosshair(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYXChartDisplayCrossHair (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8288);
if (RapidSub.canDelegate("getyxchartdisplaycrosshair")) { return __ref.runUserSub(false, "xchart","getyxchartdisplaycrosshair", __ref);}
 BA.debugLineNum = 8288;BA.debugLine="Public Sub getYXChartDisplayCrossHair As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8289;BA.debugLine="Return mYXChartDisplayCrossHair";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_myxchartdisplaycrosshair" /*RemoteObject*/ );
 BA.debugLineNum = 8290;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyxchartdisplayposition(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYXChartDisplayPosition (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8274);
if (RapidSub.canDelegate("getyxchartdisplayposition")) { return __ref.runUserSub(false, "xchart","getyxchartdisplayposition", __ref);}
 BA.debugLineNum = 8274;BA.debugLine="Public Sub getYXChartDisplayPosition As String";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8275;BA.debugLine="Return mYXChartDisplayPosition";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_myxchartdisplayposition" /*RemoteObject*/ );
 BA.debugLineNum = 8276;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyxchartdisplayvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYXChartDisplayValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8260);
if (RapidSub.canDelegate("getyxchartdisplayvalues")) { return __ref.runUserSub(false, "xchart","getyxchartdisplayvalues", __ref);}
 BA.debugLineNum = 8260;BA.debugLine="Public Sub getYXChartDisplayValues As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8261;BA.debugLine="Return mYXChartDisplayValues";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(true,"_myxchartdisplayvalues" /*RemoteObject*/ );
 BA.debugLineNum = 8262;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyzeroaxis(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYZeroAxis (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7874);
if (RapidSub.canDelegate("getyzeroaxis")) { return __ref.runUserSub(false, "xchart","getyzeroaxis", __ref);}
 BA.debugLineNum = 7874;BA.debugLine="Public Sub getYZeroAxis As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7875;BA.debugLine="Return Scale(sY(0)).YZeroAxis";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxis" /*RemoteObject*/ );
 BA.debugLineNum = 7876;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getyzeroaxishighlight(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getYZeroAxisHighlight (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7887);
if (RapidSub.canDelegate("getyzeroaxishighlight")) { return __ref.runUserSub(false, "xchart","getyzeroaxishighlight", __ref);}
 BA.debugLineNum = 7887;BA.debugLine="Public Sub getYZeroAxisHighlight As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7888;BA.debugLine="Return Scale(sY(0)).YZeroAxisHighlight";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"YZeroAxisHighlight" /*RemoteObject*/ );
 BA.debugLineNum = 7889;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getzoombarenabled(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getZoomBarEnabled (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9085);
if (RapidSub.canDelegate("getzoombarenabled")) { return __ref.runUserSub(false, "xchart","getzoombarenabled", __ref);}
 BA.debugLineNum = 9085;BA.debugLine="Public Sub getZoomBarEnabled As Boolean";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9086;BA.debugLine="Return Zoom.Enabled";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Enabled" /*RemoteObject*/ );
 BA.debugLineNum = 9087;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(false);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getzoombeginindex(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getZoomBeginIndex (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9066);
if (RapidSub.canDelegate("getzoombeginindex")) { return __ref.runUserSub(false, "xchart","getzoombeginindex", __ref);}
 BA.debugLineNum = 9066;BA.debugLine="Public Sub getZoomBeginIndex As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9067;BA.debugLine="Return Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ );
 BA.debugLineNum = 9068;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getzoombigstep(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getZoomBigStep (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9060);
if (RapidSub.canDelegate("getzoombigstep")) { return __ref.runUserSub(false, "xchart","getzoombigstep", __ref);}
 BA.debugLineNum = 9060;BA.debugLine="Public Sub getZoomBigStep As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9061;BA.debugLine="Return Zoom.BigStep";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BigStep" /*RemoteObject*/ );
 BA.debugLineNum = 9062;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getzoomendindex(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getZoomEndIndex (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9072);
if (RapidSub.canDelegate("getzoomendindex")) { return __ref.runUserSub(false, "xchart","getzoomendindex", __ref);}
 BA.debugLineNum = 9072;BA.debugLine="Public Sub getZoomEndIndex As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9073;BA.debugLine="Return Zoom.EndIndex";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ );
 BA.debugLineNum = 9074;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getzoomnbvisiblepoints(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getZoomNbVisiblePoints (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9078);
if (RapidSub.canDelegate("getzoomnbvisiblepoints")) { return __ref.runUserSub(false, "xchart","getzoomnbvisiblepoints", __ref);}
 BA.debugLineNum = 9078;BA.debugLine="Public Sub getZoomNbVisiblePoints As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9079;BA.debugLine="Return Zoom.NbVisiblePoints";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ );
 BA.debugLineNum = 9080;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _getzoomsmallstep(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("getZoomSmallStep (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9054);
if (RapidSub.canDelegate("getzoomsmallstep")) { return __ref.runUserSub(false, "xchart","getzoomsmallstep", __ref);}
 BA.debugLineNum = 9054;BA.debugLine="Public Sub getZoomSmallStep As Int";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9055;BA.debugLine="Return Zoom.SmallStep";
Debug.JustUpdateDeviceLine();
if (true) return __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"SmallStep" /*RemoteObject*/ );
 BA.debugLineNum = 9056;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _hideline(RemoteObject __ref,RemoteObject _lineindex,RemoteObject _hidden) throws Exception{
try {
		Debug.PushSubsStack("HideLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8481);
if (RapidSub.canDelegate("hideline")) { return __ref.runUserSub(false, "xchart","hideline", __ref, _lineindex, _hidden);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
Debug.locals.put("LineIndex", _lineindex);
Debug.locals.put("Hidden", _hidden);
 BA.debugLineNum = 8481;BA.debugLine="Public Sub HideLine(LineIndex As Int, Hidden As Bo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8482;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 8484;BA.debugLine="ID = Items.Get(LineIndex)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_lineindex)));Debug.locals.put("ID", _id);
 BA.debugLineNum = 8485;BA.debugLine="ID.HideLine = Hidden";
Debug.JustUpdateDeviceLine();
_id.setField ("HideLine" /*RemoteObject*/ ,_hidden);
 BA.debugLineNum = 8486;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _initchart(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("InitChart (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1630);
if (RapidSub.canDelegate("initchart")) { return __ref.runUserSub(false, "xchart","initchart", __ref);}
 BA.debugLineNum = 1630;BA.debugLine="Private Sub InitChart";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1631;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 1632;BA.debugLine="InitChartH";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initcharth" /*RemoteObject*/ );
 }else {
 BA.debugLineNum = 1634;BA.debugLine="InitChartV";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initchartv" /*RemoteObject*/ );
 };
 BA.debugLineNum = 1636;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _initcharth(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("InitChartH (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2032);
if (RapidSub.canDelegate("initcharth")) { return __ref.runUserSub(false, "xchart","initcharth", __ref);}
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _margin = RemoteObject.createImmutable(0);
RemoteObject _space = RemoteObject.createImmutable(0);
RemoteObject _spaceratio = RemoteObject.createImmutable(0);
RemoteObject _limit = RemoteObject.createImmutable(0);
 BA.debugLineNum = 2032;BA.debugLine="Private Sub InitChartH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2033;BA.debugLine="InitTextSizes";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_inittextsizes" /*RemoteObject*/ );
 BA.debugLineNum = 2034;BA.debugLine="InitValues";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initvalues" /*RemoteObject*/ );
 BA.debugLineNum = 2036;BA.debugLine="If Zoom.EndIndex = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2037;BA.debugLine="Zoom.BeginIndex = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 2038;BA.debugLine="Zoom.EndIndex = Points.Size - 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1));
 BA.debugLineNum = 2039;BA.debugLine="Zoom.NbVisiblePoints = Points.Size";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("NbVisiblePoints" /*RemoteObject*/ ,__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"));
 };
 BA.debugLineNum = 2042;BA.debugLine="xcvsCursor.ClearRect(xcvsCursor.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 2043;BA.debugLine="xcvsValues.ClearRect(xcvsValues.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 2045;BA.debugLine="If Zoom.NbVisiblePoints = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2046;BA.debugLine="Graph.Error = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Error" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 2047;BA.debugLine="Graph.ErrorText = \"No data\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ErrorText" /*RemoteObject*/ ,BA.ObjectToString("No data"));
 BA.debugLineNum = 2048;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 2051;BA.debugLine="If Scale(sY(0)).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2052;BA.debugLine="CalcScaleAuto(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscaleauto" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 }else {
 BA.debugLineNum = 2054;BA.debugLine="CalcScaleManu(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalemanu" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 };
 BA.debugLineNum = 2057;BA.debugLine="If Scale(sY(0)).DrawYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2058;BA.debugLine="Graph.Left = 0.75 * Texts.AxisTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 }else {
 BA.debugLineNum = 2060;BA.debugLine="Graph.Left = GetXScaleWidth + 1.05 * Texts.Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.runClassMethod (b4a.example.xchart.class, "_getxscalewidth" /*RemoteObject*/ ),RemoteObject.createImmutable(1.05),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0)));
 };
 BA.debugLineNum = 2063;BA.debugLine="If Graph.XAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 2064;BA.debugLine="Graph.Left = Graph.Left + Texts.AxisTextHeight *";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.8)}, "+*",1, 0)));
 };
 BA.debugLineNum = 2066;BA.debugLine="If Scale(sY(0)).DrawYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2067;BA.debugLine="Graph.Right = xpnlGraph.Width - 0.75 * Texts.Sca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 }else {
 BA.debugLineNum = 2069;BA.debugLine="Graph.Right = xpnlGraph.Width - 2 * Texts.ScaleT";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 1));
 };
 BA.debugLineNum = 2072;BA.debugLine="Graph.Width = Graph.Right - Graph.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 2073;BA.debugLine="Graph.XInterval = Graph.Width / Scale(sY(0)).NbIn";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XInterval" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0));
 BA.debugLineNum = 2074;BA.debugLine="Graph.Width = Graph.XInterval * Scale(sY(0)).NbIn";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ )}, "*",0, 0)));
 BA.debugLineNum = 2075;BA.debugLine="Graph.Right = Graph.Left + Graph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ )}, "+",1, 1));
 BA.debugLineNum = 2076;BA.debugLine="If Graph.Title <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 2077;BA.debugLine="Graph.Top = 1.8 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 }else {
 BA.debugLineNum = 2079;BA.debugLine="Graph.Top = 0.9 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 };
 BA.debugLineNum = 2082;BA.debugLine="If Graph.Subtitle <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 2083;BA.debugLine="Graph.Top = Graph.Top + 1.5 * Texts.SubtitleText";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0)));
 };
 BA.debugLineNum = 2086;BA.debugLine="If Scale(sX).DrawXScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2087;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top - 0.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 }else {
 BA.debugLineNum = 2089;BA.debugLine="Select Graph.XScaleTextOrientation";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XScaleTextOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"),BA.ObjectToString("VERTICAL"),BA.ObjectToString("45 DEGREES"))) {
case 0: {
 BA.debugLineNum = 2091;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(2.1),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 break; }
case 1: {
 BA.debugLineNum = 2093;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),__ref.runClassMethod (b4a.example.xchart.class, "_getyscalewidth" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))))}, "--*-",3, 0)));
 break; }
case 2: {
 BA.debugLineNum = 2095;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),__ref.runClassMethod (b4a.example.xchart.class, "_getyscalewidth" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0)))),RemoteObject.createImmutable(0.8)}, "--*-*",3, 0)));
 break; }
}
;
 };
 BA.debugLineNum = 2099;BA.debugLine="If Graph.YAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 2100;BA.debugLine="If mHChartsXScaleOnTop = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartsxscaleontop" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2101;BA.debugLine="Graph.Height = Graph.Height - 1.3 * Texts.AxisT";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 }else {
 BA.debugLineNum = 2103;BA.debugLine="Graph.Height = Graph.Height - 1.8 * Texts.AxisT";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 };
 }else {
 BA.debugLineNum = 2106;BA.debugLine="If Scale(sX).DrawXScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2107;BA.debugLine="Graph.Height = Graph.Height - 0.8 * Texts.Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 };
 };
 BA.debugLineNum = 2111;BA.debugLine="If Legend.IncludeLegend = \"BOTTOM\" And Items.Size";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2112;BA.debugLine="GetLegendLineNumbers(xpnlGraph.Width - 1.2 * Leg";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getlegendlinenumbers" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(1.2),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "-*",1, 0))));
 BA.debugLineNum = 2113;BA.debugLine="Legend.Height = (Legend.LineNumber + 0.8) * Lege";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"LineNumber" /*RemoteObject*/ ),RemoteObject.createImmutable(0.8)}, "+",1, 0)),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 BA.debugLineNum = 2114;BA.debugLine="Graph.Height = Graph.Height - Legend.Height - 0.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 };
 BA.debugLineNum = 2117;BA.debugLine="BarWidth0 = False";
Debug.JustUpdateDeviceLine();
__ref.setField ("_barwidth0" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 2118;BA.debugLine="Private PD As PointData = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);Debug.locals.put("PD", _pd);
 BA.debugLineNum = 2119;BA.debugLine="Private Margin As Int";
Debug.JustUpdateDeviceLine();
_margin = RemoteObject.createImmutable(0);Debug.locals.put("Margin", _margin);
 BA.debugLineNum = 2120;BA.debugLine="If Graph.ChartType = \"H_LINE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_LINE"))) { 
 BA.debugLineNum = 2121;BA.debugLine="Margin = 0";
Debug.JustUpdateDeviceLine();
_margin = BA.numberCast(int.class, 0);Debug.locals.put("Margin", _margin);
 BA.debugLineNum = 2122;BA.debugLine="Graph.YInterval = (Graph.Height) / (Zoom.NbVisib";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("YInterval" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1))}, "/",0, 0)));
 BA.debugLineNum = 2123;BA.debugLine="Graph.Height =  Graph.YInterval * (Zoom.NbVisibl";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1)),_margin}, "*+",1, 1));
 }else {
 BA.debugLineNum = 2125;BA.debugLine="Margin = 0.02 * Graph.Height";
Debug.JustUpdateDeviceLine();
_margin = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.02),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("Margin", _margin);
 BA.debugLineNum = 2126;BA.debugLine="Graph.YInterval = (Graph.Height - Margin) / Zoom";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("YInterval" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),_margin}, "-",1, 1)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "/",0, 0)));
 BA.debugLineNum = 2127;BA.debugLine="Graph.Height =  Graph.YInterval * Zoom.NbVisible";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),_margin}, "*+",1, 1));
 };
 BA.debugLineNum = 2129;BA.debugLine="Graph.Bottom = Graph.Top + Graph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Bottom" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )}, "+",1, 1));
 BA.debugLineNum = 2130;BA.debugLine="If mHChartsXScaleOnTop = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mhchartsxscaleontop" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2131;BA.debugLine="Graph.Bottom = xpnlGraph.Height - 0.7 * Texts.Sc";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Bottom" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),RemoteObject.createImmutable(0.7),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 BA.debugLineNum = 2132;BA.debugLine="If Legend.IncludeLegend = \"BOTTOM\" And Items.Siz";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 2133;BA.debugLine="Graph.Bottom = Graph.Bottom - Legend.Height - 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Bottom" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 };
 BA.debugLineNum = 2135;BA.debugLine="Graph.Top = Graph.Bottom - Graph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )}, "-",1, 1));
 };
 BA.debugLineNum = 2137;BA.debugLine="Graph.Rect.Initialize(Graph.Left, Graph.Top, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))));
 BA.debugLineNum = 2139;BA.debugLine="Scale(sY(0)).Scale = Graph.Width / (Scale(sY(0)).";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 BA.debugLineNum = 2140;BA.debugLine="Scale(sX).Scale = Graph.Height / (Scale(sX).MaxVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 BA.debugLineNum = 2142;BA.debugLine="Private Space As Int";
Debug.JustUpdateDeviceLine();
_space = RemoteObject.createImmutable(0);Debug.locals.put("Space", _space);
 BA.debugLineNum = 2143;BA.debugLine="If Graph.ChartType = \"H_BAR\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_STACKED_BAR"))) { 
 BA.debugLineNum = 2144;BA.debugLine="Select Items.Size";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(int.class, 1),BA.numberCast(int.class, 2),BA.numberCast(int.class, 3))) {
case 0: {
 BA.debugLineNum = 2146;BA.debugLine="If Zoom.NbVisiblePoints <= 40 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 40))) { 
 BA.debugLineNum = 2147;BA.debugLine="Private SpaceRatio As Double";
Debug.JustUpdateDeviceLine();
_spaceratio = RemoteObject.createImmutable(0);Debug.locals.put("SpaceRatio", _spaceratio);
 BA.debugLineNum = 2148;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 2149;BA.debugLine="SpaceRatio = 1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 1);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2150;BA.debugLine="Else If Zoom.NbVisiblePoints = 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 2151;BA.debugLine="SpaceRatio = 0.85";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.85);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2152;BA.debugLine="Else If Zoom.NbVisiblePoints = 3 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 3))) { 
 BA.debugLineNum = 2153;BA.debugLine="SpaceRatio = 0.75";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.75);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2154;BA.debugLine="Else If Zoom.NbVisiblePoints = 4 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 4))) { 
 BA.debugLineNum = 2155;BA.debugLine="SpaceRatio = 0.6";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.6);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2156;BA.debugLine="Else If Zoom.NbVisiblePoints = 5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5))) { 
 BA.debugLineNum = 2157;BA.debugLine="SpaceRatio = 0.5";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.5);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2158;BA.debugLine="Else If Zoom.NbVisiblePoints > 5 And Zoom.NbV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20))) { 
 BA.debugLineNum = 2159;BA.debugLine="SpaceRatio = 0.4";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.4);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2160;BA.debugLine="Else If Zoom.NbVisiblePoints > 20 And Zoom.Nb";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 30))) { 
 BA.debugLineNum = 2161;BA.debugLine="SpaceRatio = 0.3";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.3);Debug.locals.put("SpaceRatio", _spaceratio);
 }else {
 BA.debugLineNum = 2163;BA.debugLine="SpaceRatio = 0.2";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.2);Debug.locals.put("SpaceRatio", _spaceratio);
 }}}}}}}
;
 BA.debugLineNum = 2165;BA.debugLine="Space = Max(1dip, Graph.YInterval - Graph.Hei";
Debug.JustUpdateDeviceLine();
_space = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),_spaceratio}, "+",1, 0)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(2),_spaceratio}, "*+*",1, 0))}, "-/",1, 0))));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 2167;BA.debugLine="If Zoom.NbVisiblePoints < 50 And Graph.YInter";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 50)) && RemoteObject.solveBoolean("g",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))))) { 
 BA.debugLineNum = 2168;BA.debugLine="Space = 2dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 2170;BA.debugLine="Space = 1dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("Space", _space);
 };
 };
 break; }
case 1: 
case 2: {
 BA.debugLineNum = 2174;BA.debugLine="If Zoom.NbVisiblePoints <= 40 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 40))) { 
 BA.debugLineNum = 2175;BA.debugLine="Private SpaceRatio As Double";
Debug.JustUpdateDeviceLine();
_spaceratio = RemoteObject.createImmutable(0);Debug.locals.put("SpaceRatio", _spaceratio);
 BA.debugLineNum = 2176;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 2177;BA.debugLine="SpaceRatio = 0.5";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.5);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2178;BA.debugLine="Else If Zoom.NbVisiblePoints = 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 2179;BA.debugLine="SpaceRatio = 0.42";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.42);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2180;BA.debugLine="Else If Zoom.NbVisiblePoints = 3 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 3))) { 
 BA.debugLineNum = 2181;BA.debugLine="SpaceRatio = 0.375";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.375);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2182;BA.debugLine="Else If Zoom.NbVisiblePoints = 4 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 4))) { 
 BA.debugLineNum = 2183;BA.debugLine="SpaceRatio = 0.3";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.3);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2184;BA.debugLine="Else If Zoom.NbVisiblePoints = 5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5))) { 
 BA.debugLineNum = 2185;BA.debugLine="SpaceRatio = 0.25";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.25);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2186;BA.debugLine="Else If Zoom.NbVisiblePoints > 5 And Zoom.NbV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20))) { 
 BA.debugLineNum = 2187;BA.debugLine="SpaceRatio = 0.2";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.2);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2188;BA.debugLine="Else If Zoom.NbVisiblePoints > 20 And Zoom.Nb";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 30))) { 
 BA.debugLineNum = 2189;BA.debugLine="SpaceRatio = 0.15";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.15);Debug.locals.put("SpaceRatio", _spaceratio);
 }else {
 BA.debugLineNum = 2191;BA.debugLine="SpaceRatio = 0.1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.1);Debug.locals.put("SpaceRatio", _spaceratio);
 }}}}}}}
;
 BA.debugLineNum = 2193;BA.debugLine="Space = Max(1dip, Graph.YInterval - Graph.Hei";
Debug.JustUpdateDeviceLine();
_space = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),_spaceratio}, "+",1, 0)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(2),_spaceratio}, "*+*",1, 0))}, "-/",1, 0))));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 2195;BA.debugLine="If Zoom.NbVisiblePoints < 50 And Graph.YInter";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 50)) && RemoteObject.solveBoolean("g",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))))) { 
 BA.debugLineNum = 2196;BA.debugLine="Space = 2dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 2198;BA.debugLine="Space = 1dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("Space", _space);
 };
 };
 break; }
default: {
 BA.debugLineNum = 2202;BA.debugLine="If Zoom.NbVisiblePoints <= 40 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 40))) { 
 BA.debugLineNum = 2203;BA.debugLine="Private SpaceRatio As Double";
Debug.JustUpdateDeviceLine();
_spaceratio = RemoteObject.createImmutable(0);Debug.locals.put("SpaceRatio", _spaceratio);
 BA.debugLineNum = 2204;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 2205;BA.debugLine="SpaceRatio = 0.3";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.3);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2206;BA.debugLine="Else If Zoom.NbVisiblePoints = 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 2207;BA.debugLine="SpaceRatio = 0.25";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.25);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2208;BA.debugLine="Else If Zoom.NbVisiblePoints = 3 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 3))) { 
 BA.debugLineNum = 2209;BA.debugLine="SpaceRatio = 0.22";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.22);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2210;BA.debugLine="Else If Zoom.NbVisiblePoints = 4 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 4))) { 
 BA.debugLineNum = 2211;BA.debugLine="SpaceRatio = 0.18";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.18);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2212;BA.debugLine="Else If Zoom.NbVisiblePoints = 5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5))) { 
 BA.debugLineNum = 2213;BA.debugLine="SpaceRatio = 0.25";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.25);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2214;BA.debugLine="Else If Zoom.NbVisiblePoints > 5 And Zoom.NbV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20))) { 
 BA.debugLineNum = 2215;BA.debugLine="SpaceRatio = 0.15";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.15);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 2216;BA.debugLine="Else If Zoom.NbVisiblePoints > 20 And Zoom.Nb";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 30))) { 
 BA.debugLineNum = 2217;BA.debugLine="SpaceRatio = 0.1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.1);Debug.locals.put("SpaceRatio", _spaceratio);
 }else {
 BA.debugLineNum = 2219;BA.debugLine="SpaceRatio = 0.1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.1);Debug.locals.put("SpaceRatio", _spaceratio);
 }}}}}}}
;
 BA.debugLineNum = 2221;BA.debugLine="Space = Max(1dip, Graph.YInterval - Graph.Hei";
Debug.JustUpdateDeviceLine();
_space = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),_spaceratio}, "+",1, 0)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(2),_spaceratio}, "*+*",1, 0))}, "-/",1, 0))));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 2223;BA.debugLine="If Zoom.NbVisiblePoints < 50 And Graph.YInter";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 50)) && RemoteObject.solveBoolean("g",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))))) { 
 BA.debugLineNum = 2224;BA.debugLine="Space = 2dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 2226;BA.debugLine="Space = 1dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("Space", _space);
 };
 };
 break; }
}
;
 BA.debugLineNum = 2234;BA.debugLine="Private Limit As Int";
Debug.JustUpdateDeviceLine();
_limit = RemoteObject.createImmutable(0);Debug.locals.put("Limit", _limit);
 BA.debugLineNum = 2235;BA.debugLine="If Graph.ChartType = \"H_BAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_BAR"))) { 
 BA.debugLineNum = 2236;BA.debugLine="Limit = 4dip * PD.YArray.Length";
Debug.JustUpdateDeviceLine();
_limit = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))),_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length")}, "*",0, 1);Debug.locals.put("Limit", _limit);
 }else {
 BA.debugLineNum = 2238;BA.debugLine="Limit = 4dip";
Debug.JustUpdateDeviceLine();
_limit = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)));Debug.locals.put("Limit", _limit);
 };
 BA.debugLineNum = 2241;BA.debugLine="If Graph.YInterval - Space < Limit Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),_space}, "-",1, 1),BA.numberCast(double.class, _limit))) { 
 BA.debugLineNum = 2242;BA.debugLine="Log(\"Bar width = too small !!! Drawing of Bar c";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","96488274",RemoteObject.createImmutable("Bar width = too small !!! Drawing of Bar chart skipped"),0);
 BA.debugLineNum = 2243;BA.debugLine="BarWidth0 = True";
Debug.JustUpdateDeviceLine();
__ref.setField ("_barwidth0" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 };
 BA.debugLineNum = 2246;BA.debugLine="Graph.XOffset = (Graph.Height - Graph.YInterval";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XOffset" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "-*",1, 1)),RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 2247;BA.debugLine="Graph.BarWidth = Graph.YInterval - Space";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarWidth" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),_space}, "-",1, 1));
 BA.debugLineNum = 2248;BA.debugLine="Graph.BarSubWidth = Graph.BarWidth / PD.YArray.L";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarSubWidth" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length")}, "/",0, 0)));
 BA.debugLineNum = 2250;BA.debugLine="If Graph.ChartType = \"H_BAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_BAR"))) { 
 BA.debugLineNum = 2252;BA.debugLine="If Graph.BarSubWidth < 4dip And BarWidth0 = Fal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))))) && RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 2253;BA.debugLine="Log(\"Bar width = too small !!! Drawing of Bar";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","96488285",RemoteObject.createImmutable("Bar width = too small !!! Drawing of Bar chart skipped"),0);
 BA.debugLineNum = 2254;BA.debugLine="BarWidth0 = True";
Debug.JustUpdateDeviceLine();
__ref.setField ("_barwidth0" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 };
 };
 }else {
 BA.debugLineNum = 2260;BA.debugLine="Graph.XOffset = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XOffset" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 2261;BA.debugLine="Space = 0";
Debug.JustUpdateDeviceLine();
_space = BA.numberCast(int.class, 0);Debug.locals.put("Space", _space);
 BA.debugLineNum = 2262;BA.debugLine="Margin = 0";
Debug.JustUpdateDeviceLine();
_margin = BA.numberCast(int.class, 0);Debug.locals.put("Margin", _margin);
 };
 BA.debugLineNum = 2266;BA.debugLine="pthGrid.Initialize(Graph.Left - 1dip, Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))));
 BA.debugLineNum = 2267;BA.debugLine="pthGrid.LineTo(Graph.Right + 1dip, Graph.Top - 1d";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))));
 BA.debugLineNum = 2268;BA.debugLine="pthGrid.LineTo(Graph.Right + 1dip, Graph.Bottom +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))));
 BA.debugLineNum = 2269;BA.debugLine="pthGrid.LineTo(Graph.Left - 1dip, Graph.Bottom +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))));
 BA.debugLineNum = 2270;BA.debugLine="pthGrid.LineTo(Graph.Left - 1dip, Graph.Top - 1di";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))));
 BA.debugLineNum = 2272;BA.debugLine="InitValues";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initvalues" /*RemoteObject*/ );
 BA.debugLineNum = 2274;BA.debugLine="If Zoom.Active = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Active" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2275;BA.debugLine="ZoomBarResize";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoombarresize" /*RemoteObject*/ );
 BA.debugLineNum = 2276;BA.debugLine="ZoomCursorDraw";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoomcursordraw" /*RemoteObject*/ );
 };
 BA.debugLineNum = 2278;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _initchartv(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("InitChartV (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1639);
if (RapidSub.canDelegate("initchartv")) { return __ref.runUserSub(false, "xchart","initchartv", __ref);}
RemoteObject _id = RemoteObject.declareNull("b4a.example.xchart._itemdata");
int _i = 0;
RemoteObject _widthxscale_2 = RemoteObject.createImmutable(0);
RemoteObject _width = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _margin = RemoteObject.createImmutable(0);
RemoteObject _space = RemoteObject.createImmutable(0);
RemoteObject _spaceratio = RemoteObject.createImmutable(0);
RemoteObject _limit = RemoteObject.createImmutable(0);
 BA.debugLineNum = 1639;BA.debugLine="Private Sub InitChartV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1640;BA.debugLine="InitTextSizes";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_inittextsizes" /*RemoteObject*/ );
 BA.debugLineNum = 1642;BA.debugLine="xcvsGraph.ClearRect(xcvsGraph.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 1643;BA.debugLine="xcvsCursor.ClearRect(xcvsCursor.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 1645;BA.debugLine="If Zoom.EndIndex = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1646;BA.debugLine="Zoom.BeginIndex = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 1647;BA.debugLine="Zoom.EndIndex = Max(Points.Size - 1, 0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1))),(Object)(BA.numberCast(double.class, 0)))));
 BA.debugLineNum = 1648;BA.debugLine="Zoom.NbVisiblePoints = Points.Size";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("NbVisiblePoints" /*RemoteObject*/ ,__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"));
 };
 BA.debugLineNum = 1652;BA.debugLine="If Zoom.Active = False And Graph.ChartType = \"LIN";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Active" /*RemoteObject*/ ),xchart.__c.getField(true,"False")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE"))) { 
 BA.debugLineNum = 1653;BA.debugLine="Zoom.EndIndex = Max(Points.Size - 1, 0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1))),(Object)(BA.numberCast(double.class, 0)))));
 BA.debugLineNum = 1654;BA.debugLine="Zoom.NbVisiblePoints = Points.Size";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("NbVisiblePoints" /*RemoteObject*/ ,__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"));
 };
 BA.debugLineNum = 1657;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE"),BA.ObjectToString("RADAR"),BA.ObjectToString("YX_CHART"),BA.ObjectToString("BUBBLE"),BA.ObjectToString("WATERFALL"))) {
case 0: {
 BA.debugLineNum = 1659;BA.debugLine="Graph.Height = xpnlGraph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 1660;BA.debugLine="Graph.Top = Legend.TextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ ));
 BA.debugLineNum = 1661;BA.debugLine="If Graph.Title <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1662;BA.debugLine="Graph.Top = Graph.Top + Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "+",1, 1));
 };
 BA.debugLineNum = 1664;BA.debugLine="Graph.Right = xpnlGraph.Width - Legend.TextHeig";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 1665;BA.debugLine="If Legend.IncludeLegend = \"BOTTOM\" And Items.Si";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1666;BA.debugLine="GetLegendLineNumbers(xpnlGraph.Width - 1.2 * L";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getlegendlinenumbers" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(1.2),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "-*",1, 0))));
 BA.debugLineNum = 1667;BA.debugLine="Legend.Height = (Legend.LineNumber + 0.8) * 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"LineNumber" /*RemoteObject*/ ),RemoteObject.createImmutable(0.8)}, "+",1, 0)),RemoteObject.createImmutable(1),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "**",0, 0)));
 BA.debugLineNum = 1668;BA.debugLine="Graph.Height = Graph.Height - Legend.Height -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 };
 BA.debugLineNum = 1670;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 break; }
case 1: {
 BA.debugLineNum = 1672;BA.debugLine="If Zoom.NbVisiblePoints > 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 1673;BA.debugLine="Graph.Height = xpnlGraph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 1675;BA.debugLine="If Legend.IncludeLegend = \"BOTTOM\" And Items.S";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1676;BA.debugLine="GetLegendLineNumbers(xpnlGraph.Width - 1.2 *";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getlegendlinenumbers" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(1.2),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "-*",1, 0))));
 BA.debugLineNum = 1677;BA.debugLine="Legend.Height = (Legend.LineNumber + 0.8) * L";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"LineNumber" /*RemoteObject*/ ),RemoteObject.createImmutable(0.8)}, "+",1, 0)),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 BA.debugLineNum = 1678;BA.debugLine="Graph.Bottom = xpnlGraph.Height - Legend.Heig";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Bottom" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 }else {
 BA.debugLineNum = 1680;BA.debugLine="Graph.Bottom = xpnlGraph.Height - 1.2 * Texts";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Bottom" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),RemoteObject.createImmutable(1.2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 };
 BA.debugLineNum = 1683;BA.debugLine="If Graph.Title <> \"\" And Graph.Subtitle <> \"\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1684;BA.debugLine="Graph.Top = 2 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 1));
 BA.debugLineNum = 1685;BA.debugLine="If (Texts.TitleTextWidth + Texts.SubtitleText";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextWidth" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextWidth" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 40)))}, "++",2, 1)),BA.numberCast(double.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth")))) { 
 }else {
 BA.debugLineNum = 1687;BA.debugLine="Graph.Top = Graph.Top + 1 * Texts.SubtitleTe";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(1),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 1));
 };
 }else 
{ BA.debugLineNum = 1689;BA.debugLine="Else If Graph.Title <> \"\" And Graph.Subtitle =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1690;BA.debugLine="Graph.Top = 2 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 1));
 }else 
{ BA.debugLineNum = 1691;BA.debugLine="Else If Graph.Title = \"\" And Graph.Subtitle <>";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1692;BA.debugLine="Graph.Top = 2 * Texts.SubTitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(2),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "*",0, 1));
 }else {
 BA.debugLineNum = 1694;BA.debugLine="Graph.Top = Texts.ScaleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ));
 }}}
;
 BA.debugLineNum = 1697;BA.debugLine="Graph.Height = Graph.Bottom - Graph.Top";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 1698;BA.debugLine="Graph.Left = 0.02 * xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.02),__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "*",0, 0)));
 BA.debugLineNum = 1699;BA.debugLine="Graph.Right = xpnlGraph.Width - Graph.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 1700;BA.debugLine="Graph.Width = Graph.Right - Graph.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 1702;BA.debugLine="If Scale(sY(0)).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1703;BA.debugLine="CalcScaleAuto(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscaleauto" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 }else {
 BA.debugLineNum = 1705;BA.debugLine="CalcScaleManu(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalemanu" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 };
 BA.debugLineNum = 1708;BA.debugLine="InitValues";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initvalues" /*RemoteObject*/ );
 BA.debugLineNum = 1710;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 }else {
 BA.debugLineNum = 1712;BA.debugLine="Graph.Error = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Error" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 1713;BA.debugLine="Graph.ErrorText = \"Only \" & Zoom.NbVisiblePoin";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ErrorText" /*RemoteObject*/ ,RemoteObject.concat(RemoteObject.createImmutable("Only "),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(" points. Minmum points for a RADAR chart is 3 !")));
 BA.debugLineNum = 1714;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 break; }
case 2: 
case 3: {
 BA.debugLineNum = 1717;BA.debugLine="Private ID As ItemData";
Debug.JustUpdateDeviceLine();
_id = RemoteObject.createNew ("b4a.example.xchart._itemdata");Debug.locals.put("ID", _id);
 BA.debugLineNum = 1718;BA.debugLine="ID = Items.Get(0)";
Debug.JustUpdateDeviceLine();
_id = (__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("ID", _id);
 BA.debugLineNum = 1719;BA.debugLine="If ID.YXArray.Size = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_id.getField(false,"YXArray" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1720;BA.debugLine="Graph.Error = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Error" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 1721;BA.debugLine="Graph.ErrorText = \"No data\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ErrorText" /*RemoteObject*/ ,BA.ObjectToString("No data"));
 BA.debugLineNum = 1722;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 break; }
case 4: {
 BA.debugLineNum = 1725;BA.debugLine="Scale(sY(0)).YZeroAxis = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("YZeroAxis" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 break; }
default: {
 BA.debugLineNum = 1727;BA.debugLine="If Zoom.NbVisiblePoints = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 1728;BA.debugLine="Graph.Error = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Error" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 1729;BA.debugLine="Graph.ErrorText = \"No data\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ErrorText" /*RemoteObject*/ ,BA.ObjectToString("No data"));
 BA.debugLineNum = 1730;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 break; }
}
;
 BA.debugLineNum = 1734;BA.debugLine="If (Graph.ChartType = \"LINE\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("YX_CHART"))))) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1735;BA.debugLine="If Scale(sY(0)).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1736;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step85 = 1;
final int limit85 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step85 > 0 && _i <= limit85) || (step85 < 0 && _i >= limit85) ;_i = ((int)(0 + _i + step85))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1737;BA.debugLine="CalcScaleAuto(sY(i))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscaleauto" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))));
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 1740;BA.debugLine="For i = 0 To Items.Size -1";
Debug.JustUpdateDeviceLine();
{
final int step89 = 1;
final int limit89 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step89 > 0 && _i <= limit89) || (step89 < 0 && _i >= limit89) ;_i = ((int)(0 + _i + step89))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1741;BA.debugLine="CalcScaleManu(sY(i))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalemanu" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))));
 }
}Debug.locals.put("i", _i);
;
 };
 }else {
 BA.debugLineNum = 1745;BA.debugLine="If Scale(sY(0)).Logarithmic = True And (Graph.Ch";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("YX_CHART")))))) { 
 BA.debugLineNum = 1746;BA.debugLine="If Scale(sY(0)).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1747;BA.debugLine="CalcScaleLogAuto(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalelogauto" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 }else {
 BA.debugLineNum = 1749;BA.debugLine="CalcScaleLogManu(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalelogmanu" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 };
 }else {
 BA.debugLineNum = 1752;BA.debugLine="If Scale(sY(0)).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1753;BA.debugLine="CalcScaleAuto(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscaleauto" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 }else {
 BA.debugLineNum = 1755;BA.debugLine="CalcScaleManu(sY(0))";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalemanu" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))));
 };
 };
 };
 BA.debugLineNum = 1760;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART"))) { 
 BA.debugLineNum = 1761;BA.debugLine="If Scale(sX).Logarithmic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1762;BA.debugLine="If Scale(sX).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1763;BA.debugLine="CalcScaleLogAuto(sX)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalelogauto" /*RemoteObject*/ ,(Object)(__ref.getField(true,"_sx" /*RemoteObject*/ )));
 }else {
 BA.debugLineNum = 1765;BA.debugLine="CalcScaleLogManu(sX)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalelogmanu" /*RemoteObject*/ ,(Object)(__ref.getField(true,"_sx" /*RemoteObject*/ )));
 };
 }else {
 BA.debugLineNum = 1768;BA.debugLine="If Scale(sX).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1769;BA.debugLine="CalcScaleAuto(sX)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscaleauto" /*RemoteObject*/ ,(Object)(__ref.getField(true,"_sx" /*RemoteObject*/ )));
 }else {
 BA.debugLineNum = 1771;BA.debugLine="CalcScaleManu(sX)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalemanu" /*RemoteObject*/ ,(Object)(__ref.getField(true,"_sx" /*RemoteObject*/ )));
 };
 };
 };
 BA.debugLineNum = 1776;BA.debugLine="If Graph.ChartType = \"BUBBLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 1777;BA.debugLine="If Scale(sX).Automatic = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Automatic" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1778;BA.debugLine="CalcScaleAuto(sX)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscaleauto" /*RemoteObject*/ ,(Object)(__ref.getField(true,"_sx" /*RemoteObject*/ )));
 }else {
 BA.debugLineNum = 1780;BA.debugLine="CalcScaleManu(sX)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_calcscalemanu" /*RemoteObject*/ ,(Object)(__ref.getField(true,"_sx" /*RemoteObject*/ )));
 };
 };
 BA.debugLineNum = 1784;BA.debugLine="Private WidthXScale_2 As Int";
Debug.JustUpdateDeviceLine();
_widthxscale_2 = RemoteObject.createImmutable(0);Debug.locals.put("WidthXScale_2", _widthxscale_2);
 BA.debugLineNum = 1785;BA.debugLine="If Scale(sX).DrawXScale = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1786;BA.debugLine="WidthXScale_2 = GetXScaleWidth / 2";
Debug.JustUpdateDeviceLine();
_widthxscale_2 = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.runClassMethod (b4a.example.xchart.class, "_getxscalewidth" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "/",0, 0));Debug.locals.put("WidthXScale_2", _widthxscale_2);
 };
 BA.debugLineNum = 1789;BA.debugLine="If Scale(sY(0)).DrawYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1790;BA.debugLine="Graph.Left = 0.75 * Texts.AxisTextHeight '+ Widt";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 }else {
 BA.debugLineNum = 1792;BA.debugLine="If (Graph.ChartType = \"LINE\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("STACKED_AREA"))))) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1793;BA.debugLine="Private Width As Int";
Debug.JustUpdateDeviceLine();
_width = RemoteObject.createImmutable(0);Debug.locals.put("Width", _width);
 BA.debugLineNum = 1794;BA.debugLine="For i = 0 To NbMaxDifferentScales - 1 Step 2";
Debug.JustUpdateDeviceLine();
{
final int step139 = 2;
final int limit139 = RemoteObject.solve(new RemoteObject[] {__ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step139 > 0 && _i <= limit139) || (step139 < 0 && _i >= limit139) ;_i = ((int)(0 + _i + step139))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1795;BA.debugLine="Width = Max(Width, GetYScaleWidth(i))";
Debug.JustUpdateDeviceLine();
_width = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_getyscalewidth" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, _i)))))));Debug.locals.put("Width", _width);
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 1797;BA.debugLine="Graph.Left = Width + 1.05 * Texts.ScaleTextHeig";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_width,RemoteObject.createImmutable(1.05),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0)));
 }else {
 BA.debugLineNum = 1799;BA.debugLine="Graph.Left = GetYScaleWidth(0) + 1.05 * Texts.S";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.runClassMethod (b4a.example.xchart.class, "_getyscalewidth" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, 0))),RemoteObject.createImmutable(1.05),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "+*",1, 0)));
 };
 };
 BA.debugLineNum = 1803;BA.debugLine="If Graph.YAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1804;BA.debugLine="Graph.Left = Graph.Left + Texts.AxisTextHeight *";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.8)}, "+*",1, 0)));
 };
 BA.debugLineNum = 1807;BA.debugLine="If Scale(sY(0)).DrawYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"DrawYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1808;BA.debugLine="Graph.Right = xpnlGraph.Width - 0.75 * Texts.Sca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(0.75),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_widthxscale_2}, "-*-",2, 0)));
 }else {
 BA.debugLineNum = 1810;BA.debugLine="If (Graph.ChartType = \"LINE\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("STACKED_AREA"))))) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1811;BA.debugLine="Graph.Right = xpnlGraph.Width - 1.5 * Texts.Sca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),__ref.runClassMethod (b4a.example.xchart.class, "_getyscalewidth" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, 1)))}, "-*-",2, 0)));
 BA.debugLineNum = 1812;BA.debugLine="For i = 1 To NbMaxDifferentScales - 1 Step 2";
Debug.JustUpdateDeviceLine();
{
final int step155 = 2;
final int limit155 = RemoteObject.solve(new RemoteObject[] {__ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 1 ;
for (;(step155 > 0 && _i <= limit155) || (step155 < 0 && _i >= limit155) ;_i = ((int)(0 + _i + step155))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1813;BA.debugLine="RightScaleWidth = Max(Width, GetYScaleWidth(i)";
Debug.JustUpdateDeviceLine();
__ref.setField ("_rightscalewidth" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_getyscalewidth" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, _i))))))));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 1815;BA.debugLine="Graph.Right = xpnlGraph.Width - RightScaleWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(true,"_rightscalewidth" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_widthxscale_2}, "--*-",3, 0)));
 }else {
 BA.debugLineNum = 1817;BA.debugLine="Graph.Right = xpnlGraph.Width - 1.5 * Texts.Sca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),_widthxscale_2}, "-*-",2, 0)));
 };
 };
 BA.debugLineNum = 1820;BA.debugLine="If Graph.YAxisName2 <> \"\" And Items.Size <= NbMax";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YAxisName2" /*RemoteObject*/ ),BA.ObjectToString("")) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1821;BA.debugLine="Graph.Right = Graph.Right - Texts.AxisTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.8)}, "-*",1, 0)));
 };
 BA.debugLineNum = 1824;BA.debugLine="Graph.Width = Graph.Right - Graph.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 1826;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Or Graph.ChartTyp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 1827;BA.debugLine="Graph.Width = Floor(Graph.Width / Scale(sX).NbIn";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Floor",(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0))),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"NbIntervals" /*RemoteObject*/ )}, "*",0, 0)));
 BA.debugLineNum = 1828;BA.debugLine="Graph.Right = Graph.Left + Graph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ )}, "+",1, 1));
 BA.debugLineNum = 1829;BA.debugLine="Scale(sY(0)).Scale = Graph.Height / (Scale(sY(0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 BA.debugLineNum = 1830;BA.debugLine="Scale(sX).Scale = Graph.Width / (Scale(sX).MaxVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 }else {
 BA.debugLineNum = 1832;BA.debugLine="If (Graph.ChartType = \"LINE\" Or Graph.ChartType";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),RemoteObject.createImmutable("YX_CHART"))))) && RemoteObject.solveBoolean("k",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 1833;BA.debugLine="For i = 0 To Items.Size - 1";
Debug.JustUpdateDeviceLine();
{
final int step174 = 1;
final int limit174 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step174 > 0 && _i <= limit174) || (step174 < 0 && _i >= limit174) ;_i = ((int)(0 + _i + step174))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1834;BA.debugLine="Scale(sY(i)).Scale = Graph.Height / (Scale(sY(";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, _i))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 }
}Debug.locals.put("i", _i);
;
 }else {
 BA.debugLineNum = 1837;BA.debugLine="Scale(sY(0)).Scale = Graph.Height / (Scale(sY(0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 };
 BA.debugLineNum = 1839;BA.debugLine="Scale(sX).Scale = Graph.Width / (Scale(sX).MaxVa";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 };
 BA.debugLineNum = 1842;BA.debugLine="If Graph.ChartType = \"BAR\" Or Graph.ChartType = \"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("STACKED_BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("WATERFALL"))) { 
 BA.debugLineNum = 1843;BA.debugLine="BarWidth0 = False";
Debug.JustUpdateDeviceLine();
__ref.setField ("_barwidth0" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 1844;BA.debugLine="Private PD As PointData = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);Debug.locals.put("PD", _pd);
 BA.debugLineNum = 1845;BA.debugLine="Private Margin = 0.02 * Graph.Width As Int";
Debug.JustUpdateDeviceLine();
_margin = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.02),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("Margin", _margin);Debug.locals.put("Margin", _margin);
 BA.debugLineNum = 1846;BA.debugLine="If Graph.BarMarginMode = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarMarginMode" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 1847;BA.debugLine="Graph.XInterval = (Graph.Width - Margin) / Zoom";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XInterval" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),_margin}, "-",1, 1)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "/",0, 0));
 }else {
 BA.debugLineNum = 1849;BA.debugLine="Graph.XInterval = Floor((Graph.Width - Margin)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XInterval" /*RemoteObject*/ ,xchart.__c.runMethod(true,"Floor",(Object)(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),_margin}, "-",1, 1)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "/",0, 0))));
 };
 BA.debugLineNum = 1852;BA.debugLine="Private Space As Int";
Debug.JustUpdateDeviceLine();
_space = RemoteObject.createImmutable(0);Debug.locals.put("Space", _space);
 BA.debugLineNum = 1853;BA.debugLine="If Graph.ChartType = \"BAR\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("STACKED_BAR")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("WATERFALL"))) { 
 BA.debugLineNum = 1854;BA.debugLine="Select Items.Size";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(int.class, 0),BA.numberCast(int.class, 1),BA.numberCast(int.class, 2),BA.numberCast(int.class, 3))) {
case 0: 
case 1: {
 BA.debugLineNum = 1856;BA.debugLine="If Zoom.NbVisiblePoints <= 40 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 40))) { 
 BA.debugLineNum = 1857;BA.debugLine="Private SpaceRatio As Double";
Debug.JustUpdateDeviceLine();
_spaceratio = RemoteObject.createImmutable(0);Debug.locals.put("SpaceRatio", _spaceratio);
 BA.debugLineNum = 1858;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 1859;BA.debugLine="SpaceRatio = 1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 1);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1860;BA.debugLine="Else If Zoom.NbVisiblePoints = 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 1861;BA.debugLine="SpaceRatio = 0.85";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.85);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1862;BA.debugLine="Else If Zoom.NbVisiblePoints = 3 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 3))) { 
 BA.debugLineNum = 1863;BA.debugLine="SpaceRatio = 0.75";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.75);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1864;BA.debugLine="Else If Zoom.NbVisiblePoints = 4 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 4))) { 
 BA.debugLineNum = 1865;BA.debugLine="SpaceRatio = 0.6";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.6);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1866;BA.debugLine="Else If Zoom.NbVisiblePoints = 5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5))) { 
 BA.debugLineNum = 1867;BA.debugLine="SpaceRatio = 0.5";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.5);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1868;BA.debugLine="Else If Zoom.NbVisiblePoints > 5 And Zoom.Nb";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20))) { 
 BA.debugLineNum = 1869;BA.debugLine="SpaceRatio = 0.4";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.4);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1870;BA.debugLine="Else If Zoom.NbVisiblePoints > 20 And Zoom.N";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 30))) { 
 BA.debugLineNum = 1871;BA.debugLine="SpaceRatio = 0.3";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.3);Debug.locals.put("SpaceRatio", _spaceratio);
 }else {
 BA.debugLineNum = 1873;BA.debugLine="SpaceRatio = 0.2";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.2);Debug.locals.put("SpaceRatio", _spaceratio);
 }}}}}}}
;
 BA.debugLineNum = 1875;BA.debugLine="Space = Max(1dip, Graph.XInterval - Graph.Wi";
Debug.JustUpdateDeviceLine();
_space = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),_spaceratio}, "+",1, 0)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(2),_spaceratio}, "*+*",1, 0))}, "-/",1, 0))));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 1877;BA.debugLine="If Zoom.NbVisiblePoints < 50 And Graph.XInte";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 50)) && RemoteObject.solveBoolean("g",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))))) { 
 BA.debugLineNum = 1878;BA.debugLine="Space = 2dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 1880;BA.debugLine="Space = 1dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("Space", _space);
 };
 };
 break; }
case 2: 
case 3: {
 BA.debugLineNum = 1884;BA.debugLine="If Zoom.NbVisiblePoints <= 40 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 40))) { 
 BA.debugLineNum = 1885;BA.debugLine="Private SpaceRatio As Double";
Debug.JustUpdateDeviceLine();
_spaceratio = RemoteObject.createImmutable(0);Debug.locals.put("SpaceRatio", _spaceratio);
 BA.debugLineNum = 1886;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 1887;BA.debugLine="SpaceRatio = 0.5";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.5);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1888;BA.debugLine="Else If Zoom.NbVisiblePoints = 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 1889;BA.debugLine="SpaceRatio = 0.42";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.42);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1890;BA.debugLine="Else If Zoom.NbVisiblePoints = 3 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 3))) { 
 BA.debugLineNum = 1891;BA.debugLine="SpaceRatio = 0.375";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.375);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1892;BA.debugLine="Else If Zoom.NbVisiblePoints = 4 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 4))) { 
 BA.debugLineNum = 1893;BA.debugLine="SpaceRatio = 0.3";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.3);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1894;BA.debugLine="Else If Zoom.NbVisiblePoints = 5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5))) { 
 BA.debugLineNum = 1895;BA.debugLine="SpaceRatio = 0.25";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.25);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1896;BA.debugLine="Else If Zoom.NbVisiblePoints > 5 And Zoom.Nb";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20))) { 
 BA.debugLineNum = 1897;BA.debugLine="SpaceRatio = 0.2";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.2);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1898;BA.debugLine="Else If Zoom.NbVisiblePoints > 20 And Zoom.N";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 30))) { 
 BA.debugLineNum = 1899;BA.debugLine="SpaceRatio = 0.15";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.15);Debug.locals.put("SpaceRatio", _spaceratio);
 }else {
 BA.debugLineNum = 1901;BA.debugLine="SpaceRatio = 0.1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.1);Debug.locals.put("SpaceRatio", _spaceratio);
 }}}}}}}
;
 BA.debugLineNum = 1903;BA.debugLine="Space = Max(1dip, Graph.XInterval - Graph.Wi";
Debug.JustUpdateDeviceLine();
_space = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),_spaceratio}, "+",1, 0)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(2),_spaceratio}, "*+*",1, 0))}, "-/",1, 0))));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 1905;BA.debugLine="If Zoom.NbVisiblePoints < 50 And Graph.XInte";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 50)) && RemoteObject.solveBoolean("g",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))))) { 
 BA.debugLineNum = 1906;BA.debugLine="Space = 2dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 1908;BA.debugLine="Space = 1dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("Space", _space);
 };
 };
 break; }
default: {
 BA.debugLineNum = 1912;BA.debugLine="If Zoom.NbVisiblePoints <= 40 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 40))) { 
 BA.debugLineNum = 1913;BA.debugLine="Private SpaceRatio As Double";
Debug.JustUpdateDeviceLine();
_spaceratio = RemoteObject.createImmutable(0);Debug.locals.put("SpaceRatio", _spaceratio);
 BA.debugLineNum = 1914;BA.debugLine="If Zoom.NbVisiblePoints = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 1915;BA.debugLine="SpaceRatio = 0.3";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.3);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1916;BA.debugLine="Else If Zoom.NbVisiblePoints = 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 1917;BA.debugLine="SpaceRatio = 0.25";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.25);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1918;BA.debugLine="Else If Zoom.NbVisiblePoints = 3 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 3))) { 
 BA.debugLineNum = 1919;BA.debugLine="SpaceRatio = 0.22";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.22);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1920;BA.debugLine="Else If Zoom.NbVisiblePoints = 4 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 4))) { 
 BA.debugLineNum = 1921;BA.debugLine="SpaceRatio = 0.18";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.18);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1922;BA.debugLine="Else If Zoom.NbVisiblePoints = 5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5))) { 
 BA.debugLineNum = 1923;BA.debugLine="SpaceRatio = 0.25";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.25);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1924;BA.debugLine="Else If Zoom.NbVisiblePoints > 5 And Zoom.Nb";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 5)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20))) { 
 BA.debugLineNum = 1925;BA.debugLine="SpaceRatio = 0.15";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.15);Debug.locals.put("SpaceRatio", _spaceratio);
 }else 
{ BA.debugLineNum = 1926;BA.debugLine="Else If Zoom.NbVisiblePoints > 20 And Zoom.N";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 20)) && RemoteObject.solveBoolean("k",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 30))) { 
 BA.debugLineNum = 1927;BA.debugLine="SpaceRatio = 0.1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.1);Debug.locals.put("SpaceRatio", _spaceratio);
 }else {
 BA.debugLineNum = 1929;BA.debugLine="SpaceRatio = 0.1";
Debug.JustUpdateDeviceLine();
_spaceratio = BA.numberCast(double.class, 0.1);Debug.locals.put("SpaceRatio", _spaceratio);
 }}}}}}}
;
 BA.debugLineNum = 1931;BA.debugLine="Space = Max(1dip, Graph.XInterval - Graph.Wi";
Debug.JustUpdateDeviceLine();
_space = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))),(Object)(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),_spaceratio}, "+",1, 0)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(2),_spaceratio}, "*+*",1, 0))}, "-/",1, 0))));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 1933;BA.debugLine="If Zoom.NbVisiblePoints < 50 And Graph.XInte";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, 50)) && RemoteObject.solveBoolean("g",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 6)))))) { 
 BA.debugLineNum = 1934;BA.debugLine="Space = 2dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)));Debug.locals.put("Space", _space);
 }else {
 BA.debugLineNum = 1936;BA.debugLine="Space = 1dip";
Debug.JustUpdateDeviceLine();
_space = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)));Debug.locals.put("Space", _space);
 };
 };
 break; }
}
;
 }else {
 BA.debugLineNum = 1941;BA.debugLine="Space = Margin";
Debug.JustUpdateDeviceLine();
_space = _margin;Debug.locals.put("Space", _space);
 };
 BA.debugLineNum = 1944;BA.debugLine="Private Limit As Int";
Debug.JustUpdateDeviceLine();
_limit = RemoteObject.createImmutable(0);Debug.locals.put("Limit", _limit);
 BA.debugLineNum = 1945;BA.debugLine="If Graph.ChartType = \"BAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR"))) { 
 BA.debugLineNum = 1946;BA.debugLine="Limit = 4dip * PD.YArray.Length";
Debug.JustUpdateDeviceLine();
_limit = RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))),_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length")}, "*",0, 1);Debug.locals.put("Limit", _limit);
 }else {
 BA.debugLineNum = 1948;BA.debugLine="Limit = 4dip";
Debug.JustUpdateDeviceLine();
_limit = xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4)));Debug.locals.put("Limit", _limit);
 };
 BA.debugLineNum = 1951;BA.debugLine="If Graph.XInterval - Space < Limit Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),_space}, "-",1, 0),BA.numberCast(double.class, _limit))) { 
 BA.debugLineNum = 1952;BA.debugLine="Log(\"Bar width = too small !!! Drawing of Bar c";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","96422841",RemoteObject.createImmutable("Bar width = too small !!! Drawing of Bar chart skipped"),0);
 BA.debugLineNum = 1953;BA.debugLine="BarWidth0 = True";
Debug.JustUpdateDeviceLine();
__ref.setField ("_barwidth0" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 };
 BA.debugLineNum = 1956;BA.debugLine="If Graph.BarMarginMode = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarMarginMode" /*RemoteObject*/ ),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 1957;BA.debugLine="Graph.XOffset = Margin / 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XOffset" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_margin,RemoteObject.createImmutable(2)}, "/",0, 0)));
 BA.debugLineNum = 1958;BA.debugLine="Graph.Width = Graph.XInterval * Zoom.NbVisibleP";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),_margin}, "*+",1, 0)));
 BA.debugLineNum = 1959;BA.debugLine="Graph.Right = Graph.Left + Graph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Right" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ )}, "+",1, 1));
 }else {
 BA.debugLineNum = 1961;BA.debugLine="Graph.XOffset = (Graph.Width - Graph.XInterval";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XOffset" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "-*",1, 0)),RemoteObject.createImmutable(2)}, "/",0, 0)));
 };
 BA.debugLineNum = 1963;BA.debugLine="Graph.BarWidth = Graph.XInterval - Space";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarWidth" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XInterval" /*RemoteObject*/ ),_space}, "-",1, 0)));
 BA.debugLineNum = 1964;BA.debugLine="Graph.BarSubWidth = Graph.BarWidth / PD.YArray.L";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarSubWidth" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ),_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length")}, "/",0, 0)));
 BA.debugLineNum = 1966;BA.debugLine="If Graph.ChartType = \"BAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BAR"))) { 
 BA.debugLineNum = 1968;BA.debugLine="If Graph.BarSubWidth < 4dip And BarWidth0 = Fal";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"BarSubWidth" /*RemoteObject*/ ),BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 4))))) && RemoteObject.solveBoolean("=",__ref.getField(true,"_barwidth0" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1969;BA.debugLine="Log(\"Bar width = too small !!! Drawing of Bar";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","96422858",RemoteObject.createImmutable("Bar width = too small !!! Drawing of Bar chart skipped"),0);
 BA.debugLineNum = 1970;BA.debugLine="BarWidth0 = True";
Debug.JustUpdateDeviceLine();
__ref.setField ("_barwidth0" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 };
 };
 };
 BA.debugLineNum = 1975;BA.debugLine="If Graph.Title <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1976;BA.debugLine="Graph.Top = 1.8 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.8),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 }else {
 BA.debugLineNum = 1978;BA.debugLine="Graph.Top = 0.9 * Texts.TitleTextHeight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 };
 BA.debugLineNum = 1981;BA.debugLine="If Graph.Subtitle <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1982;BA.debugLine="Graph.Top = Graph.Top + 1.5 * Texts.SubtitleText";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(1.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextHeight" /*RemoteObject*/ )}, "+*",1, 0)));
 };
 BA.debugLineNum = 1985;BA.debugLine="If Scale(sX).DrawXScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"DrawXScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 1986;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top - 0.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.5),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 }else {
 BA.debugLineNum = 1988;BA.debugLine="Select Graph.XScaleTextOrientation";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XScaleTextOrientation" /*RemoteObject*/ ),BA.ObjectToString("HORIZONTAL"),BA.ObjectToString("VERTICAL"),BA.ObjectToString("45 DEGREES"))) {
case 0: {
 BA.debugLineNum = 1990;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(2.1),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 break; }
case 1: {
 BA.debugLineNum = 1992;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),__ref.runClassMethod (b4a.example.xchart.class, "_getxscalewidth" /*RemoteObject*/ )}, "--*-",3, 0)));
 break; }
case 2: {
 BA.debugLineNum = 1994;BA.debugLine="Graph.Height = xpnlGraph.Height - Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),RemoteObject.createImmutable(0.9),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextHeight" /*RemoteObject*/ ),__ref.runClassMethod (b4a.example.xchart.class, "_getxscalewidth" /*RemoteObject*/ ),RemoteObject.createImmutable(0.8)}, "--*-*",3, 0)));
 break; }
}
;
 };
 BA.debugLineNum = 1997;BA.debugLine="If Graph.XAxisName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 1998;BA.debugLine="Graph.Height = Graph.Height - 1.3 * Texts.AxisTe";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(1.3),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 };
 BA.debugLineNum = 2001;BA.debugLine="If Legend.IncludeLegend = \"BOTTOM\" And Items.Size";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("BOTTOM")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("!",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"))) { 
 BA.debugLineNum = 2002;BA.debugLine="GetLegendLineNumbers(xpnlGraph.Width - 1.2 * Leg";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_getlegendlinenumbers" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(1.2),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "-*",1, 0))));
 BA.debugLineNum = 2003;BA.debugLine="Legend.Height = (Legend.LineNumber + 0.8) * Lege";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"LineNumber" /*RemoteObject*/ ),RemoteObject.createImmutable(0.8)}, "+",1, 0)),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0)));
 BA.debugLineNum = 2004;BA.debugLine="Graph.Height = Graph.Height - Legend.Height - 0.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),RemoteObject.createImmutable(0.75),__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "--*",2, 0)));
 };
 BA.debugLineNum = 2007;BA.debugLine="Graph.YInterval = Graph.Height / Scale(sY(0)).NbI";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("YInterval" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ )}, "/",0, 0)));
 BA.debugLineNum = 2008;BA.debugLine="Graph.Height =  Graph.YInterval * Scale(sY(0)).Nb";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"YInterval" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"NbIntervals" /*RemoteObject*/ )}, "*",0, 1));
 BA.debugLineNum = 2009;BA.debugLine="Graph.Bottom = Graph.Top + Graph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Bottom" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ )}, "+",1, 1));
 BA.debugLineNum = 2010;BA.debugLine="Graph.Rect.Initialize(Graph.Left, Graph.Top, Grap";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(false,"Rect" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ))));
 BA.debugLineNum = 2012;BA.debugLine="If Graph.ChartType = \"AREA\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("STACKED_AREA"))) { 
 BA.debugLineNum = 2013;BA.debugLine="Scale(sY(0)).Scale = Graph.Height / (Scale(sY(0)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Scale" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ )}, "-",1, 0))}, "/",0, 0));
 };
 BA.debugLineNum = 2017;BA.debugLine="pthGrid.Initialize(Graph.Left - 1dip, Graph.Top -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))));
 BA.debugLineNum = 2018;BA.debugLine="pthGrid.LineTo(Graph.Right + 1dip, Graph.Top - 1d";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))));
 BA.debugLineNum = 2019;BA.debugLine="pthGrid.LineTo(Graph.Right + 1dip, Graph.Bottom +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))));
 BA.debugLineNum = 2020;BA.debugLine="pthGrid.LineTo(Graph.Left - 1dip, Graph.Bottom +";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "+",1, 1))));
 BA.debugLineNum = 2021;BA.debugLine="pthGrid.LineTo(Graph.Left - 1dip, Graph.Top - 1di";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_pthgrid" /*RemoteObject*/ ).runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "-",1, 1))));
 BA.debugLineNum = 2023;BA.debugLine="InitValues";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_initvalues" /*RemoteObject*/ );
 BA.debugLineNum = 2025;BA.debugLine="If Zoom.Active = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Active" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2026;BA.debugLine="ZoomBarResize";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoombarresize" /*RemoteObject*/ );
 BA.debugLineNum = 2027;BA.debugLine="ZoomCursorDraw";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoomcursordraw" /*RemoteObject*/ );
 };
 BA.debugLineNum = 2029;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _initialize(RemoteObject __ref,RemoteObject _ba,RemoteObject _callback,RemoteObject _eventname) throws Exception{
try {
		Debug.PushSubsStack("Initialize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,222);
if (RapidSub.canDelegate("initialize")) { return __ref.runUserSub(false, "xchart","initialize", __ref, _ba, _callback, _eventname);}
__ref.runVoidMethodAndSync("innerInitializeHelper", _ba);
Debug.locals.put("ba", _ba);
Debug.locals.put("Callback", _callback);
Debug.locals.put("EventName", _eventname);
 BA.debugLineNum = 222;BA.debugLine="Public Sub Initialize (Callback As Object, EventNa";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 223;BA.debugLine="mEventName = EventName";
Debug.JustUpdateDeviceLine();
__ref.setField ("_meventname" /*RemoteObject*/ ,_eventname);
 BA.debugLineNum = 224;BA.debugLine="mCallBack = Callback";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mcallback" /*RemoteObject*/ ,_callback);
 BA.debugLineNum = 226;BA.debugLine="sX = 0";
Debug.JustUpdateDeviceLine();
__ref.setField ("_sx" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 227;BA.debugLine="sY(0) = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_sy" /*RemoteObject*/ ).setArrayElement (BA.numberCast(int.class, 1),BA.numberCast(int.class, 0));
 BA.debugLineNum = 228;BA.debugLine="sY(1) = 2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_sy" /*RemoteObject*/ ).setArrayElement (BA.numberCast(int.class, 2),BA.numberCast(int.class, 1));
 BA.debugLineNum = 229;BA.debugLine="sY(2) = 3";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_sy" /*RemoteObject*/ ).setArrayElement (BA.numberCast(int.class, 3),BA.numberCast(int.class, 2));
 BA.debugLineNum = 230;BA.debugLine="sY(3) = 4";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_sy" /*RemoteObject*/ ).setArrayElement (BA.numberCast(int.class, 4),BA.numberCast(int.class, 3));
 BA.debugLineNum = 232;BA.debugLine="LongClickTimer.Initialize(\"LongClickTimer\", 300)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_longclicktimer" /*RemoteObject*/ ).runVoidMethod ("Initialize",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("LongClickTimer")),(Object)(BA.numberCast(long.class, 300)));
 BA.debugLineNum = 233;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _inittextsizes(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("InitTextSizes (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2281);
if (RapidSub.canDelegate("inittextsizes")) { return __ref.runUserSub(false, "xchart","inittextsizes", __ref);}
RemoteObject _fntx = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");
RemoteObject _fnt = RemoteObject.declareNull("anywheresoftware.b4a.keywords.constants.TypefaceWrapper");
RemoteObject _graphsize = RemoteObject.createImmutable(0);
 BA.debugLineNum = 2281;BA.debugLine="Private Sub InitTextSizes";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2282;BA.debugLine="Private fntx As B4XFont";
Debug.JustUpdateDeviceLine();
_fntx = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XViewWrapper.B4XFont");Debug.locals.put("fntx", _fntx);
 BA.debugLineNum = 2284;BA.debugLine="If Texts.CustomFontName <> \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 2285;BA.debugLine="If Texts.CustomFontName.EndsWith(\"ttf\") Then";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontName" /*RemoteObject*/ ).runMethod(true,"endsWith",(Object)(RemoteObject.createImmutable("ttf"))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 2291;BA.debugLine="Private fnt As Typeface";
Debug.JustUpdateDeviceLine();
_fnt = RemoteObject.createNew ("anywheresoftware.b4a.keywords.constants.TypefaceWrapper");Debug.locals.put("fnt", _fnt);
 BA.debugLineNum = 2292;BA.debugLine="fnt = Typeface.LoadFromAssets(Texts.CustomFontN";
Debug.JustUpdateDeviceLine();
_fnt = RemoteObject.declareNull("anywheresoftware.b4a.AbsObjectWrapper").runMethod(false, "ConvertToWrapper", RemoteObject.createNew("anywheresoftware.b4a.keywords.constants.TypefaceWrapper"), xchart.__c.getField(false,"Typeface").runMethod(false,"LoadFromAssets",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontName" /*RemoteObject*/ ))));Debug.locals.put("fnt", _fnt);
 BA.debugLineNum = 2293;BA.debugLine="fntx = xui.CreateFont(fnt, 10)";
Debug.JustUpdateDeviceLine();
_fntx = __ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont",(Object)((_fnt.getObject())),(Object)(BA.numberCast(float.class, 10)));Debug.locals.put("fntx", _fntx);
 }else {
 BA.debugLineNum = 2315;BA.debugLine="Texts.CustomFontName = \"\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("CustomFontName" /*RemoteObject*/ ,BA.ObjectToString(""));
 BA.debugLineNum = 2316;BA.debugLine="Texts.CustomFontScale = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("CustomFontScale" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 };
 };
 BA.debugLineNum = 2336;BA.debugLine="If Texts.AutomaticTextSizes = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AutomaticTextSizes" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 2337;BA.debugLine="Private GraphSize As Int";
Debug.JustUpdateDeviceLine();
_graphsize = RemoteObject.createImmutable(0);Debug.locals.put("GraphSize", _graphsize);
 BA.debugLineNum = 2338;BA.debugLine="GraphSize = Min(xpnlGraph.Width, xpnlGraph.Heigh";
Debug.JustUpdateDeviceLine();
_graphsize = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(double.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight")))),__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"getScale")}, "/",0, 0));Debug.locals.put("GraphSize", _graphsize);
 BA.debugLineNum = 2339;BA.debugLine="Texts.TitleTextSize = (1 + (GraphSize - 250)/100";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),(RemoteObject.solve(new RemoteObject[] {_graphsize,RemoteObject.createImmutable(250)}, "-",1, 1)),RemoteObject.createImmutable(1000)}, "+/",1, 0)),RemoteObject.createImmutable(18),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontScale" /*RemoteObject*/ )}, "**",0, 0)));
 BA.debugLineNum = 2340;BA.debugLine="Texts.SubtitleTextSize = (1 + (GraphSize - 250)/";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),(RemoteObject.solve(new RemoteObject[] {_graphsize,RemoteObject.createImmutable(250)}, "-",1, 1)),RemoteObject.createImmutable(1000)}, "+/",1, 0)),RemoteObject.createImmutable(16),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontScale" /*RemoteObject*/ )}, "**",0, 0)));
 BA.debugLineNum = 2341;BA.debugLine="Texts.AxisTextSize = (1 + (GraphSize - 250)/1000";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),(RemoteObject.solve(new RemoteObject[] {_graphsize,RemoteObject.createImmutable(250)}, "-",1, 1)),RemoteObject.createImmutable(1000)}, "+/",1, 0)),RemoteObject.createImmutable(14),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontScale" /*RemoteObject*/ )}, "**",0, 0)));
 BA.debugLineNum = 2342;BA.debugLine="Legend.TextSize = (1 + (GraphSize - 250)/1000) *";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextSize" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),(RemoteObject.solve(new RemoteObject[] {_graphsize,RemoteObject.createImmutable(250)}, "-",1, 1)),RemoteObject.createImmutable(1000)}, "+/",1, 0)),RemoteObject.createImmutable(14),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontScale" /*RemoteObject*/ )}, "**",0, 0)));
 BA.debugLineNum = 2343;BA.debugLine="Texts.ScaleTextSize = (1 + (GraphSize - 250)/100";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleTextSize" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),(RemoteObject.solve(new RemoteObject[] {_graphsize,RemoteObject.createImmutable(250)}, "-",1, 1)),RemoteObject.createImmutable(1000)}, "+/",1, 0)),RemoteObject.createImmutable(12),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontScale" /*RemoteObject*/ )}, "**",0, 0)));
 BA.debugLineNum = 2344;BA.debugLine="Values.TextSize = (1 + (GraphSize - 250)/1000) *";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextSize" /*RemoteObject*/ ,BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1),(RemoteObject.solve(new RemoteObject[] {_graphsize,RemoteObject.createImmutable(250)}, "-",1, 1)),RemoteObject.createImmutable(1000)}, "+/",1, 0)),RemoteObject.createImmutable(14),__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontScale" /*RemoteObject*/ )}, "**",0, 0)));
 };
 BA.debugLineNum = 2347;BA.debugLine="If Texts.CustomFontName = \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 2348;BA.debugLine="Texts.TitleFont = xui.CreateDefaultFont(Texts.Ti";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2349;BA.debugLine="Texts.SubtitleFont = xui.CreateDefaultFont(Texts";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2350;BA.debugLine="Texts.AxisFont = xui.CreateDefaultFont(Texts.Axi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2351;BA.debugLine="Texts.ScaleFont = xui.CreateDefaultFont(Texts.Sc";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2352;BA.debugLine="Legend.TextFont = xui.CreateDefaultFont(Legend.T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2353;BA.debugLine="Values.TextFont = xui.CreateDefaultFont(Values.T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ ))));
 }else {
 BA.debugLineNum = 2355;BA.debugLine="Texts.TitleFont = xui.CreateFont2(fntx, Texts.Ti";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(_fntx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2356;BA.debugLine="Texts.SubtitleFont = xui.CreateFont2(fntx, Texts";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(_fntx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2357;BA.debugLine="Texts.AxisFont = xui.CreateFont2(fntx, Texts.Axi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(_fntx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2358;BA.debugLine="Texts.ScaleFont = xui.CreateFont2(fntx, Texts.Sc";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(_fntx),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2359;BA.debugLine="Legend.TextFont = xui.CreateFont2(fntx, Legend.T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(_fntx),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 2360;BA.debugLine="Values.TextFont = xui.CreateFont2(fntx, Values.T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateFont2",(Object)(_fntx),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ ))));
 };
 BA.debugLineNum = 2363;BA.debugLine="Texts.TitleTextHeight = MeasureTextHeight(\"Mg\", T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleTextHeight" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Mg")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2364;BA.debugLine="Texts.TitleTextWidth = MeasureTextWidth(Graph.Tit";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleTextWidth" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Title" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"TitleFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2365;BA.debugLine="Texts.SubtitleTextHeight = MeasureTextHeight(\"Mg\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleTextHeight" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Mg")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2366;BA.debugLine="Texts.SubtitleTextWidth = MeasureTextWidth(Graph.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleTextWidth" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Subtitle" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"SubtitleFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2367;BA.debugLine="Texts.AxisTextHeight =  MeasureTextHeight(\"Mg\", T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisTextHeight" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Mg")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"AxisFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2368;BA.debugLine="Texts.ScaleTextHeight =  MeasureTextHeight(\"Mg\",";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleTextHeight" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Mg")),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(false,"ScaleFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2369;BA.debugLine="Legend.TextHeight =  MeasureTextHeight(\"Mg\", Lege";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextHeight" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Mg")),(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2370;BA.debugLine="Values.TextHeight = MeasureTextHeight(\"Mg\", Value";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextHeight" /*RemoteObject*/ ,__ref.runClassMethod (b4a.example.xchart.class, "_measuretextheight" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Mg")),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ ))));
 BA.debugLineNum = 2372;BA.debugLine="Graph.Error = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Error" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 2373;BA.debugLine="Graph.ErrorText = \"\"";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ErrorText" /*RemoteObject*/ ,BA.ObjectToString(""));
 BA.debugLineNum = 2374;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _initvalues(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("InitValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,727);
if (RapidSub.canDelegate("initvalues")) { return __ref.runUserSub(false, "xchart","initvalues", __ref);}
RemoteObject _r = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _linenumber = RemoteObject.createImmutable(0);
RemoteObject _pd = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _itemwidth = RemoteObject.createImmutable(0);
RemoteObject _txtx = RemoteObject.createImmutable("");
RemoteObject _item = RemoteObject.declareNull("b4a.example.xchart._itemdata");
RemoteObject _txt = RemoteObject.createImmutable("");
RemoteObject _valuewidth = RemoteObject.createImmutable(0);
RemoteObject _pnt = RemoteObject.declareNull("b4a.example.xchart._pointdata");
RemoteObject _h = RemoteObject.createImmutable(0);
RemoteObject _x = RemoteObject.createImmutable(0);
RemoteObject _y = RemoteObject.createImmutable(0);
RemoteObject _top = RemoteObject.createImmutable(0);
 BA.debugLineNum = 727;BA.debugLine="Private Sub InitValues";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 728;BA.debugLine="Private r As B4XRect";
Debug.JustUpdateDeviceLine();
_r = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("r", _r);
 BA.debugLineNum = 729;BA.debugLine="Private i, LineNumber As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_linenumber = RemoteObject.createImmutable(0);Debug.locals.put("LineNumber", _linenumber);
 BA.debugLineNum = 731;BA.debugLine="If Graph.ChartType = \"RADAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("RADAR"))) { 
 BA.debugLineNum = 732;BA.debugLine="Values.Left = 5dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));
 BA.debugLineNum = 733;BA.debugLine="Values.Top = 5dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));
 }else {
 BA.debugLineNum = 735;BA.debugLine="Values.Left = Graph.Left + 2dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Left" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1));
 BA.debugLineNum = 736;BA.debugLine="Values.Top = Graph.Top + 2dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Top" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1));
 };
 BA.debugLineNum = 738;BA.debugLine="Values.MaxDigits = 6";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("MaxDigits" /*RemoteObject*/ ,BA.numberCast(int.class, 6));
 BA.debugLineNum = 740;BA.debugLine="LineNumber = Items.Size + 1";
Debug.JustUpdateDeviceLine();
_linenumber = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("LineNumber", _linenumber);
 BA.debugLineNum = 741;BA.debugLine="If Graph.ChartType = \"LINE\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA"))) { 
 BA.debugLineNum = 742;BA.debugLine="Private PD As PointData";
Debug.JustUpdateDeviceLine();
_pd = RemoteObject.createNew ("b4a.example.xchart._pointdata");Debug.locals.put("PD", _pd);
 BA.debugLineNum = 743;BA.debugLine="PD = Points.Get(0)";
Debug.JustUpdateDeviceLine();
_pd = (__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(BA.numberCast(int.class, 0))));Debug.locals.put("PD", _pd);
 BA.debugLineNum = 744;BA.debugLine="If PD.YArray.Length = 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_pd.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),BA.numberCast(double.class, 1))) { 
 BA.debugLineNum = 745;BA.debugLine="If Graph.IncludeMinLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 746;BA.debugLine="LineNumber = LineNumber + 1";
Debug.JustUpdateDeviceLine();
_linenumber = RemoteObject.solve(new RemoteObject[] {_linenumber,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("LineNumber", _linenumber);
 };
 BA.debugLineNum = 748;BA.debugLine="If Graph.IncludeMaxLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 749;BA.debugLine="LineNumber = LineNumber + 1";
Debug.JustUpdateDeviceLine();
_linenumber = RemoteObject.solve(new RemoteObject[] {_linenumber,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("LineNumber", _linenumber);
 };
 BA.debugLineNum = 751;BA.debugLine="If Graph.IncludeMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 752;BA.debugLine="LineNumber = LineNumber + 1";
Debug.JustUpdateDeviceLine();
_linenumber = RemoteObject.solve(new RemoteObject[] {_linenumber,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("LineNumber", _linenumber);
 };
 };
 }else 
{ BA.debugLineNum = 755;BA.debugLine="Else If	Graph.ChartType = \"CANDLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"))) { 
 BA.debugLineNum = 756;BA.debugLine="LineNumber = 5";
Debug.JustUpdateDeviceLine();
_linenumber = BA.numberCast(int.class, 5);Debug.locals.put("LineNumber", _linenumber);
 BA.debugLineNum = 757;BA.debugLine="If Bar.CandleDisplayVolume = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 758;BA.debugLine="LineNumber = LineNumber + 1";
Debug.JustUpdateDeviceLine();
_linenumber = RemoteObject.solve(new RemoteObject[] {_linenumber,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("LineNumber", _linenumber);
 };
 }else 
{ BA.debugLineNum = 760;BA.debugLine="Else If	Graph.ChartType = \"WATERFALL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("WATERFALL"))) { 
 BA.debugLineNum = 761;BA.debugLine="LineNumber = 3";
Debug.JustUpdateDeviceLine();
_linenumber = BA.numberCast(int.class, 3);Debug.locals.put("LineNumber", _linenumber);
 }}}
;
 BA.debugLineNum = 764;BA.debugLine="Values.Height = Values.TextHeight * 1.3 * (LineNu";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.3),(RemoteObject.solve(new RemoteObject[] {_linenumber,RemoteObject.createImmutable(0.3)}, "+",1, 0))}, "**",0, 0)));
 BA.debugLineNum = 766;BA.debugLine="Private ItemWidth As Int";
Debug.JustUpdateDeviceLine();
_itemwidth = RemoteObject.createImmutable(0);Debug.locals.put("ItemWidth", _itemwidth);
 BA.debugLineNum = 767;BA.debugLine="Private txtX As String";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.createImmutable("");Debug.locals.put("txtX", _txtx);
 BA.debugLineNum = 768;BA.debugLine="If Graph.XAxisName = \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 769;BA.debugLine="txtX = \"x = \"";
Debug.JustUpdateDeviceLine();
_txtx = BA.ObjectToString("x = ");Debug.locals.put("txtX", _txtx);
 }else {
 BA.debugLineNum = 771;BA.debugLine="txtX = Graph.XAxisName & \" = \"";
Debug.JustUpdateDeviceLine();
_txtx = RemoteObject.concat(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ ),RemoteObject.createImmutable(" = "));Debug.locals.put("txtX", _txtx);
 };
 BA.debugLineNum = 773;BA.debugLine="ItemWidth = MeasureTextWidth(txtX, Values.TextFon";
Debug.JustUpdateDeviceLine();
_itemwidth = __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txtx),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )));Debug.locals.put("ItemWidth", _itemwidth);
 BA.debugLineNum = 774;BA.debugLine="For Each Item As ItemData In Items";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group43 = __ref.getField(false,"_items" /*RemoteObject*/ );
final int groupLen43 = group43.runMethod(true,"getSize").<Integer>get()
;int index43 = 0;
;
for (; index43 < groupLen43;index43++){
_item = (group43.runMethod(false,"Get",index43));Debug.locals.put("Item", _item);
Debug.locals.put("Item", _item);
 BA.debugLineNum = 775;BA.debugLine="Private txt As String = Item.Name & \" = \"";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_item.getField(true,"Name" /*RemoteObject*/ ),RemoteObject.createImmutable(" = "));Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 776;BA.debugLine="ItemWidth = Max(ItemWidth, MeasureTextWidth(txt,";
Debug.JustUpdateDeviceLine();
_itemwidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _itemwidth)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("ItemWidth", _itemwidth);
 }
}Debug.locals.put("Item", _item);
;
 BA.debugLineNum = 778;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"))) {
case 0: {
 BA.debugLineNum = 780;BA.debugLine="ItemWidth = Max(ItemWidth, MeasureTextWidth(\"Op";
Debug.JustUpdateDeviceLine();
_itemwidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _itemwidth)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Open = ")),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("ItemWidth", _itemwidth);
 BA.debugLineNum = 781;BA.debugLine="If Bar.CandleDisplayVolume = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 782;BA.debugLine="ItemWidth = Max(ItemWidth, MeasureTextWidth(\"V";
Debug.JustUpdateDeviceLine();
_itemwidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _itemwidth)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Volume = ")),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("ItemWidth", _itemwidth);
 };
 break; }
case 1: {
 BA.debugLineNum = 785;BA.debugLine="ItemWidth = Max(ItemWidth, MeasureTextWidth(\"Va";
Debug.JustUpdateDeviceLine();
_itemwidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _itemwidth)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Value = ")),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("ItemWidth", _itemwidth);
 break; }
}
;
 BA.debugLineNum = 787;BA.debugLine="If Graph.ChartType.Contains(\"STACKED\") Then";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"contains",(Object)(RemoteObject.createImmutable("STACKED"))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 788;BA.debugLine="ItemWidth = Max(ItemWidth, MeasureTextWidth(\"Tot";
Debug.JustUpdateDeviceLine();
_itemwidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _itemwidth)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(BA.ObjectToString("Total = ")),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("ItemWidth", _itemwidth);
 BA.debugLineNum = 789;BA.debugLine="Values.Height = Values.TextHeight * 1.3 * (Items";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Height" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.3),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(2.3)}, "+",1, 0))}, "**",0, 0)));
 };
 BA.debugLineNum = 791;BA.debugLine="ItemWidth = ItemWidth + 1.8 * Values.TextHeight";
Debug.JustUpdateDeviceLine();
_itemwidth = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_itemwidth,RemoteObject.createImmutable(1.8),__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "+*",1, 0));Debug.locals.put("ItemWidth", _itemwidth);
 BA.debugLineNum = 792;BA.debugLine="Values.MidPont = ItemWidth - 0.9 * Values.TextHei";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("MidPont" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_itemwidth,RemoteObject.createImmutable(0.9),__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "-*",1, 0)));
 BA.debugLineNum = 794;BA.debugLine="Private ValueWidth As Int";
Debug.JustUpdateDeviceLine();
_valuewidth = RemoteObject.createImmutable(0);Debug.locals.put("ValueWidth", _valuewidth);
 BA.debugLineNum = 795;BA.debugLine="For Each pnt As PointData In Points";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group63 = __ref.getField(false,"_points" /*RemoteObject*/ );
final int groupLen63 = group63.runMethod(true,"getSize").<Integer>get()
;int index63 = 0;
;
for (; index63 < groupLen63;index63++){
_pnt = (group63.runMethod(false,"Get",index63));Debug.locals.put("pnt", _pnt);
Debug.locals.put("pnt", _pnt);
 BA.debugLineNum = 796;BA.debugLine="txt = pnt.X";
Debug.JustUpdateDeviceLine();
_txt = _pnt.getField(true,"X" /*RemoteObject*/ );Debug.locals.put("txt", _txt);
 BA.debugLineNum = 797;BA.debugLine="ValueWidth = Max(ValueWidth, MeasureTextWidth(tx";
Debug.JustUpdateDeviceLine();
_valuewidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _valuewidth)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("ValueWidth", _valuewidth);
 BA.debugLineNum = 798;BA.debugLine="For i = 0 To pnt.YArray.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step66 = 1;
final int limit66 = RemoteObject.solve(new RemoteObject[] {_pnt.getField(false,"YArray" /*RemoteObject*/ ).getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = BA.numberCast(int.class, 0) ;
for (;(step66 > 0 && _i.<Integer>get().intValue() <= limit66) || (step66 < 0 && _i.<Integer>get().intValue() >= limit66) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step66))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 799;BA.debugLine="txt = NumberFormat3(pnt.YArray(i), Values.MaxDi";
Debug.JustUpdateDeviceLine();
_txt = __ref.runClassMethod (b4a.example.xchart.class, "_numberformat3" /*RemoteObject*/ ,(Object)(_pnt.getField(false,"YArray" /*RemoteObject*/ ).getArrayElement(true,_i)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MaxDigits" /*RemoteObject*/ )));Debug.locals.put("txt", _txt);
 BA.debugLineNum = 800;BA.debugLine="ValueWidth = Max(ValueWidth, MeasureTextWidth(t";
Debug.JustUpdateDeviceLine();
_valuewidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _valuewidth)),(Object)(BA.numberCast(double.class, __ref.runClassMethod (b4a.example.xchart.class, "_measuretextwidth" /*RemoteObject*/ ,(Object)(_txt),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )))))));Debug.locals.put("ValueWidth", _valuewidth);
 }
}Debug.locals.put("i", _i);
;
 }
}Debug.locals.put("pnt", _pnt);
;
 BA.debugLineNum = 804;BA.debugLine="Values.Width = ItemWidth + ValueWidth + 0.05 * Va";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Width" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_itemwidth,_valuewidth,RemoteObject.createImmutable(0.05),__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "++*",2, 0)));
 BA.debugLineNum = 805;BA.debugLine="If Graph.ChartType = \"RADAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("RADAR"))) { 
 BA.debugLineNum = 806;BA.debugLine="Values.rectCursor.Initialize(0, 0, xpnlCursor.Wi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 }else {
 BA.debugLineNum = 808;BA.debugLine="Values.rectCursor.Initialize(0, 0, 5dip, xpnlCur";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 };
 BA.debugLineNum = 810;BA.debugLine="Values.rectValues.Initialize(Values.MidPont, 0, V";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectValues" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MidPont" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ))));
 BA.debugLineNum = 811;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Or Graph.ChartTyp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 812;BA.debugLine="xpnlValues.Left = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",BA.numberCast(int.class, 0));
 BA.debugLineNum = 813;BA.debugLine="xpnlValues.Top = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setTop",BA.numberCast(int.class, 0));
 BA.debugLineNum = 814;BA.debugLine="xpnlValues.Width = xpnlGraph.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setWidth",__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"));
 BA.debugLineNum = 815;BA.debugLine="xpnlValues.Height = xpnlGraph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 816;BA.debugLine="xcvsValues.Resize(xpnlGraph.Width, xpnlGraph.Hei";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 }else {
 BA.debugLineNum = 818;BA.debugLine="xpnlValues.Left = Values.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ));
 BA.debugLineNum = 819;BA.debugLine="xpnlValues.Top = Values.Top";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setTop",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ));
 BA.debugLineNum = 820;BA.debugLine="xpnlValues.Width = Values.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setWidth",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ));
 BA.debugLineNum = 821;BA.debugLine="If Values.Position = \"TOP_RIGHT\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Position" /*RemoteObject*/ ),BA.ObjectToString("TOP_RIGHT"))) { 
 BA.debugLineNum = 822;BA.debugLine="xpnlValues.Left = xpnlGraph.Width - Values.Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "---",3, 1));
 };
 BA.debugLineNum = 824;BA.debugLine="xpnlValues.Height = Values.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ));
 BA.debugLineNum = 825;BA.debugLine="xcvsValues.Resize(Values.Width, Values.Height)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ))));
 BA.debugLineNum = 827;BA.debugLine="r.Initialize(0, 0, Values.Width, Values.Height)";
Debug.JustUpdateDeviceLine();
_r.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Height" /*RemoteObject*/ ))));
 BA.debugLineNum = 828;BA.debugLine="xcvsValues.ClearRect(r)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(_r));
 BA.debugLineNum = 829;BA.debugLine="xcvsValues.DrawRect(r, Values.BackgroundColor, T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_r),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"BackgroundColor" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, 0)));
 BA.debugLineNum = 831;BA.debugLine="Private h, i, x, y As Int";
Debug.JustUpdateDeviceLine();
_h = RemoteObject.createImmutable(0);Debug.locals.put("h", _h);
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
_x = RemoteObject.createImmutable(0);Debug.locals.put("x", _x);
_y = RemoteObject.createImmutable(0);Debug.locals.put("y", _y);
 BA.debugLineNum = 832;BA.debugLine="h = Values.TextHeight * 1.3";
Debug.JustUpdateDeviceLine();
_h = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ ),RemoteObject.createImmutable(1.3)}, "*",0, 0));Debug.locals.put("h", _h);
 BA.debugLineNum = 833;BA.debugLine="x = Values.MidPont";
Debug.JustUpdateDeviceLine();
_x = __ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"MidPont" /*RemoteObject*/ );Debug.locals.put("x", _x);
 BA.debugLineNum = 834;BA.debugLine="y = 1.2 * Values.TextHeight";
Debug.JustUpdateDeviceLine();
_y = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(1.2),__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextHeight" /*RemoteObject*/ )}, "*",0, 0));Debug.locals.put("y", _y);
 BA.debugLineNum = 835;BA.debugLine="If Graph.XAxisName = \"\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"XAxisName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 836;BA.debugLine="xcvsValues.DrawText(txtX, x, y + 0.2 * h, Value";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txtx),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 }else {
 BA.debugLineNum = 838;BA.debugLine="xcvsValues.DrawText(txtX, x, y + 0.2 * h, Value";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txtx),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 };
 BA.debugLineNum = 840;BA.debugLine="i = 1";
Debug.JustUpdateDeviceLine();
_i = BA.numberCast(int.class, 1);Debug.locals.put("i", _i);
 BA.debugLineNum = 841;BA.debugLine="Private top As Int";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.createImmutable(0);Debug.locals.put("top", _top);
 BA.debugLineNum = 842;BA.debugLine="If Graph.ChartType = \"CANDLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE"))) { 
 BA.debugLineNum = 844;BA.debugLine="top = y + 1.2 * h";
Debug.JustUpdateDeviceLine();
_top = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.2),_h}, "+*",1, 0));Debug.locals.put("top", _top);
 BA.debugLineNum = 845;BA.debugLine="xcvsValues.DrawText(\"Open = \", x, top, Values.T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("Open = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 846;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 847;BA.debugLine="xcvsValues.DrawText(\"High = \", x, top, Values.T";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("High = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 848;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 849;BA.debugLine="xcvsValues.DrawText(\"Low = \", x, top, Values.Te";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("Low = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 850;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 851;BA.debugLine="xcvsValues.DrawText(\"Close = \", x, top, Values.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("Close = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 852;BA.debugLine="If Bar.CandleDisplayVolume = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_bar" /*RemoteObject*/ ).getField(true,"CandleDisplayVolume" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 853;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 854;BA.debugLine="xcvsValues.DrawText(\"Volume = \", x, top, Value";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("Volume = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 };
 }else 
{ BA.debugLineNum = 856;BA.debugLine="Else If Graph.ChartType = \"WATERFALL\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("WATERFALL"))) { 
 BA.debugLineNum = 857;BA.debugLine="top = y + 1.2 * h";
Debug.JustUpdateDeviceLine();
_top = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_y,RemoteObject.createImmutable(1.2),_h}, "+*",1, 0));Debug.locals.put("top", _top);
 BA.debugLineNum = 858;BA.debugLine="xcvsValues.DrawText(\"Value = \", x, top, Values.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("Value = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 859;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 860;BA.debugLine="xcvsValues.DrawText(\"Total = \", x, top, Values.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("Total = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, _top)),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_xui" /*RemoteObject*/ ).getField(true,"Color_Black")),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 }else {
 BA.debugLineNum = 862;BA.debugLine="For Each Item As ItemData In Items";
Debug.JustUpdateDeviceLine();
{
final RemoteObject group126 = __ref.getField(false,"_items" /*RemoteObject*/ );
final int groupLen126 = group126.runMethod(true,"getSize").<Integer>get()
;int index126 = 0;
;
for (; index126 < groupLen126;index126++){
_item = (group126.runMethod(false,"Get",index126));Debug.locals.put("Item", _item);
Debug.locals.put("Item", _item);
 BA.debugLineNum = 863;BA.debugLine="top = y + h * i";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_y,_h,_i}, "+*",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 864;BA.debugLine="Private txt As String = Item.Name & \" = \"";
Debug.JustUpdateDeviceLine();
_txt = RemoteObject.concat(_item.getField(true,"Name" /*RemoteObject*/ ),RemoteObject.createImmutable(" = "));Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 865;BA.debugLine="xcvsValues.DrawText(txt, x, top + 0.2 * h, Val";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(_item.getField(true,"Color" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 BA.debugLineNum = 866;BA.debugLine="i = i + 1";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.solve(new RemoteObject[] {_i,RemoteObject.createImmutable(1)}, "+",1, 1);Debug.locals.put("i", _i);
 }
}Debug.locals.put("Item", _item);
;
 }}
;
 };
 BA.debugLineNum = 871;BA.debugLine="If Graph.ChartType = \"LINE\" Or Graph.ChartType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("H_LINE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("AREA")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("STACKED_AREA"))) { 
 BA.debugLineNum = 872;BA.debugLine="If  Graph.IncludeMaxLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMaxLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 873;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 874;BA.debugLine="xcvsValues.DrawText(\"max = \", x, top + 0.2 * h,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("max = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MaxLineColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 };
 BA.debugLineNum = 876;BA.debugLine="If  Graph.IncludeMeanLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMeanLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 877;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 878;BA.debugLine="xcvsValues.DrawText(\"mean = \", x, top + 0.2 * h";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("mean = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MeanLineColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 };
 BA.debugLineNum = 880;BA.debugLine="If  Graph.IncludeMinLine = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"IncludeMinLine" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 881;BA.debugLine="top = top + h";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_top,_h}, "+",1, 1);Debug.locals.put("top", _top);
 BA.debugLineNum = 882;BA.debugLine="xcvsValues.DrawText(\"min = \", x, top + 0.2 * h,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(BA.ObjectToString("min = ")),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"MinLineColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 };
 };
 BA.debugLineNum = 886;BA.debugLine="If Graph.ChartType.Contains(\"STACKED\") Then";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"contains",(Object)(RemoteObject.createImmutable("STACKED"))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 887;BA.debugLine="Private top As Int = y + h * i";
Debug.JustUpdateDeviceLine();
_top = RemoteObject.solve(new RemoteObject[] {_y,_h,_i}, "+*",1, 1);Debug.locals.put("top", _top);Debug.locals.put("top", _top);
 BA.debugLineNum = 888;BA.debugLine="Private txt As String = \"Total = \"";
Debug.JustUpdateDeviceLine();
_txt = BA.ObjectToString("Total = ");Debug.locals.put("txt", _txt);Debug.locals.put("txt", _txt);
 BA.debugLineNum = 889;BA.debugLine="xcvsValues.DrawText(txt, x, top + 0.2 * h, Value";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("DrawText",__ref.getField(false, "ba"),(Object)(_txt),(Object)(BA.numberCast(float.class, _x)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_top,RemoteObject.createImmutable(0.2),_h}, "+*",1, 0))),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"TextFont" /*RemoteObject*/ )),(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextColor" /*RemoteObject*/ )),(Object)(BA.getEnumFromString(BA.getDeviceClass("android.graphics.Paint.Align"),RemoteObject.createImmutable("RIGHT"))));
 };
 BA.debugLineNum = 892;BA.debugLine="xpnlValues.BringToFront";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runVoidMethod ("BringToFront");
 BA.debugLineNum = 893;BA.debugLine="xcvsValues.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsvalues" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 894;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _jumpto(RemoteObject __ref,RemoteObject _index) throws Exception{
try {
		Debug.PushSubsStack("JumpTo (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9002);
if (RapidSub.canDelegate("jumpto")) { return __ref.runUserSub(false, "xchart","jumpto", __ref, _index);}
Debug.locals.put("Index", _index);
 BA.debugLineNum = 9002;BA.debugLine="Public Sub JumpTo(Index As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9003;BA.debugLine="If Zoom.Active = True And Index <> Zoom.BeginInde";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Active" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("!",_index,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 9004;BA.debugLine="If Index <= 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",_index,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 9005;BA.debugLine="Zoom.BeginIndex = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 9006;BA.debugLine="Zoom.BeginIndex = Index";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,_index);
 }else 
{ BA.debugLineNum = 9007;BA.debugLine="Else If Index + Zoom.NbVisiblePoints > Points.Si";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {_index,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "+",1, 1),BA.numberCast(double.class, __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize")))) { 
 BA.debugLineNum = 9008;BA.debugLine="Zoom.BeginIndex = Points.Size - Zoom.NbVisibleP";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "-",1, 1));
 }else {
 BA.debugLineNum = 9010;BA.debugLine="Zoom.BeginIndex = Index";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,_index);
 }}
;
 BA.debugLineNum = 9012;BA.debugLine="Zoom.EndIndex = Zoom.BeginIndex + Zoom.NbVisible";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+-",2, 1));
 BA.debugLineNum = 9013;BA.debugLine="If Items.Size > 0 Or Graph.ChartType = \"CANDLE\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_items" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("CANDLE")) && RemoteObject.solveBoolean(">",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 9014;BA.debugLine="DrawChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawchart" /*RemoteObject*/ );
 };
 };
 BA.debugLineNum = 9017;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _measuretextheight(RemoteObject __ref,RemoteObject _text,RemoteObject _font1) throws Exception{
try {
		Debug.PushSubsStack("MeasureTextHeight (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6954);
if (RapidSub.canDelegate("measuretextheight")) { return __ref.runUserSub(false, "xchart","measuretextheight", __ref, _text, _font1);}
RemoteObject _rct = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
Debug.locals.put("Text", _text);
Debug.locals.put("Font1", _font1);
 BA.debugLineNum = 6954;BA.debugLine="Private Sub MeasureTextHeight(Text As String, Font";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6955;BA.debugLine="Private rct As B4XRect";
Debug.JustUpdateDeviceLine();
_rct = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rct", _rct);
 BA.debugLineNum = 6956;BA.debugLine="rct = xcvsCursor.MeasureText(Text, Font1)";
Debug.JustUpdateDeviceLine();
_rct = __ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_text),(Object)(_font1));Debug.locals.put("rct", _rct);
 BA.debugLineNum = 6958;BA.debugLine="Return rct.Height";
Debug.JustUpdateDeviceLine();
if (true) return BA.numberCast(int.class, _rct.runMethod(true,"getHeight"));
 BA.debugLineNum = 6959;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _measuretextwidth(RemoteObject __ref,RemoteObject _text,RemoteObject _font1) throws Exception{
try {
		Debug.PushSubsStack("MeasureTextWidth (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6948);
if (RapidSub.canDelegate("measuretextwidth")) { return __ref.runUserSub(false, "xchart","measuretextwidth", __ref, _text, _font1);}
RemoteObject _rct = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
Debug.locals.put("Text", _text);
Debug.locals.put("Font1", _font1);
 BA.debugLineNum = 6948;BA.debugLine="Private Sub MeasureTextWidth(Text As String, Font1";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6949;BA.debugLine="Private rct As B4XRect";
Debug.JustUpdateDeviceLine();
_rct = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rct", _rct);
 BA.debugLineNum = 6950;BA.debugLine="rct = xcvsCursor.MeasureText(Text, Font1)";
Debug.JustUpdateDeviceLine();
_rct = __ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"MeasureText",(Object)(_text),(Object)(_font1));Debug.locals.put("rct", _rct);
 BA.debugLineNum = 6951;BA.debugLine="Return rct.Width";
Debug.JustUpdateDeviceLine();
if (true) return BA.numberCast(int.class, _rct.runMethod(true,"getWidth"));
 BA.debugLineNum = 6952;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable(0);
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _numberformat3(RemoteObject __ref,RemoteObject _number,RemoteObject _maxdigits) throws Exception{
try {
		Debug.PushSubsStack("NumberFormat3 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7134);
if (RapidSub.canDelegate("numberformat3")) { return __ref.runUserSub(false, "xchart","numberformat3", __ref, _number, _maxdigits);}
RemoteObject _mant = RemoteObject.createImmutable(0);
RemoteObject _exp = RemoteObject.createImmutable(0);
RemoteObject _lng = RemoteObject.createImmutable(0);
RemoteObject _lng2 = RemoteObject.createImmutable(0);
RemoteObject _str = RemoteObject.createImmutable("");
RemoteObject _strminus = RemoteObject.createImmutable("");
Debug.locals.put("Number", _number);
Debug.locals.put("MaxDigits", _maxdigits);
 BA.debugLineNum = 7134;BA.debugLine="Public Sub NumberFormat3(Number As Double, MaxDigi";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7135;BA.debugLine="Private mant, exp, lng, lng2 As Double";
Debug.JustUpdateDeviceLine();
_mant = RemoteObject.createImmutable(0);Debug.locals.put("mant", _mant);
_exp = RemoteObject.createImmutable(0);Debug.locals.put("exp", _exp);
_lng = RemoteObject.createImmutable(0);Debug.locals.put("lng", _lng);
_lng2 = RemoteObject.createImmutable(0);Debug.locals.put("lng2", _lng2);
 BA.debugLineNum = 7136;BA.debugLine="Private str, strMinus As String";
Debug.JustUpdateDeviceLine();
_str = RemoteObject.createImmutable("");Debug.locals.put("str", _str);
_strminus = RemoteObject.createImmutable("");Debug.locals.put("strMinus", _strminus);
 BA.debugLineNum = 7138;BA.debugLine="If Abs(Number) < 1e-11 Then Return \"0\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 1e-11))) { 
if (true) return BA.ObjectToString("0");};
 BA.debugLineNum = 7140;BA.debugLine="If Number < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_number,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 7141;BA.debugLine="strMinus = \"-\"";
Debug.JustUpdateDeviceLine();
_strminus = BA.ObjectToString("-");Debug.locals.put("strMinus", _strminus);
 }else {
 BA.debugLineNum = 7143;BA.debugLine="strMinus = \"\"";
Debug.JustUpdateDeviceLine();
_strminus = BA.ObjectToString("");Debug.locals.put("strMinus", _strminus);
 };
 BA.debugLineNum = 7145;BA.debugLine="lng = Logarithm(Abs(Number), 10)";
Debug.JustUpdateDeviceLine();
_lng = xchart.__c.runMethod(true,"Logarithm",(Object)(xchart.__c.runMethod(true,"Abs",(Object)(_number))),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("lng", _lng);
 BA.debugLineNum = 7146;BA.debugLine="exp = Floor(lng)";
Debug.JustUpdateDeviceLine();
_exp = xchart.__c.runMethod(true,"Floor",(Object)(_lng));Debug.locals.put("exp", _exp);
 BA.debugLineNum = 7147;BA.debugLine="If exp < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_exp,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 7148;BA.debugLine="lng2 = Floor(lng)";
Debug.JustUpdateDeviceLine();
_lng2 = xchart.__c.runMethod(true,"Floor",(Object)(_lng));Debug.locals.put("lng2", _lng2);
 BA.debugLineNum = 7149;BA.debugLine="lng = -lng2 + lng";
Debug.JustUpdateDeviceLine();
_lng = BA.numberCast(double.class, -_lng2.<Double>get().doubleValue()+_lng.<Double>get().doubleValue());Debug.locals.put("lng", _lng);
 }else {
 BA.debugLineNum = 7151;BA.debugLine="lng = lng - exp";
Debug.JustUpdateDeviceLine();
_lng = RemoteObject.solve(new RemoteObject[] {_lng,_exp}, "-",1, 0);Debug.locals.put("lng", _lng);
 };
 BA.debugLineNum = 7154;BA.debugLine="If exp < MaxDigits And exp > -5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_exp,BA.numberCast(double.class, _maxdigits)) && RemoteObject.solveBoolean(">",_exp,BA.numberCast(double.class, -(double) (0 + 5)))) { 
 BA.debugLineNum = 7155;BA.debugLine="str = NumberFormat2(Number, 1, MaxDigits - 1 - e";
Debug.JustUpdateDeviceLine();
_str = xchart.__c.runMethod(true,"NumberFormat2",(Object)(_number),(Object)(BA.numberCast(int.class, 1)),(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_maxdigits,RemoteObject.createImmutable(1),_exp}, "--",2, 0))),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.getField(true,"False")));Debug.locals.put("str", _str);
 }else 
{ BA.debugLineNum = 7156;BA.debugLine="Else If exp <= -5 And exp > -7 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",_exp,BA.numberCast(double.class, -(double) (0 + 5))) && RemoteObject.solveBoolean(">",_exp,BA.numberCast(double.class, -(double) (0 + 7)))) { 
 BA.debugLineNum = 7157;BA.debugLine="str = NumberFormat2(Number, 1, 9, 0, False)";
Debug.JustUpdateDeviceLine();
_str = xchart.__c.runMethod(true,"NumberFormat2",(Object)(_number),(Object)(BA.numberCast(int.class, 1)),(Object)(BA.numberCast(int.class, 9)),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.getField(true,"False")));Debug.locals.put("str", _str);
 }else {
 BA.debugLineNum = 7159;BA.debugLine="mant = Power(10, lng)";
Debug.JustUpdateDeviceLine();
_mant = xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(_lng));Debug.locals.put("mant", _mant);
 BA.debugLineNum = 7160;BA.debugLine="str = strMinus & NumberFormat2(mant, 1, MaxDigit";
Debug.JustUpdateDeviceLine();
_str = RemoteObject.concat(_strminus,xchart.__c.runMethod(true,"NumberFormat2",(Object)(_mant),(Object)(BA.numberCast(int.class, 1)),(Object)(RemoteObject.solve(new RemoteObject[] {_maxdigits,RemoteObject.createImmutable(1)}, "-",1, 1)),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.getField(true,"False"))));Debug.locals.put("str", _str);
 BA.debugLineNum = 7161;BA.debugLine="str = str & \"E\" & exp";
Debug.JustUpdateDeviceLine();
_str = RemoteObject.concat(_str,RemoteObject.createImmutable("E"),_exp);Debug.locals.put("str", _str);
 }}
;
 BA.debugLineNum = 7164;BA.debugLine="Return str";
Debug.JustUpdateDeviceLine();
if (true) return _str;
 BA.debugLineNum = 7165;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _numberformat4(RemoteObject __ref,RemoteObject _number,RemoteObject _maxdigits,RemoteObject _scientific) throws Exception{
try {
		Debug.PushSubsStack("NumberFormat4 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7171);
if (RapidSub.canDelegate("numberformat4")) { return __ref.runUserSub(false, "xchart","numberformat4", __ref, _number, _maxdigits, _scientific);}
RemoteObject _mant = RemoteObject.createImmutable(0);
RemoteObject _exp = RemoteObject.createImmutable(0);
RemoteObject _lng = RemoteObject.createImmutable(0);
RemoteObject _lng2 = RemoteObject.createImmutable(0);
RemoteObject _str = RemoteObject.createImmutable("");
RemoteObject _strminus = RemoteObject.createImmutable("");
RemoteObject _ext = RemoteObject.createImmutable("");
Debug.locals.put("Number", _number);
Debug.locals.put("MaxDigits", _maxdigits);
Debug.locals.put("Scientific", _scientific);
 BA.debugLineNum = 7171;BA.debugLine="Public Sub NumberFormat4(Number As Double, MaxDigi";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7172;BA.debugLine="Private mant, exp, lng, lng2 As Double";
Debug.JustUpdateDeviceLine();
_mant = RemoteObject.createImmutable(0);Debug.locals.put("mant", _mant);
_exp = RemoteObject.createImmutable(0);Debug.locals.put("exp", _exp);
_lng = RemoteObject.createImmutable(0);Debug.locals.put("lng", _lng);
_lng2 = RemoteObject.createImmutable(0);Debug.locals.put("lng2", _lng2);
 BA.debugLineNum = 7173;BA.debugLine="Private str, strMinus As String";
Debug.JustUpdateDeviceLine();
_str = RemoteObject.createImmutable("");Debug.locals.put("str", _str);
_strminus = RemoteObject.createImmutable("");Debug.locals.put("strMinus", _strminus);
 BA.debugLineNum = 7175;BA.debugLine="If Abs(Number) < 1e-11 Then Return \"0\"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 1e-11))) { 
if (true) return BA.ObjectToString("0");};
 BA.debugLineNum = 7177;BA.debugLine="If Number < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_number,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 7178;BA.debugLine="strMinus = \"-\"";
Debug.JustUpdateDeviceLine();
_strminus = BA.ObjectToString("-");Debug.locals.put("strMinus", _strminus);
 }else {
 BA.debugLineNum = 7180;BA.debugLine="strMinus = \"\"";
Debug.JustUpdateDeviceLine();
_strminus = BA.ObjectToString("");Debug.locals.put("strMinus", _strminus);
 };
 BA.debugLineNum = 7184;BA.debugLine="If Scientific = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_scientific,xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 7185;BA.debugLine="lng = Logarithm(Abs(Number), 10)";
Debug.JustUpdateDeviceLine();
_lng = xchart.__c.runMethod(true,"Logarithm",(Object)(xchart.__c.runMethod(true,"Abs",(Object)(_number))),(Object)(BA.numberCast(double.class, 10)));Debug.locals.put("lng", _lng);
 BA.debugLineNum = 7186;BA.debugLine="exp = Floor(lng)";
Debug.JustUpdateDeviceLine();
_exp = xchart.__c.runMethod(true,"Floor",(Object)(_lng));Debug.locals.put("exp", _exp);
 BA.debugLineNum = 7187;BA.debugLine="If exp < 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_exp,BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 7188;BA.debugLine="lng2 = Floor(lng)";
Debug.JustUpdateDeviceLine();
_lng2 = xchart.__c.runMethod(true,"Floor",(Object)(_lng));Debug.locals.put("lng2", _lng2);
 BA.debugLineNum = 7189;BA.debugLine="lng = -lng2 + lng";
Debug.JustUpdateDeviceLine();
_lng = BA.numberCast(double.class, -_lng2.<Double>get().doubleValue()+_lng.<Double>get().doubleValue());Debug.locals.put("lng", _lng);
 }else {
 BA.debugLineNum = 7191;BA.debugLine="lng = lng - exp";
Debug.JustUpdateDeviceLine();
_lng = RemoteObject.solve(new RemoteObject[] {_lng,_exp}, "-",1, 0);Debug.locals.put("lng", _lng);
 };
 BA.debugLineNum = 7194;BA.debugLine="If exp < MaxDigits And exp > -5 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("<",_exp,BA.numberCast(double.class, _maxdigits)) && RemoteObject.solveBoolean(">",_exp,BA.numberCast(double.class, -(double) (0 + 5)))) { 
 BA.debugLineNum = 7195;BA.debugLine="str = NumberFormat2(Number, 1, MaxDigits - 1 -";
Debug.JustUpdateDeviceLine();
_str = xchart.__c.runMethod(true,"NumberFormat2",(Object)(_number),(Object)(BA.numberCast(int.class, 1)),(Object)(BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_maxdigits,RemoteObject.createImmutable(1),_exp}, "--",2, 0))),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.getField(true,"False")));Debug.locals.put("str", _str);
 }else 
{ BA.debugLineNum = 7196;BA.debugLine="Else If exp <= -5 And exp > -7 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",_exp,BA.numberCast(double.class, -(double) (0 + 5))) && RemoteObject.solveBoolean(">",_exp,BA.numberCast(double.class, -(double) (0 + 7)))) { 
 BA.debugLineNum = 7197;BA.debugLine="str = NumberFormat2(Number, 1, 9, 0, False)";
Debug.JustUpdateDeviceLine();
_str = xchart.__c.runMethod(true,"NumberFormat2",(Object)(_number),(Object)(BA.numberCast(int.class, 1)),(Object)(BA.numberCast(int.class, 9)),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.getField(true,"False")));Debug.locals.put("str", _str);
 }else {
 BA.debugLineNum = 7199;BA.debugLine="mant = Power(10, lng)";
Debug.JustUpdateDeviceLine();
_mant = xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(_lng));Debug.locals.put("mant", _mant);
 BA.debugLineNum = 7200;BA.debugLine="str = strMinus & NumberFormat2(mant, 1, MaxDigi";
Debug.JustUpdateDeviceLine();
_str = RemoteObject.concat(_strminus,xchart.__c.runMethod(true,"NumberFormat2",(Object)(_mant),(Object)(BA.numberCast(int.class, 1)),(Object)(RemoteObject.solve(new RemoteObject[] {_maxdigits,RemoteObject.createImmutable(1)}, "-",1, 1)),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.getField(true,"False"))));Debug.locals.put("str", _str);
 BA.debugLineNum = 7201;BA.debugLine="str = str & \"E\" & exp";
Debug.JustUpdateDeviceLine();
_str = RemoteObject.concat(_str,RemoteObject.createImmutable("E"),_exp);Debug.locals.put("str", _str);
 }}
;
 }else {
 BA.debugLineNum = 7204;BA.debugLine="Private ext As String";
Debug.JustUpdateDeviceLine();
_ext = RemoteObject.createImmutable("");Debug.locals.put("ext", _ext);
 BA.debugLineNum = 7205;BA.debugLine="If Abs(Number) >= 1000000000 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 1000000000))) { 
 BA.debugLineNum = 7206;BA.debugLine="Number = Number / 1000000000";
Debug.JustUpdateDeviceLine();
_number = RemoteObject.solve(new RemoteObject[] {_number,RemoteObject.createImmutable(1000000000)}, "/",0, 0);Debug.locals.put("Number", _number);
 BA.debugLineNum = 7207;BA.debugLine="ext = \"G\"";
Debug.JustUpdateDeviceLine();
_ext = BA.ObjectToString("G");Debug.locals.put("ext", _ext);
 }else 
{ BA.debugLineNum = 7208;BA.debugLine="Else If Abs(Number) >= 1000000 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 1000000))) { 
 BA.debugLineNum = 7209;BA.debugLine="Number = Number / 1000000";
Debug.JustUpdateDeviceLine();
_number = RemoteObject.solve(new RemoteObject[] {_number,RemoteObject.createImmutable(1000000)}, "/",0, 0);Debug.locals.put("Number", _number);
 BA.debugLineNum = 7210;BA.debugLine="ext = \"M\"";
Debug.JustUpdateDeviceLine();
_ext = BA.ObjectToString("M");Debug.locals.put("ext", _ext);
 }else 
{ BA.debugLineNum = 7211;BA.debugLine="Else If Abs(Number) >= 1000 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 1000))) { 
 BA.debugLineNum = 7212;BA.debugLine="Number = Number / 1000";
Debug.JustUpdateDeviceLine();
_number = RemoteObject.solve(new RemoteObject[] {_number,RemoteObject.createImmutable(1000)}, "/",0, 0);Debug.locals.put("Number", _number);
 BA.debugLineNum = 7213;BA.debugLine="ext = \"K\"";
Debug.JustUpdateDeviceLine();
_ext = BA.ObjectToString("K");Debug.locals.put("ext", _ext);
 }else 
{ BA.debugLineNum = 7214;BA.debugLine="Else If Abs(Number) <= 0.000000001 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 0.000000001))) { 
 BA.debugLineNum = 7215;BA.debugLine="ext = \"n\"";
Debug.JustUpdateDeviceLine();
_ext = BA.ObjectToString("n");Debug.locals.put("ext", _ext);
 BA.debugLineNum = 7216;BA.debugLine="Number = Number * 1000000000000";
Debug.JustUpdateDeviceLine();
_number = RemoteObject.solve(new RemoteObject[] {_number,RemoteObject.createImmutable(1000000000000L)}, "*",0, 0);Debug.locals.put("Number", _number);
 }else 
{ BA.debugLineNum = 7217;BA.debugLine="Else If Abs(Number) <= 0.000001 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 0.000001))) { 
 BA.debugLineNum = 7218;BA.debugLine="ext = \"μ\"";
Debug.JustUpdateDeviceLine();
_ext = BA.ObjectToString("μ");Debug.locals.put("ext", _ext);
 BA.debugLineNum = 7219;BA.debugLine="Number = Number * 1000000000";
Debug.JustUpdateDeviceLine();
_number = RemoteObject.solve(new RemoteObject[] {_number,RemoteObject.createImmutable(1000000000)}, "*",0, 0);Debug.locals.put("Number", _number);
 }else 
{ BA.debugLineNum = 7220;BA.debugLine="Else If Abs(Number) <= 0.001 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("k",xchart.__c.runMethod(true,"Abs",(Object)(_number)),BA.numberCast(double.class, 0.001))) { 
 BA.debugLineNum = 7221;BA.debugLine="ext = \"m\"";
Debug.JustUpdateDeviceLine();
_ext = BA.ObjectToString("m");Debug.locals.put("ext", _ext);
 BA.debugLineNum = 7222;BA.debugLine="Number = Number * 1000000";
Debug.JustUpdateDeviceLine();
_number = RemoteObject.solve(new RemoteObject[] {_number,RemoteObject.createImmutable(1000000)}, "*",0, 0);Debug.locals.put("Number", _number);
 }}}}}}
;
 BA.debugLineNum = 7224;BA.debugLine="str = NumberFormat2(Number, 1, MaxDigits, 0, Fal";
Debug.JustUpdateDeviceLine();
_str = RemoteObject.concat(xchart.__c.runMethod(true,"NumberFormat2",(Object)(_number),(Object)(BA.numberCast(int.class, 1)),(Object)(_maxdigits),(Object)(BA.numberCast(int.class, 0)),(Object)(xchart.__c.getField(true,"False"))),_ext);Debug.locals.put("str", _str);
 };
 BA.debugLineNum = 7226;BA.debugLine="Return str";
Debug.JustUpdateDeviceLine();
if (true) return _str;
 BA.debugLineNum = 7227;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _removehorizontalline(RemoteObject __ref,RemoteObject _value) throws Exception{
try {
		Debug.PushSubsStack("RemoveHorizontalLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,1616);
if (RapidSub.canDelegate("removehorizontalline")) { return __ref.runUserSub(false, "xchart","removehorizontalline", __ref, _value);}
RemoteObject _i = RemoteObject.createImmutable(0);
RemoteObject _hl = RemoteObject.declareNull("b4a.example.xchart._hline");
Debug.locals.put("Value", _value);
 BA.debugLineNum = 1616;BA.debugLine="Public Sub RemoveHorizontalLine(Value As Double)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 1617;BA.debugLine="Private i As Int";
Debug.JustUpdateDeviceLine();
_i = RemoteObject.createImmutable(0);Debug.locals.put("i", _i);
 BA.debugLineNum = 1619;BA.debugLine="For i = HLines.Size - 1 To 0 Step -1";
Debug.JustUpdateDeviceLine();
{
final int step2 = -1;
final int limit2 = 0;
_i = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1) ;
for (;(step2 > 0 && _i.<Integer>get().intValue() <= limit2) || (step2 < 0 && _i.<Integer>get().intValue() >= limit2) ;_i = RemoteObject.createImmutable((int)(0 + _i.<Integer>get().intValue() + step2))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 1620;BA.debugLine="Private HL As HLine";
Debug.JustUpdateDeviceLine();
_hl = RemoteObject.createNew ("b4a.example.xchart._hline");Debug.locals.put("HL", _hl);
 BA.debugLineNum = 1621;BA.debugLine="HL = HLines.Get(i)";
Debug.JustUpdateDeviceLine();
_hl = (__ref.getField(false,"_hlines" /*RemoteObject*/ ).runMethod(false,"Get",(Object)(_i)));Debug.locals.put("HL", _hl);
 BA.debugLineNum = 1622;BA.debugLine="If HL.Value = Value Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_hl.getField(true,"Value" /*RemoteObject*/ ),_value)) { 
 BA.debugLineNum = 1623;BA.debugLine="HLines.RemoveAt(i)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_hlines" /*RemoteObject*/ ).runVoidMethod ("RemoveAt",(Object)(_i));
 BA.debugLineNum = 1624;BA.debugLine="Exit";
Debug.JustUpdateDeviceLine();
if (true) break;
 };
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 1627;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _removepointdata(RemoteObject __ref,RemoteObject _index) throws Exception{
try {
		Debug.PushSubsStack("RemovePointData (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7966);
if (RapidSub.canDelegate("removepointdata")) { return __ref.runUserSub(false, "xchart","removepointdata", __ref, _index);}
Debug.locals.put("Index", _index);
 BA.debugLineNum = 7966;BA.debugLine="Public Sub RemovePointData(Index As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7967;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Or Graph.ChartTyp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 7968;BA.debugLine="Log(\"This method is not valid for YXChat or Bubb";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","918677762",RemoteObject.createImmutable("This method is not valid for YXChat or Bubble charts"),0);
 }else {
 BA.debugLineNum = 7970;BA.debugLine="Points.RemoveAt(Index)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_points" /*RemoteObject*/ ).runVoidMethod ("RemoveAt",(Object)(_index));
 };
 BA.debugLineNum = 7972;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _scaleloglogvals(RemoteObject __ref,RemoteObject _axis) throws Exception{
try {
		Debug.PushSubsStack("ScaleLogLogVals (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2595);
if (RapidSub.canDelegate("scaleloglogvals")) { return __ref.runUserSub(false, "xchart","scaleloglogvals", __ref, _axis);}
RemoteObject _scales = null;
RemoteObject _vals = null;
RemoteObject _logs = null;
int _i = 0;
Debug.locals.put("Axis", _axis);
 BA.debugLineNum = 2595;BA.debugLine="Private Sub ScaleLogLogVals(Axis As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2596;BA.debugLine="Private Scales() As String";
Debug.JustUpdateDeviceLine();
_scales = RemoteObject.createNewArray ("String", new int[] {0}, new Object[]{});Debug.locals.put("Scales", _scales);
 BA.debugLineNum = 2597;BA.debugLine="Scales = Regex.Split(\"!\", ScaleLog(Axis).ScaleVal";
Debug.JustUpdateDeviceLine();
_scales = xchart.__c.getField(false,"Regex").runMethod(false,"Split",(Object)(BA.ObjectToString("!")),(Object)(__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"ScaleValues" /*RemoteObject*/ )));Debug.locals.put("Scales", _scales);
 BA.debugLineNum = 2598;BA.debugLine="Private Vals(Scales.Length), Logs(Scales.Length)";
Debug.JustUpdateDeviceLine();
_vals = RemoteObject.createNewArray ("double", new int[] {_scales.getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Vals", _vals);
_logs = RemoteObject.createNewArray ("double", new int[] {_scales.getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Logs", _logs);
 BA.debugLineNum = 2599;BA.debugLine="For i = 0 To Scales.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = RemoteObject.solve(new RemoteObject[] {_scales.getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step4 > 0 && _i <= limit4) || (step4 < 0 && _i >= limit4) ;_i = ((int)(0 + _i + step4))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2600;BA.debugLine="Vals(i) = Scales(i)";
Debug.JustUpdateDeviceLine();
_vals.setArrayElement (BA.numberCast(double.class, _scales.getArrayElement(true,BA.numberCast(int.class, _i))),BA.numberCast(int.class, _i));
 BA.debugLineNum = 2601;BA.debugLine="Logs(i) = Logarithm(Vals(i), 10)";
Debug.JustUpdateDeviceLine();
_logs.setArrayElement (xchart.__c.runMethod(true,"Logarithm",(Object)(_vals.getArrayElement(true,BA.numberCast(int.class, _i))),(Object)(BA.numberCast(double.class, 10))),BA.numberCast(int.class, _i));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2603;BA.debugLine="ScaleLog(Axis).Logs = Logs";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Logs" /*RemoteObject*/ ,_logs);
 BA.debugLineNum = 2604;BA.debugLine="ScaleLog(Axis).Vals = Vals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Vals" /*RemoteObject*/ ,_vals);
 BA.debugLineNum = 2605;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _scalelogvals(RemoteObject __ref,RemoteObject _axis) throws Exception{
try {
		Debug.PushSubsStack("ScaleLogVals (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,2582);
if (RapidSub.canDelegate("scalelogvals")) { return __ref.runUserSub(false, "xchart","scalelogvals", __ref, _axis);}
RemoteObject _scales = null;
RemoteObject _vals = null;
RemoteObject _logs = null;
int _i = 0;
Debug.locals.put("Axis", _axis);
 BA.debugLineNum = 2582;BA.debugLine="Private Sub ScaleLogVals(Axis As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 2583;BA.debugLine="Private Scales() As String";
Debug.JustUpdateDeviceLine();
_scales = RemoteObject.createNewArray ("String", new int[] {0}, new Object[]{});Debug.locals.put("Scales", _scales);
 BA.debugLineNum = 2584;BA.debugLine="Scales = Regex.Split(\"!\", Scale(Axis).ScaleValues";
Debug.JustUpdateDeviceLine();
_scales = xchart.__c.getField(false,"Regex").runMethod(false,"Split",(Object)(BA.ObjectToString("!")),(Object)(__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).getField(true,"ScaleValues" /*RemoteObject*/ )));Debug.locals.put("Scales", _scales);
 BA.debugLineNum = 2585;BA.debugLine="Private Vals(Scales.Length), Logs(Scales.Length)";
Debug.JustUpdateDeviceLine();
_vals = RemoteObject.createNewArray ("double", new int[] {_scales.getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Vals", _vals);
_logs = RemoteObject.createNewArray ("double", new int[] {_scales.getField(true,"length").<Integer>get().intValue()}, new Object[]{});Debug.locals.put("Logs", _logs);
 BA.debugLineNum = 2586;BA.debugLine="For i = 0 To Scales.Length - 1";
Debug.JustUpdateDeviceLine();
{
final int step4 = 1;
final int limit4 = RemoteObject.solve(new RemoteObject[] {_scales.getField(true,"length"),RemoteObject.createImmutable(1)}, "-",1, 1).<Integer>get().intValue();
_i = 0 ;
for (;(step4 > 0 && _i <= limit4) || (step4 < 0 && _i >= limit4) ;_i = ((int)(0 + _i + step4))  ) {
Debug.locals.put("i", _i);
 BA.debugLineNum = 2587;BA.debugLine="Vals(i) = Scales(i)";
Debug.JustUpdateDeviceLine();
_vals.setArrayElement (BA.numberCast(double.class, _scales.getArrayElement(true,BA.numberCast(int.class, _i))),BA.numberCast(int.class, _i));
 BA.debugLineNum = 2588;BA.debugLine="Logs(i) = Logarithm(Vals(i), 10)";
Debug.JustUpdateDeviceLine();
_logs.setArrayElement (xchart.__c.runMethod(true,"Logarithm",(Object)(_vals.getArrayElement(true,BA.numberCast(int.class, _i))),(Object)(BA.numberCast(double.class, 10))),BA.numberCast(int.class, _i));
 }
}Debug.locals.put("i", _i);
;
 BA.debugLineNum = 2590;BA.debugLine="ScaleLog(Axis).Logs = Logs";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Logs" /*RemoteObject*/ ,_logs);
 BA.debugLineNum = 2591;BA.debugLine="ScaleLog(Axis).Vals = Vals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ _axis).setField ("Vals" /*RemoteObject*/ ,_vals);
 BA.debugLineNum = 2592;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setareafillalphavalue(RemoteObject __ref,RemoteObject _areafillalphavalue) throws Exception{
try {
		Debug.PushSubsStack("setAreaFillAlphaValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8126);
if (RapidSub.canDelegate("setareafillalphavalue")) { return __ref.runUserSub(false, "xchart","setareafillalphavalue", __ref, _areafillalphavalue);}
Debug.locals.put("AreaFillAlphaValue", _areafillalphavalue);
 BA.debugLineNum = 8126;BA.debugLine="Public Sub setAreaFillAlphaValue(AreaFillAlphaValu";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8127;BA.debugLine="Graph.AreaFillAlphaValue = Max(AreaFillAlphaValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("AreaFillAlphaValue" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _areafillalphavalue)),(Object)(BA.numberCast(double.class, 0)))));
 BA.debugLineNum = 8128;BA.debugLine="Graph.AreaFillAlphaValue = Min(AreaFillAlphaValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("AreaFillAlphaValue" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, _areafillalphavalue)),(Object)(BA.numberCast(double.class, 255)))));
 BA.debugLineNum = 8129;BA.debugLine="Graph.AreaFillAlphaValue = (256 - Graph.AreaFillA";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("AreaFillAlphaValue" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(256),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"AreaFillAlphaValue" /*RemoteObject*/ )}, "-",1, 1)),RemoteObject.createImmutable(16777216)}, "*",0, 1));
 BA.debugLineNum = 8130;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setautomaticscale(RemoteObject __ref,RemoteObject _automaticscale) throws Exception{
try {
		Debug.PushSubsStack("setAutomaticScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7405);
if (RapidSub.canDelegate("setautomaticscale")) { return __ref.runUserSub(false, "xchart","setautomaticscale", __ref, _automaticscale);}
Debug.locals.put("AutomaticScale", _automaticscale);
 BA.debugLineNum = 7405;BA.debugLine="Public Sub setAutomaticScale(AutomaticScale As Boo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7406;BA.debugLine="Scale(sY(0)).Automatic = AutomaticScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Automatic" /*RemoteObject*/ ,_automaticscale);
 BA.debugLineNum = 7407;BA.debugLine="Scale(sY(1)).Automatic = AutomaticScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("Automatic" /*RemoteObject*/ ,_automaticscale);
 BA.debugLineNum = 7408;BA.debugLine="Scale(sY(2)).Automatic = AutomaticScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("Automatic" /*RemoteObject*/ ,_automaticscale);
 BA.debugLineNum = 7409;BA.debugLine="Scale(sY(3)).Automatic = AutomaticScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("Automatic" /*RemoteObject*/ ,_automaticscale);
 BA.debugLineNum = 7410;BA.debugLine="Scale(sX).Automatic = AutomaticScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Automatic" /*RemoteObject*/ ,_automaticscale);
 BA.debugLineNum = 7411;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setautomatictextsizes(RemoteObject __ref,RemoteObject _automatictextsizes) throws Exception{
try {
		Debug.PushSubsStack("setAutomaticTextSizes (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7507);
if (RapidSub.canDelegate("setautomatictextsizes")) { return __ref.runUserSub(false, "xchart","setautomatictextsizes", __ref, _automatictextsizes);}
Debug.locals.put("AutomaticTextSizes", _automatictextsizes);
 BA.debugLineNum = 7507;BA.debugLine="Public Sub setAutomaticTextSizes(AutomaticTextSize";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7508;BA.debugLine="Texts.AutomaticTextSizes = AutomaticTextSizes";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,_automatictextsizes);
 BA.debugLineNum = 7509;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setaxistextcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setAxisTextColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7766);
if (RapidSub.canDelegate("setaxistextcolor")) { return __ref.runUserSub(false, "xchart","setaxistextcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7766;BA.debugLine="Public Sub setAxisTextColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7767;BA.debugLine="Texts.AxisTextColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisTextColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7768;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setaxistextsize(RemoteObject __ref,RemoteObject _axistextsize) throws Exception{
try {
		Debug.PushSubsStack("setAxisTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7529);
if (RapidSub.canDelegate("setaxistextsize")) { return __ref.runUserSub(false, "xchart","setaxistextsize", __ref, _axistextsize);}
Debug.locals.put("AxisTextSize", _axistextsize);
 BA.debugLineNum = 7529;BA.debugLine="Public Sub setAxisTextSize(AxisTextSize As Float)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7530;BA.debugLine="Texts.AxisTextSize = AxisTextSize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisTextSize" /*RemoteObject*/ ,_axistextsize);
 BA.debugLineNum = 7531;BA.debugLine="Texts.AxisFont = xui.CreateDefaultFont(Texts.Axis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AxisFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"AxisTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 7532;BA.debugLine="Texts.AutomaticTextSizes = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7533;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setbarmarginmode(RemoteObject __ref,RemoteObject _barmarginmode) throws Exception{
try {
		Debug.PushSubsStack("setBarMarginMode (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8036);
if (RapidSub.canDelegate("setbarmarginmode")) { return __ref.runUserSub(false, "xchart","setbarmarginmode", __ref, _barmarginmode);}
Debug.locals.put("BarMarginMode", _barmarginmode);
 BA.debugLineNum = 8036;BA.debugLine="Public Sub setBarMarginMode(BarMarginMode As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8037;BA.debugLine="If BarMarginMode >= 0 And BarMarginMode <= 2 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_barmarginmode,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("k",_barmarginmode,BA.numberCast(double.class, 2))) { 
 BA.debugLineNum = 8038;BA.debugLine="Graph.BarMarginMode = BarMarginMode";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarMarginMode" /*RemoteObject*/ ,_barmarginmode);
 }else {
 BA.debugLineNum = 8040;BA.debugLine="Log(\"Error: wrong BarMarginMode value. 0 , 1 or";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","919333124",RemoteObject.createImmutable("Error: wrong BarMarginMode value. 0 , 1 or 2"),0);
 };
 BA.debugLineNum = 8042;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setbarmeanvalueformat(RemoteObject __ref,RemoteObject _minimumintegers,RemoteObject _maximumfractions,RemoteObject _minimumfractions,RemoteObject _groupingused) throws Exception{
try {
		Debug.PushSubsStack("SetBarMeanValueFormat (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7977);
if (RapidSub.canDelegate("setbarmeanvalueformat")) { return __ref.runUserSub(false, "xchart","setbarmeanvalueformat", __ref, _minimumintegers, _maximumfractions, _minimumfractions, _groupingused);}
Debug.locals.put("MinimumIntegers", _minimumintegers);
Debug.locals.put("MaximumFractions", _maximumfractions);
Debug.locals.put("MinimumFractions", _minimumfractions);
Debug.locals.put("GroupingUsed", _groupingused);
 BA.debugLineNum = 7977;BA.debugLine="Public Sub SetBarMeanValueFormat(MinimumIntegers A";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7978;BA.debugLine="BMVNFUsed = True";
Debug.JustUpdateDeviceLine();
__ref.setField ("_bmvnfused" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 7979;BA.debugLine="BMVNF.MinimumIntegers = MinimumIntegers";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("MinimumIntegers" /*RemoteObject*/ ,_minimumintegers);
 BA.debugLineNum = 7980;BA.debugLine="BMVNF.MaximumFractions = MaximumFractions";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("MaximumFractions" /*RemoteObject*/ ,_maximumfractions);
 BA.debugLineNum = 7981;BA.debugLine="BMVNF.MinimumFractions = MinimumFractions";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("MinimumFractions" /*RemoteObject*/ ,_minimumfractions);
 BA.debugLineNum = 7982;BA.debugLine="BMVNF.GroupingUsed = GroupingUsed";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bmvnf" /*RemoteObject*/ ).setField ("GroupingUsed" /*RemoteObject*/ ,_groupingused);
 BA.debugLineNum = 7983;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setbarvalueorientation(RemoteObject __ref,RemoteObject _barvalueorientation) throws Exception{
try {
		Debug.PushSubsStack("setBarValueOrientation (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8019);
if (RapidSub.canDelegate("setbarvalueorientation")) { return __ref.runUserSub(false, "xchart","setbarvalueorientation", __ref, _barvalueorientation);}
Debug.locals.put("BarValueOrientation", _barvalueorientation);
 BA.debugLineNum = 8019;BA.debugLine="Public Sub setBarValueOrientation(BarValueOrientat";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8020;BA.debugLine="If BarValueOrientation = \"HORIZONTAL\" Or BarValue";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_barvalueorientation,BA.ObjectToString("HORIZONTAL")) || RemoteObject.solveBoolean("=",_barvalueorientation,BA.ObjectToString("VERTICAL"))) { 
 BA.debugLineNum = 8021;BA.debugLine="Graph.BarValueOrientation = BarValueOrientation";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("BarValueOrientation" /*RemoteObject*/ ,_barvalueorientation);
 }else {
 BA.debugLineNum = 8023;BA.debugLine="Log(\"Error: wrong BarValueOrientation value\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","919202052",RemoteObject.createImmutable("Error: wrong BarValueOrientation value"),0);
 };
 BA.debugLineNum = 8025;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setbubblediametermax(RemoteObject __ref,RemoteObject _bubblediametermax) throws Exception{
try {
		Debug.PushSubsStack("setBubbleDiameterMax (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8461);
if (RapidSub.canDelegate("setbubblediametermax")) { return __ref.runUserSub(false, "xchart","setbubblediametermax", __ref, _bubblediametermax);}
Debug.locals.put("BubbleDiameterMax", _bubblediametermax);
 BA.debugLineNum = 8461;BA.debugLine="Public Sub setBubbleDiameterMax(BubbleDiameterMax";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8462;BA.debugLine="mBubbleDiameterMax = BubbleDiameterMax";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubblediametermax" /*RemoteObject*/ ,_bubblediametermax);
 BA.debugLineNum = 8463;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setbubblediametermin(RemoteObject __ref,RemoteObject _bubblediametermin) throws Exception{
try {
		Debug.PushSubsStack("setBubbleDiameterMin (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8448);
if (RapidSub.canDelegate("setbubblediametermin")) { return __ref.runUserSub(false, "xchart","setbubblediametermin", __ref, _bubblediametermin);}
Debug.locals.put("BubbleDiameterMin", _bubblediametermin);
 BA.debugLineNum = 8448;BA.debugLine="Public Sub setBubbleDiameterMin(BubbleDiameterMin";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8449;BA.debugLine="mBubbleDiameterMin = BubbleDiameterMin";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubblediametermin" /*RemoteObject*/ ,_bubblediametermin);
 BA.debugLineNum = 8450;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setbubblesmallsnap(RemoteObject __ref,RemoteObject _bubblesmallsnap) throws Exception{
try {
		Debug.PushSubsStack("setBubbleSmallSnap (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8473);
if (RapidSub.canDelegate("setbubblesmallsnap")) { return __ref.runUserSub(false, "xchart","setbubblesmallsnap", __ref, _bubblesmallsnap);}
Debug.locals.put("BubbleSmallSnap", _bubblesmallsnap);
 BA.debugLineNum = 8473;BA.debugLine="Public Sub setBubbleSmallSnap(BubbleSmallSnap As B";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8474;BA.debugLine="mBubbleSmallSnap = BubbleSmallSnap";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mbubblesmallsnap" /*RemoteObject*/ ,_bubblesmallsnap);
 BA.debugLineNum = 8475;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setcandledisplayvolume(RemoteObject __ref,RemoteObject _candledisplayvolume) throws Exception{
try {
		Debug.PushSubsStack("setCandleDisplayVolume (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8376);
if (RapidSub.canDelegate("setcandledisplayvolume")) { return __ref.runUserSub(false, "xchart","setcandledisplayvolume", __ref, _candledisplayvolume);}
Debug.locals.put("CandleDisplayVolume", _candledisplayvolume);
 BA.debugLineNum = 8376;BA.debugLine="Public Sub setCandleDisplayVolume(CandleDisplayVol";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8377;BA.debugLine="Bar.CandleDisplayVolume = CandleDisplayVolume";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("CandleDisplayVolume" /*RemoteObject*/ ,_candledisplayvolume);
 BA.debugLineNum = 8378;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setcandledrawbodyborder(RemoteObject __ref,RemoteObject _candledrawbodyborder) throws Exception{
try {
		Debug.PushSubsStack("setCandleDrawBodyBorder (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8425);
if (RapidSub.canDelegate("setcandledrawbodyborder")) { return __ref.runUserSub(false, "xchart","setcandledrawbodyborder", __ref, _candledrawbodyborder);}
Debug.locals.put("CandleDrawBodyBorder", _candledrawbodyborder);
 BA.debugLineNum = 8425;BA.debugLine="Public Sub setCandleDrawBodyBorder(CandleDrawBodyB";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8426;BA.debugLine="Bar.DrawBodyBorder = CandleDrawBodyBorder";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("DrawBodyBorder" /*RemoteObject*/ ,_candledrawbodyborder);
 BA.debugLineNum = 8427;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setcandlewickcolor(RemoteObject __ref,RemoteObject _candlewickcolor) throws Exception{
try {
		Debug.PushSubsStack("setCandleWickColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8365);
if (RapidSub.canDelegate("setcandlewickcolor")) { return __ref.runUserSub(false, "xchart","setcandlewickcolor", __ref, _candlewickcolor);}
Debug.locals.put("CandleWickColor", _candlewickcolor);
 BA.debugLineNum = 8365;BA.debugLine="Public Sub setCandleWickColor(CandleWickColor As I";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8366;BA.debugLine="Bar.WickColor = CandleWickColor";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("WickColor" /*RemoteObject*/ ,_candlewickcolor);
 BA.debugLineNum = 8367;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setcandlewickwidth(RemoteObject __ref,RemoteObject _candlewickwidth) throws Exception{
try {
		Debug.PushSubsStack("setCandleWickWidth (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8388);
if (RapidSub.canDelegate("setcandlewickwidth")) { return __ref.runUserSub(false, "xchart","setcandlewickwidth", __ref, _candlewickwidth);}
Debug.locals.put("CandleWickWidth", _candlewickwidth);
 BA.debugLineNum = 8388;BA.debugLine="Public Sub setCandleWickWidth(CandleWickWidth As I";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8389;BA.debugLine="CandleWickWidth = Max(0, CandleWickWidth)";
Debug.JustUpdateDeviceLine();
_candlewickwidth = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 0)),(Object)(BA.numberCast(double.class, _candlewickwidth))));Debug.locals.put("CandleWickWidth", _candlewickwidth);
 BA.debugLineNum = 8390;BA.debugLine="Bar.WickWidth = CandleWickWidth * xui.Scale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("WickWidth" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {_candlewickwidth,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"getScale")}, "*",0, 0)));
 BA.debugLineNum = 8391;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setchartbackgroundcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setChartBackgroundColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7708);
if (RapidSub.canDelegate("setchartbackgroundcolor")) { return __ref.runUserSub(false, "xchart","setchartbackgroundcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7708;BA.debugLine="Public Sub setChartBackgroundColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7709;BA.debugLine="Graph.ChartBackgroundColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ChartBackgroundColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7710;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setcharttype(RemoteObject __ref,RemoteObject _charttype) throws Exception{
try {
		Debug.PushSubsStack("setChartType (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7445);
if (RapidSub.canDelegate("setcharttype")) { return __ref.runUserSub(false, "xchart","setcharttype", __ref, _charttype);}
Debug.locals.put("ChartType", _charttype);
 BA.debugLineNum = 7445;BA.debugLine="Public Sub setChartType(ChartType As String)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7446;BA.debugLine="Select ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(_charttype,BA.ObjectToString("BAR"),BA.ObjectToString("H_BAR"),BA.ObjectToString("STACKED_BAR"),BA.ObjectToString("H_STACKED_BAR"),BA.ObjectToString("LINE"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("H_LINE"),BA.ObjectToString("PIE"),BA.ObjectToString("YX_CHART"),BA.ObjectToString("RADAR"),BA.ObjectToString("CANDLE"),BA.ObjectToString("WATERFALL"),BA.ObjectToString("BUBBLE"))) {
case 0: 
case 1: 
case 2: 
case 3: 
case 4: 
case 5: 
case 6: 
case 7: 
case 8: 
case 9: 
case 10: 
case 11: 
case 12: 
case 13: {
 BA.debugLineNum = 7448;BA.debugLine="Graph.ChartType = ChartType";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("ChartType" /*RemoteObject*/ ,_charttype);
 break; }
default: {
 BA.debugLineNum = 7450;BA.debugLine="Log(\"Wrong chart type\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","913041669",RemoteObject.createImmutable("Wrong chart type"),0);
 break; }
}
;
 BA.debugLineNum = 7452;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setcustomfont(RemoteObject __ref,RemoteObject _customfontname,RemoteObject _customfontscale) throws Exception{
try {
		Debug.PushSubsStack("SetCustomFont (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9035);
if (RapidSub.canDelegate("setcustomfont")) { return __ref.runUserSub(false, "xchart","setcustomfont", __ref, _customfontname, _customfontscale);}
Debug.locals.put("CustomFontName", _customfontname);
Debug.locals.put("CustomFontScale", _customfontscale);
 BA.debugLineNum = 9035;BA.debugLine="Public Sub SetCustomFont(CustomFontName As String,";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9036;BA.debugLine="Texts.CustomFontName = CustomFontName";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("CustomFontName" /*RemoteObject*/ ,_customfontname);
 BA.debugLineNum = 9037;BA.debugLine="If Texts.CustomFontName = \"\" Then 'default font";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"CustomFontName" /*RemoteObject*/ ),BA.ObjectToString(""))) { 
 BA.debugLineNum = 9038;BA.debugLine="Texts.CustomFontScale = 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("CustomFontScale" /*RemoteObject*/ ,BA.numberCast(double.class, 1));
 }else {
 BA.debugLineNum = 9040;BA.debugLine="Texts.CustomFontScale = CustomFontScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("CustomFontScale" /*RemoteObject*/ ,_customfontscale);
 };
 BA.debugLineNum = 9042;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdecreasecolor(RemoteObject __ref,RemoteObject _decreasecolor) throws Exception{
try {
		Debug.PushSubsStack("setDecreaseColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8415);
if (RapidSub.canDelegate("setdecreasecolor")) { return __ref.runUserSub(false, "xchart","setdecreasecolor", __ref, _decreasecolor);}
Debug.locals.put("DecreaseColor", _decreasecolor);
 BA.debugLineNum = 8415;BA.debugLine="Public Sub setDecreaseColor(DecreaseColor As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8416;BA.debugLine="Bar.DecreaseColor = DecreaseColor";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("DecreaseColor" /*RemoteObject*/ ,_decreasecolor);
 BA.debugLineNum = 8417;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdifferentscales(RemoteObject __ref,RemoteObject _differentscales) throws Exception{
try {
		Debug.PushSubsStack("setDifferentScales (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7421);
if (RapidSub.canDelegate("setdifferentscales")) { return __ref.runUserSub(false, "xchart","setdifferentscales", __ref, _differentscales);}
Debug.locals.put("DifferentScales", _differentscales);
 BA.debugLineNum = 7421;BA.debugLine="Public Sub setDifferentScales(DifferentScales As B";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7422;BA.debugLine="Scale(sY(0)).Different = DifferentScales";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Different" /*RemoteObject*/ ,_differentscales);
 BA.debugLineNum = 7423;BA.debugLine="Scale(sY(1)).Different = DifferentScales";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("Different" /*RemoteObject*/ ,_differentscales);
 BA.debugLineNum = 7424;BA.debugLine="Scale(sY(2)).Different = DifferentScales";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("Different" /*RemoteObject*/ ,_differentscales);
 BA.debugLineNum = 7425;BA.debugLine="Scale(sY(3)).Different = DifferentScales";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("Different" /*RemoteObject*/ ,_differentscales);
 BA.debugLineNum = 7426;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdisplaycursor(RemoteObject __ref,RemoteObject _displaycursor) throws Exception{
try {
		Debug.PushSubsStack("setDisplayCursor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7578);
if (RapidSub.canDelegate("setdisplaycursor")) { return __ref.runUserSub(false, "xchart","setdisplaycursor", __ref, _displaycursor);}
Debug.locals.put("DisplayCursor", _displaycursor);
 BA.debugLineNum = 7578;BA.debugLine="Public Sub setDisplayCursor(DisplayCursor As Boole";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7579;BA.debugLine="Values.ShowCursor = DisplayCursor";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("ShowCursor" /*RemoteObject*/ ,_displaycursor);
 BA.debugLineNum = 7580;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdisplayvalues(RemoteObject __ref,RemoteObject _displayvalues) throws Exception{
try {
		Debug.PushSubsStack("setDisplayValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7588);
if (RapidSub.canDelegate("setdisplayvalues")) { return __ref.runUserSub(false, "xchart","setdisplayvalues", __ref, _displayvalues);}
Debug.locals.put("DisplayValues", _displayvalues);
 BA.debugLineNum = 7588;BA.debugLine="Public Sub setDisplayValues(DisplayValues As Boole";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7589;BA.debugLine="Values.Show = DisplayValues";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("Show" /*RemoteObject*/ ,_displayvalues);
 BA.debugLineNum = 7590;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdisplayvaluesonhover(RemoteObject __ref,RemoteObject _displayvaluesonhover) throws Exception{
try {
		Debug.PushSubsStack("setDisplayValuesOnHover (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7598);
if (RapidSub.canDelegate("setdisplayvaluesonhover")) { return __ref.runUserSub(false, "xchart","setdisplayvaluesonhover", __ref, _displayvaluesonhover);}
Debug.locals.put("DisplayValuesOnHover", _displayvaluesonhover);
 BA.debugLineNum = 7598;BA.debugLine="Public Sub setDisplayValuesOnHover(DisplayValuesOn";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7599;BA.debugLine="Values.ShowOnHover = DisplayValuesOnHover";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("ShowOnHover" /*RemoteObject*/ ,_displayvaluesonhover);
 BA.debugLineNum = 7600;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdrawgridframe(RemoteObject __ref,RemoteObject _drawgridframe) throws Exception{
try {
		Debug.PushSubsStack("setDrawGridFrame (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7728);
if (RapidSub.canDelegate("setdrawgridframe")) { return __ref.runUserSub(false, "xchart","setdrawgridframe", __ref, _drawgridframe);}
Debug.locals.put("DrawGridFrame", _drawgridframe);
 BA.debugLineNum = 7728;BA.debugLine="Public Sub setDrawGridFrame(DrawGridFrame As Boole";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7729;BA.debugLine="Graph.DrawGridFrame = DrawGridFrame";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawGridFrame" /*RemoteObject*/ ,_drawgridframe);
 BA.debugLineNum = 7730;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdrawhorizontalgridlines(RemoteObject __ref,RemoteObject _drawhorizontalgridlines) throws Exception{
try {
		Debug.PushSubsStack("setDrawHorizontalGridLines (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7738);
if (RapidSub.canDelegate("setdrawhorizontalgridlines")) { return __ref.runUserSub(false, "xchart","setdrawhorizontalgridlines", __ref, _drawhorizontalgridlines);}
Debug.locals.put("DrawHorizontalGridLines", _drawhorizontalgridlines);
 BA.debugLineNum = 7738;BA.debugLine="Public Sub setDrawHorizontalGridLines(DrawHorizont";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7739;BA.debugLine="Graph.DrawHorizontalGridLines = DrawHorizontalGri";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawHorizontalGridLines" /*RemoteObject*/ ,_drawhorizontalgridlines);
 BA.debugLineNum = 7740;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdrawouterframe(RemoteObject __ref,RemoteObject _drawouterframe) throws Exception{
try {
		Debug.PushSubsStack("setDrawOuterFrame (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7927);
if (RapidSub.canDelegate("setdrawouterframe")) { return __ref.runUserSub(false, "xchart","setdrawouterframe", __ref, _drawouterframe);}
Debug.locals.put("DrawOuterFrame", _drawouterframe);
 BA.debugLineNum = 7927;BA.debugLine="Public Sub setDrawOuterFrame (DrawOuterFrame As Bo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7928;BA.debugLine="Graph.DrawOuterFrame = DrawOuterFrame";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawOuterFrame" /*RemoteObject*/ ,_drawouterframe);
 BA.debugLineNum = 7929;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdrawverticalgridlines(RemoteObject __ref,RemoteObject _drawverticalgridlines) throws Exception{
try {
		Debug.PushSubsStack("setDrawVerticalGridLines (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7748);
if (RapidSub.canDelegate("setdrawverticalgridlines")) { return __ref.runUserSub(false, "xchart","setdrawverticalgridlines", __ref, _drawverticalgridlines);}
Debug.locals.put("DrawVerticalGridLines", _drawverticalgridlines);
 BA.debugLineNum = 7748;BA.debugLine="Public Sub setDrawVerticalGridLines(DrawVerticalGr";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7749;BA.debugLine="Graph.DrawVerticalGridLines = DrawVerticalGridLin";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("DrawVerticalGridLines" /*RemoteObject*/ ,_drawverticalgridlines);
 BA.debugLineNum = 7750;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdrawxscale(RemoteObject __ref,RemoteObject _drawxscale) throws Exception{
try {
		Debug.PushSubsStack("setDrawXScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7663);
if (RapidSub.canDelegate("setdrawxscale")) { return __ref.runUserSub(false, "xchart","setdrawxscale", __ref, _drawxscale);}
Debug.locals.put("DrawXScale", _drawxscale);
 BA.debugLineNum = 7663;BA.debugLine="Public Sub setDrawXScale(DrawXScale As Boolean)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7664;BA.debugLine="Scale(sX).DrawXScale = DrawXScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("DrawXScale" /*RemoteObject*/ ,_drawxscale);
 BA.debugLineNum = 7665;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setdrawyscale(RemoteObject __ref,RemoteObject _drawyscale) throws Exception{
try {
		Debug.PushSubsStack("setDrawYScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7675);
if (RapidSub.canDelegate("setdrawyscale")) { return __ref.runUserSub(false, "xchart","setdrawyscale", __ref, _drawyscale);}
Debug.locals.put("DrawYScale", _drawyscale);
 BA.debugLineNum = 7675;BA.debugLine="Public Sub setDrawYScale(DrawYScale As Boolean)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7676;BA.debugLine="Scale(sY(0)).DrawYScale = DrawYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("DrawYScale" /*RemoteObject*/ ,_drawyscale);
 BA.debugLineNum = 7677;BA.debugLine="Scale(sY(1)).DrawYScale = DrawYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("DrawYScale" /*RemoteObject*/ ,_drawyscale);
 BA.debugLineNum = 7678;BA.debugLine="Scale(sY(2)).DrawYScale = DrawYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("DrawYScale" /*RemoteObject*/ ,_drawyscale);
 BA.debugLineNum = 7679;BA.debugLine="Scale(sY(3)).DrawYScale = DrawYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("DrawYScale" /*RemoteObject*/ ,_drawyscale);
 BA.debugLineNum = 7680;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setgradientcolors(RemoteObject __ref,RemoteObject _gradientcolors) throws Exception{
try {
		Debug.PushSubsStack("setGradientColors (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7688);
if (RapidSub.canDelegate("setgradientcolors")) { return __ref.runUserSub(false, "xchart","setgradientcolors", __ref, _gradientcolors);}
Debug.locals.put("GradientColors", _gradientcolors);
 BA.debugLineNum = 7688;BA.debugLine="Public Sub setGradientColors(GradientColors As Boo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7689;BA.debugLine="Graph.GradientColors = GradientColors";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GradientColors" /*RemoteObject*/ ,_gradientcolors);
 BA.debugLineNum = 7690;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setgradientcolorsalpha(RemoteObject __ref,RemoteObject _gradientcolorsalpha) throws Exception{
try {
		Debug.PushSubsStack("setGradientColorsAlpha (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7699);
if (RapidSub.canDelegate("setgradientcolorsalpha")) { return __ref.runUserSub(false, "xchart","setgradientcolorsalpha", __ref, _gradientcolorsalpha);}
Debug.locals.put("GradientColorsAlpha", _gradientcolorsalpha);
 BA.debugLineNum = 7699;BA.debugLine="Public Sub setGradientColorsAlpha(GradientColorsAl";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7700;BA.debugLine="Graph.GradientColorsAlpha = GradientColorsAlpha";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GradientColorsAlpha" /*RemoteObject*/ ,_gradientcolorsalpha);
 BA.debugLineNum = 7701;BA.debugLine="Graph.GradientColorsAlpha = Max(0, Graph.Gradient";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GradientColorsAlpha" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 0)),(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ ))))));
 BA.debugLineNum = 7702;BA.debugLine="Graph.GradientColorsAlpha = Min(255, Graph.Gradie";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GradientColorsAlpha" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, 255)),(Object)(BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"GradientColorsAlpha" /*RemoteObject*/ ))))));
 BA.debugLineNum = 7703;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setgridcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setGridColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7722);
if (RapidSub.canDelegate("setgridcolor")) { return __ref.runUserSub(false, "xchart","setgridcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7722;BA.debugLine="Public Sub setGridColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7723;BA.debugLine="Graph.GridColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GridColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7724;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setgridframecolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setGridFrameColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7715);
if (RapidSub.canDelegate("setgridframecolor")) { return __ref.runUserSub(false, "xchart","setgridframecolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7715;BA.debugLine="Public Sub setGridFrameColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7716;BA.debugLine="Graph.GridFrameColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("GridFrameColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7717;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _sethchartstickstopdown(RemoteObject __ref,RemoteObject _hchartstickstopdown) throws Exception{
try {
		Debug.PushSubsStack("setHChartsTicksTopDown (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8251);
if (RapidSub.canDelegate("sethchartstickstopdown")) { return __ref.runUserSub(false, "xchart","sethchartstickstopdown", __ref, _hchartstickstopdown);}
Debug.locals.put("HChartsTicksTopDown", _hchartstickstopdown);
 BA.debugLineNum = 8251;BA.debugLine="Public Sub setHChartsTicksTopDown(HChartsTicksTopD";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8252;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 8253;BA.debugLine="mHChartsTicksTopDown = HChartsTicksTopDown";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mhchartstickstopdown" /*RemoteObject*/ ,_hchartstickstopdown);
 };
 BA.debugLineNum = 8256;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _sethchartsxscaleontop(RemoteObject __ref,RemoteObject _hbarsxscaleontop) throws Exception{
try {
		Debug.PushSubsStack("setHChartsXScaleOnTop (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8237);
if (RapidSub.canDelegate("sethchartsxscaleontop")) { return __ref.runUserSub(false, "xchart","sethchartsxscaleontop", __ref, _hbarsxscaleontop);}
Debug.locals.put("HBarsXScaleOnTop", _hbarsxscaleontop);
 BA.debugLineNum = 8237;BA.debugLine="Public Sub setHChartsXScaleOnTop(HBarsXScaleOnTop";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8238;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 8239;BA.debugLine="mHChartsXScaleOnTop = HBarsXScaleOnTop";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mhchartsxscaleontop" /*RemoteObject*/ ,_hbarsxscaleontop);
 };
 BA.debugLineNum = 8242;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setheight(RemoteObject __ref,RemoteObject _height) throws Exception{
try {
		Debug.PushSubsStack("setHeight (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7487);
if (RapidSub.canDelegate("setheight")) { return __ref.runUserSub(false, "xchart","setheight", __ref, _height);}
Debug.locals.put("Height", _height);
 BA.debugLineNum = 7487;BA.debugLine="Public Sub setHeight(Height As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7488;BA.debugLine="mBase.Height = Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"setHeight",_height);
 BA.debugLineNum = 7489;BA.debugLine="Base_Resize(mBase.Width, Height)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_base_resize" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(double.class, _height)));
 BA.debugLineNum = 7490;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setincludebarmeanline(RemoteObject __ref,RemoteObject _includebarmeanline) throws Exception{
try {
		Debug.PushSubsStack("setIncludeBarMeanLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7395);
if (RapidSub.canDelegate("setincludebarmeanline")) { return __ref.runUserSub(false, "xchart","setincludebarmeanline", __ref, _includebarmeanline);}
Debug.locals.put("IncludeBarMeanLine", _includebarmeanline);
 BA.debugLineNum = 7395;BA.debugLine="Public Sub setIncludeBarMeanLine(IncludeBarMeanLin";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7396;BA.debugLine="Graph.IncludeBarMeanLine = IncludeBarMeanLine";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeBarMeanLine" /*RemoteObject*/ ,_includebarmeanline);
 BA.debugLineNum = 7397;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setincludelegend(RemoteObject __ref,RemoteObject _includelegend) throws Exception{
try {
		Debug.PushSubsStack("setIncludeLegend (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7374);
if (RapidSub.canDelegate("setincludelegend")) { return __ref.runUserSub(false, "xchart","setincludelegend", __ref, _includelegend);}
Debug.locals.put("IncludeLegend", _includelegend);
 BA.debugLineNum = 7374;BA.debugLine="Public Sub setIncludeLegend(IncludeLegend As Strin";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7375;BA.debugLine="Legend.IncludeLegend = IncludeLegend";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("IncludeLegend" /*RemoteObject*/ ,_includelegend);
 BA.debugLineNum = 7376;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setincludemaxline(RemoteObject __ref,RemoteObject _includemaxline) throws Exception{
try {
		Debug.PushSubsStack("setIncludeMaxLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7948);
if (RapidSub.canDelegate("setincludemaxline")) { return __ref.runUserSub(false, "xchart","setincludemaxline", __ref, _includemaxline);}
Debug.locals.put("IncludeMaxLine", _includemaxline);
 BA.debugLineNum = 7948;BA.debugLine="Public Sub setIncludeMaxLine (IncludeMaxLine As Bo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7949;BA.debugLine="Graph.IncludeMaxLine = IncludeMaxLine";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeMaxLine" /*RemoteObject*/ ,_includemaxline);
 BA.debugLineNum = 7951;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setincludemeanline(RemoteObject __ref,RemoteObject _includemeanline) throws Exception{
try {
		Debug.PushSubsStack("setIncludeMeanLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7959);
if (RapidSub.canDelegate("setincludemeanline")) { return __ref.runUserSub(false, "xchart","setincludemeanline", __ref, _includemeanline);}
Debug.locals.put("IncludeMeanLine", _includemeanline);
 BA.debugLineNum = 7959;BA.debugLine="Public Sub setIncludeMeanLine (IncludeMeanLine As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7960;BA.debugLine="Graph.IncludeMeanLine = IncludeMeanLine";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeMeanLine" /*RemoteObject*/ ,_includemeanline);
 BA.debugLineNum = 7962;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setincludeminline(RemoteObject __ref,RemoteObject _includeminline) throws Exception{
try {
		Debug.PushSubsStack("setIncludeMinLine (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7937);
if (RapidSub.canDelegate("setincludeminline")) { return __ref.runUserSub(false, "xchart","setincludeminline", __ref, _includeminline);}
Debug.locals.put("IncludeMinLine", _includeminline);
 BA.debugLineNum = 7937;BA.debugLine="Public Sub setIncludeMinLine (IncludeMinLine As Bo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7938;BA.debugLine="Graph.IncludeMinLine = IncludeMinLine";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeMinLine" /*RemoteObject*/ ,_includeminline);
 BA.debugLineNum = 7940;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setincludevalues(RemoteObject __ref,RemoteObject _includevalues) throws Exception{
try {
		Debug.PushSubsStack("setIncludeValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7385);
if (RapidSub.canDelegate("setincludevalues")) { return __ref.runUserSub(false, "xchart","setincludevalues", __ref, _includevalues);}
Debug.locals.put("IncludeValues", _includevalues);
 BA.debugLineNum = 7385;BA.debugLine="Public Sub setIncludeValues(IncludeValues As Boole";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7386;BA.debugLine="Graph.IncludeValues = IncludeValues";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("IncludeValues" /*RemoteObject*/ ,_includevalues);
 BA.debugLineNum = 7387;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setincreasecolor(RemoteObject __ref,RemoteObject _increasecolor) throws Exception{
try {
		Debug.PushSubsStack("setIncreaseColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8402);
if (RapidSub.canDelegate("setincreasecolor")) { return __ref.runUserSub(false, "xchart","setincreasecolor", __ref, _increasecolor);}
Debug.locals.put("IncreaseColor", _increasecolor);
 BA.debugLineNum = 8402;BA.debugLine="Public Sub setIncreaseColor(IncreaseColor As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8403;BA.debugLine="Bar.IncreaseColor = IncreaseColor";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("IncreaseColor" /*RemoteObject*/ ,_increasecolor);
 BA.debugLineNum = 8404;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setkeepdisplayvalues(RemoteObject __ref,RemoteObject _keepdisplayvalues) throws Exception{
try {
		Debug.PushSubsStack("setKeepDisplayValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8217);
if (RapidSub.canDelegate("setkeepdisplayvalues")) { return __ref.runUserSub(false, "xchart","setkeepdisplayvalues", __ref, _keepdisplayvalues);}
Debug.locals.put("KeepDisplayValues", _keepdisplayvalues);
 BA.debugLineNum = 8217;BA.debugLine="Public Sub setKeepDisplayValues(KeepDisplayValues";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8218;BA.debugLine="Select KeepDisplayValues";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(_keepdisplayvalues,BA.ObjectToString("NONE"),BA.ObjectToString("CURSOR"),BA.ObjectToString("BOTH"))) {
case 0: 
case 1: 
case 2: {
 BA.debugLineNum = 8220;BA.debugLine="mKeepDisplayValues = KeepDisplayValues";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mkeepdisplayvalues" /*RemoteObject*/ ,_keepdisplayvalues);
 BA.debugLineNum = 8222;BA.debugLine="If mKeepDisplayValues = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString(xchart.__c.getField(true,"False")))) { 
 BA.debugLineNum = 8223;BA.debugLine="ClearDisplayedValues";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_cleardisplayedvalues" /*RemoteObject*/ );
 };
 break; }
default: {
 BA.debugLineNum = 8226;BA.debugLine="Log(\"Wrong KeepDisplayValues value !\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","921430281",RemoteObject.createImmutable("Wrong KeepDisplayValues value !"),0);
 break; }
}
;
 BA.debugLineNum = 8228;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setleft(RemoteObject __ref,RemoteObject _left) throws Exception{
try {
		Debug.PushSubsStack("setLeft (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7459);
if (RapidSub.canDelegate("setleft")) { return __ref.runUserSub(false, "xchart","setleft", __ref, _left);}
Debug.locals.put("Left", _left);
 BA.debugLineNum = 7459;BA.debugLine="Public Sub setLeft(Left As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7460;BA.debugLine="mBase.Left = Left";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"setLeft",_left);
 BA.debugLineNum = 7461;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setlegendbackgroundcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setLegendBackgroundColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7794);
if (RapidSub.canDelegate("setlegendbackgroundcolor")) { return __ref.runUserSub(false, "xchart","setlegendbackgroundcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7794;BA.debugLine="Public Sub setLegendBackgroundColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7795;BA.debugLine="Legend.BackgroundColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("BackgroundColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7796;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setlegendtextcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setLegendTextColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7801);
if (RapidSub.canDelegate("setlegendtextcolor")) { return __ref.runUserSub(false, "xchart","setlegendtextcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7801;BA.debugLine="Public Sub setLegendTextColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7802;BA.debugLine="Legend.TextColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7803;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setlegendtextsize(RemoteObject __ref,RemoteObject _legendtextsize) throws Exception{
try {
		Debug.PushSubsStack("setLegendTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7553);
if (RapidSub.canDelegate("setlegendtextsize")) { return __ref.runUserSub(false, "xchart","setlegendtextsize", __ref, _legendtextsize);}
Debug.locals.put("LegendTextSize", _legendtextsize);
 BA.debugLineNum = 7553;BA.debugLine="Public Sub setLegendTextSize(LegendTextSize As Flo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7554;BA.debugLine="Legend.TextSize = LegendTextSize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextSize" /*RemoteObject*/ ,_legendtextsize);
 BA.debugLineNum = 7555;BA.debugLine="Legend.TextFont = xui.CreateDefaultFont(Legend.Te";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_legend" /*RemoteObject*/ ).setField ("TextFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 7556;BA.debugLine="Texts.AutomaticTextSizes = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7557;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setmaxlinecolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setMaxLineColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7815);
if (RapidSub.canDelegate("setmaxlinecolor")) { return __ref.runUserSub(false, "xchart","setmaxlinecolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7815;BA.debugLine="Public Sub setMaxLineColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7816;BA.debugLine="Graph.MaxLineColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("MaxLineColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7817;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setmeanlinecolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setMeanLineColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7822);
if (RapidSub.canDelegate("setmeanlinecolor")) { return __ref.runUserSub(false, "xchart","setmeanlinecolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7822;BA.debugLine="Public Sub setMeanLineColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7823;BA.debugLine="Graph.MeanLineColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("MeanLineColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7824;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setminlinecolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setMinLineColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7808);
if (RapidSub.canDelegate("setminlinecolor")) { return __ref.runUserSub(false, "xchart","setminlinecolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7808;BA.debugLine="Public Sub setMinLineColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7809;BA.debugLine="Graph.MinLineColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("MinLineColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7810;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setmissingdatavalue(RemoteObject __ref,RemoteObject _missingdatavalue) throws Exception{
try {
		Debug.PushSubsStack("setMissingDataValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8325);
if (RapidSub.canDelegate("setmissingdatavalue")) { return __ref.runUserSub(false, "xchart","setmissingdatavalue", __ref, _missingdatavalue);}
Debug.locals.put("MissingDataValue", _missingdatavalue);
 BA.debugLineNum = 8325;BA.debugLine="Public Sub setMissingDataValue(MissingDataValue As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8326;BA.debugLine="mMissingDataValue = MissingDataValue";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mmissingdatavalue" /*RemoteObject*/ ,_missingdatavalue);
 BA.debugLineNum = 8327;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setnbxintervals(RemoteObject __ref,RemoteObject _nbxintervals) throws Exception{
try {
		Debug.PushSubsStack("setNbXIntervals (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7846);
if (RapidSub.canDelegate("setnbxintervals")) { return __ref.runUserSub(false, "xchart","setnbxintervals", __ref, _nbxintervals);}
Debug.locals.put("NbXIntervals", _nbxintervals);
 BA.debugLineNum = 7846;BA.debugLine="Public Sub setNbXIntervals (NbXIntervals As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7847;BA.debugLine="Scale(sX).NbIntervals = NbXIntervals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("NbIntervals" /*RemoteObject*/ ,_nbxintervals);
 BA.debugLineNum = 7848;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setnbyintervals(RemoteObject __ref,RemoteObject _nbyintervals) throws Exception{
try {
		Debug.PushSubsStack("setNbYIntervals (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7832);
if (RapidSub.canDelegate("setnbyintervals")) { return __ref.runUserSub(false, "xchart","setnbyintervals", __ref, _nbyintervals);}
Debug.locals.put("NbYIntervals", _nbyintervals);
 BA.debugLineNum = 7832;BA.debugLine="Public Sub setNbYIntervals (NbYIntervals As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7833;BA.debugLine="Scale(sY(0)).NbIntervals = NbYIntervals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("NbIntervals" /*RemoteObject*/ ,_nbyintervals);
 BA.debugLineNum = 7834;BA.debugLine="Scale(sY(1)).NbIntervals = NbYIntervals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("NbIntervals" /*RemoteObject*/ ,_nbyintervals);
 BA.debugLineNum = 7835;BA.debugLine="Scale(sY(2)).NbIntervals = NbYIntervals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("NbIntervals" /*RemoteObject*/ ,_nbyintervals);
 BA.debugLineNum = 7836;BA.debugLine="Scale(sY(3)).NbIntervals = NbYIntervals";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("NbIntervals" /*RemoteObject*/ ,_nbyintervals);
 BA.debugLineNum = 7837;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setpieaddpercentage(RemoteObject __ref,RemoteObject _pieaddpercentage) throws Exception{
try {
		Debug.PushSubsStack("setPieAddPercentage (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8071);
if (RapidSub.canDelegate("setpieaddpercentage")) { return __ref.runUserSub(false, "xchart","setpieaddpercentage", __ref, _pieaddpercentage);}
Debug.locals.put("PieAddPercentage", _pieaddpercentage);
 BA.debugLineNum = 8071;BA.debugLine="Public Sub setPieAddPercentage(PieAddPercentage As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8072;BA.debugLine="Graph.PieAddPercentage = PieAddPercentage";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("PieAddPercentage" /*RemoteObject*/ ,_pieaddpercentage);
 BA.debugLineNum = 8073;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setpiegapdegrees(RemoteObject __ref,RemoteObject _piegapdegrees) throws Exception{
try {
		Debug.PushSubsStack("setPieGapDegrees (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8061);
if (RapidSub.canDelegate("setpiegapdegrees")) { return __ref.runUserSub(false, "xchart","setpiegapdegrees", __ref, _piegapdegrees);}
Debug.locals.put("PieGapDegrees", _piegapdegrees);
 BA.debugLineNum = 8061;BA.debugLine="Public Sub setPieGapDegrees(PieGapDegrees As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8062;BA.debugLine="Graph.PieGapDegrees = PieGapDegrees";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("PieGapDegrees" /*RemoteObject*/ ,_piegapdegrees);
 BA.debugLineNum = 8063;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setpiepercentagenbfractions(RemoteObject __ref,RemoteObject _piepercentagenbfractions) throws Exception{
try {
		Debug.PushSubsStack("setPiePercentageNbFractions (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8081);
if (RapidSub.canDelegate("setpiepercentagenbfractions")) { return __ref.runUserSub(false, "xchart","setpiepercentagenbfractions", __ref, _piepercentagenbfractions);}
Debug.locals.put("PiePercentageNbFractions", _piepercentagenbfractions);
 BA.debugLineNum = 8081;BA.debugLine="Public Sub setPiePercentageNbFractions(PiePercenta";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8082;BA.debugLine="mPiePercentageNbFractions = Max(PiePercentageNbFr";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mpiepercentagenbfractions" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _piepercentagenbfractions)),(Object)(BA.numberCast(double.class, 0)))));
 BA.debugLineNum = 8083;BA.debugLine="mPiePercentageNbFractions = Min(mPiePercentageNbF";
Debug.JustUpdateDeviceLine();
__ref.setField ("_mpiepercentagenbfractions" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(true,"_mpiepercentagenbfractions" /*RemoteObject*/ ))),(Object)(BA.numberCast(double.class, 2)))));
 BA.debugLineNum = 8084;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setpiestartangle(RemoteObject __ref,RemoteObject _piestartangle) throws Exception{
try {
		Debug.PushSubsStack("setPieStartAngle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8051);
if (RapidSub.canDelegate("setpiestartangle")) { return __ref.runUserSub(false, "xchart","setpiestartangle", __ref, _piestartangle);}
Debug.locals.put("PieStartAngle", _piestartangle);
 BA.debugLineNum = 8051;BA.debugLine="Public Sub setPieStartAngle(PieStartAngle As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8052;BA.debugLine="Graph.PieStartAngle = PieStartAngle";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("PieStartAngle" /*RemoteObject*/ ,_piestartangle);
 BA.debugLineNum = 8053;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setradardrawscale(RemoteObject __ref,RemoteObject _radardrawscale) throws Exception{
try {
		Debug.PushSubsStack("setRadarDrawScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8180);
if (RapidSub.canDelegate("setradardrawscale")) { return __ref.runUserSub(false, "xchart","setradardrawscale", __ref, _radardrawscale);}
Debug.locals.put("RadarDrawScale", _radardrawscale);
 BA.debugLineNum = 8180;BA.debugLine="Public Sub setRadarDrawScale(RadarDrawScale As Boo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8181;BA.debugLine="Graph.RadarDrawScale = RadarDrawScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarDrawScale" /*RemoteObject*/ ,_radardrawscale);
 BA.debugLineNum = 8182;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setradardrawscalevalues(RemoteObject __ref,RemoteObject _radardrawscalevalues) throws Exception{
try {
		Debug.PushSubsStack("setRadarDrawScaleValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8190);
if (RapidSub.canDelegate("setradardrawscalevalues")) { return __ref.runUserSub(false, "xchart","setradardrawscalevalues", __ref, _radardrawscalevalues);}
Debug.locals.put("RadarDrawScaleValues", _radardrawscalevalues);
 BA.debugLineNum = 8190;BA.debugLine="Public Sub setRadarDrawScaleValues(RadarDrawScaleV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8191;BA.debugLine="Graph.RadarDrawScaleValues = RadarDrawScaleValues";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarDrawScaleValues" /*RemoteObject*/ ,_radardrawscalevalues);
 BA.debugLineNum = 8192;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setradarscaletype(RemoteObject __ref,RemoteObject _radarscaletype) throws Exception{
try {
		Debug.PushSubsStack("setRadarScaleType (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8200);
if (RapidSub.canDelegate("setradarscaletype")) { return __ref.runUserSub(false, "xchart","setradarscaletype", __ref, _radarscaletype);}
Debug.locals.put("RadarScaleType", _radarscaletype);
 BA.debugLineNum = 8200;BA.debugLine="Public Sub setRadarScaleType(RadarScaleType As Str";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8201;BA.debugLine="If RadarScaleType = \"SPIDER\" Or RadarScaleType =";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_radarscaletype,BA.ObjectToString("SPIDER")) || RemoteObject.solveBoolean("=",_radarscaletype,BA.ObjectToString("CIRCLE"))) { 
 BA.debugLineNum = 8202;BA.debugLine="Graph.RadarScaleType = RadarScaleType";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarScaleType" /*RemoteObject*/ ,_radarscaletype);
 }else {
 BA.debugLineNum = 8204;BA.debugLine="Log(RadarScaleType & \"  Wrong type, must be SPID";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","921299204",RemoteObject.concat(_radarscaletype,RemoteObject.createImmutable("  Wrong type, must be SPIDER or CIRCLE)")),0);
 };
 BA.debugLineNum = 8206;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setradarstartangle(RemoteObject __ref,RemoteObject _startangle) throws Exception{
try {
		Debug.PushSubsStack("setRadarStartAngle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8169);
if (RapidSub.canDelegate("setradarstartangle")) { return __ref.runUserSub(false, "xchart","setradarstartangle", __ref, _startangle);}
Debug.locals.put("StartAngle", _startangle);
 BA.debugLineNum = 8169;BA.debugLine="Public Sub setRadarStartAngle(StartAngle As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8170;BA.debugLine="Graph.RadarStartAngle = StartAngle";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("RadarStartAngle" /*RemoteObject*/ ,_startangle);
 BA.debugLineNum = 8171;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setreverseyscale(RemoteObject __ref,RemoteObject _reverseyscale) throws Exception{
try {
		Debug.PushSubsStack("setReverseYScale (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8336);
if (RapidSub.canDelegate("setreverseyscale")) { return __ref.runUserSub(false, "xchart","setreverseyscale", __ref, _reverseyscale);}
Debug.locals.put("ReverseYScale", _reverseyscale);
 BA.debugLineNum = 8336;BA.debugLine="Public Sub setReverseYScale(ReverseYScale As Boole";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8337;BA.debugLine="Select Graph.ChartType";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("LINE"),BA.ObjectToString("YX_CHART"),BA.ObjectToString("AREA"),BA.ObjectToString("STACKED_AREA"),BA.ObjectToString("BUBBLE"))) {
case 0: 
case 1: 
case 2: 
case 3: 
case 4: {
 BA.debugLineNum = 8339;BA.debugLine="Scale(sY(0)).ReverseYScale = ReverseYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("ReverseYScale" /*RemoteObject*/ ,_reverseyscale);
 BA.debugLineNum = 8340;BA.debugLine="Scale(sY(1)).ReverseYScale = ReverseYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("ReverseYScale" /*RemoteObject*/ ,_reverseyscale);
 BA.debugLineNum = 8341;BA.debugLine="Scale(sY(2)).ReverseYScale = ReverseYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("ReverseYScale" /*RemoteObject*/ ,_reverseyscale);
 BA.debugLineNum = 8342;BA.debugLine="Scale(sY(3)).ReverseYScale = ReverseYScale";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("ReverseYScale" /*RemoteObject*/ ,_reverseyscale);
 break; }
}
;
 BA.debugLineNum = 8344;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setrotation(RemoteObject __ref,RemoteObject _rotation) throws Exception{
try {
		Debug.PushSubsStack("setRotation (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7916);
if (RapidSub.canDelegate("setrotation")) { return __ref.runUserSub(false, "xchart","setrotation", __ref, _rotation);}
Debug.locals.put("Rotation", _rotation);
 BA.debugLineNum = 7916;BA.debugLine="Public Sub setRotation (Rotation As Double)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7917;BA.debugLine="Graph.Rotation = Rotation";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Rotation" /*RemoteObject*/ ,_rotation);
 BA.debugLineNum = 7918;BA.debugLine="mBase.Rotation = Graph.Rotation";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"setRotation",BA.numberCast(float.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Rotation" /*RemoteObject*/ )));
 BA.debugLineNum = 7919;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setscalesonzoomedpart(RemoteObject __ref,RemoteObject _scalesonzoomedpart) throws Exception{
try {
		Debug.PushSubsStack("setScalesOnZoomedPart (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8353);
if (RapidSub.canDelegate("setscalesonzoomedpart")) { return __ref.runUserSub(false, "xchart","setscalesonzoomedpart", __ref, _scalesonzoomedpart);}
Debug.locals.put("ScalesOnZoomedPart", _scalesonzoomedpart);
 BA.debugLineNum = 8353;BA.debugLine="Public Sub setScalesOnZoomedPart(ScalesOnZoomedPar";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8354;BA.debugLine="Zoom.ScalesOnZoomedPart = ScalesOnZoomedPart";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("ScalesOnZoomedPart" /*RemoteObject*/ ,_scalesonzoomedpart);
 BA.debugLineNum = 8355;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setscaletextcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setScaleTextColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7773);
if (RapidSub.canDelegate("setscaletextcolor")) { return __ref.runUserSub(false, "xchart","setscaletextcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7773;BA.debugLine="Public Sub setScaleTextColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7774;BA.debugLine="Texts.ScaleTextColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleTextColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7775;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setscaletextsize(RemoteObject __ref,RemoteObject _scaletextsize) throws Exception{
try {
		Debug.PushSubsStack("setScaleTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7541);
if (RapidSub.canDelegate("setscaletextsize")) { return __ref.runUserSub(false, "xchart","setscaletextsize", __ref, _scaletextsize);}
Debug.locals.put("ScaleTextSize", _scaletextsize);
 BA.debugLineNum = 7541;BA.debugLine="Public Sub setScaleTextSize(ScaleTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7542;BA.debugLine="Texts.ScaleTextSize = ScaleTextSize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleTextSize" /*RemoteObject*/ ,_scaletextsize);
 BA.debugLineNum = 7543;BA.debugLine="Texts.ScaleFont = xui.CreateDefaultFont(Texts.Sca";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("ScaleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"ScaleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 7544;BA.debugLine="Texts.AutomaticTextSizes = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7545;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setscalevalues(RemoteObject __ref,RemoteObject _scalevalues) throws Exception{
try {
		Debug.PushSubsStack("setScaleValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7610);
if (RapidSub.canDelegate("setscalevalues")) { return __ref.runUserSub(false, "xchart","setscalevalues", __ref, _scalevalues);}
Debug.locals.put("ScaleValues", _scalevalues);
 BA.debugLineNum = 7610;BA.debugLine="Public Sub setScaleValues(ScaleValues As String)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7611;BA.debugLine="If ScaleValues.StartsWith(\"1!\") = False Or ScaleV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_scalevalues.runMethod(true,"startsWith",(Object)(RemoteObject.createImmutable("1!"))),xchart.__c.getField(true,"False")) || RemoteObject.solveBoolean("=",_scalevalues.runMethod(true,"endsWith",(Object)(RemoteObject.createImmutable("!10"))),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 7612;BA.debugLine="Log(\"Wrong ScaleValues property\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","915007746",RemoteObject.createImmutable("Wrong ScaleValues property"),0);
 BA.debugLineNum = 7613;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 7615;BA.debugLine="Scale(sY(0)).ScaleValues = ScaleValues";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("ScaleValues" /*RemoteObject*/ ,_scalevalues);
 BA.debugLineNum = 7616;BA.debugLine="Scale(sY(1)).ScaleValues = ScaleValues";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("ScaleValues" /*RemoteObject*/ ,_scalevalues);
 BA.debugLineNum = 7617;BA.debugLine="Scale(sY(2)).ScaleValues = ScaleValues";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("ScaleValues" /*RemoteObject*/ ,_scalevalues);
 BA.debugLineNum = 7618;BA.debugLine="Scale(sY(3)).ScaleValues = ScaleValues";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("ScaleValues" /*RemoteObject*/ ,_scalevalues);
 BA.debugLineNum = 7619;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setscalexvalueslog(RemoteObject __ref,RemoteObject _scalexvalueslog) throws Exception{
try {
		Debug.PushSubsStack("setScaleXValuesLog (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7647);
if (RapidSub.canDelegate("setscalexvalueslog")) { return __ref.runUserSub(false, "xchart","setscalexvalueslog", __ref, _scalexvalueslog);}
Debug.locals.put("ScaleXValuesLog", _scalexvalueslog);
 BA.debugLineNum = 7647;BA.debugLine="Public Sub setScaleXValuesLog(ScaleXValuesLog As S";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7648;BA.debugLine="If ScaleXValuesLog.StartsWith(\"1!\") = False Or Sc";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_scalexvalueslog.runMethod(true,"startsWith",(Object)(RemoteObject.createImmutable("1!"))),xchart.__c.getField(true,"False")) || RemoteObject.solveBoolean("=",_scalexvalueslog.runMethod(true,"endsWith",(Object)(RemoteObject.createImmutable("!10"))),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 7649;BA.debugLine="Log(\"Wrong ScaleXValuesLog property\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","915269890",RemoteObject.createImmutable("Wrong ScaleXValuesLog property"),0);
 BA.debugLineNum = 7650;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 7652;BA.debugLine="ScaleLog(sX).ScaleValues = ScaleXValuesLog";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("ScaleValues" /*RemoteObject*/ ,_scalexvalueslog);
 BA.debugLineNum = 7653;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setscaleyvalueslog(RemoteObject __ref,RemoteObject _scaleyvalueslog) throws Exception{
try {
		Debug.PushSubsStack("setScaleYValuesLog (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7630);
if (RapidSub.canDelegate("setscaleyvalueslog")) { return __ref.runUserSub(false, "xchart","setscaleyvalueslog", __ref, _scaleyvalueslog);}
Debug.locals.put("ScaleYValuesLog", _scaleyvalueslog);
 BA.debugLineNum = 7630;BA.debugLine="Public Sub setScaleYValuesLog(ScaleYValuesLog As S";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7631;BA.debugLine="If ScaleYValuesLog.StartsWith(\"1!\") = False Or Sc";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_scaleyvalueslog.runMethod(true,"startsWith",(Object)(RemoteObject.createImmutable("1!"))),xchart.__c.getField(true,"False")) || RemoteObject.solveBoolean("=",_scaleyvalueslog.runMethod(true,"endsWith",(Object)(RemoteObject.createImmutable("!10"))),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 7632;BA.debugLine="Log(\"Wrong ScaleYValuesLog property\")";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","915138818",RemoteObject.createImmutable("Wrong ScaleYValuesLog property"),0);
 BA.debugLineNum = 7633;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 7635;BA.debugLine="ScaleLog(sY(0)).ScaleValues = ScaleYValuesLog";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("ScaleValues" /*RemoteObject*/ ,_scaleyvalueslog);
 BA.debugLineNum = 7636;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setsubtitle(RemoteObject __ref,RemoteObject _subtitle) throws Exception{
try {
		Debug.PushSubsStack("setSubtitle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7990);
if (RapidSub.canDelegate("setsubtitle")) { return __ref.runUserSub(false, "xchart","setsubtitle", __ref, _subtitle);}
Debug.locals.put("Subtitle", _subtitle);
 BA.debugLineNum = 7990;BA.debugLine="Public Sub setSubtitle(Subtitle As String)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7991;BA.debugLine="Graph.Subtitle = Subtitle";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Subtitle" /*RemoteObject*/ ,_subtitle);
 BA.debugLineNum = 7992;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setsubtitletextcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setSubtitleTextColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8009);
if (RapidSub.canDelegate("setsubtitletextcolor")) { return __ref.runUserSub(false, "xchart","setsubtitletextcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 8009;BA.debugLine="Public Sub setSubtitleTextColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8010;BA.debugLine="Texts.SubtitleTextColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleTextColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 8011;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setsubtitletextsize(RemoteObject __ref,RemoteObject _subtitletextsize) throws Exception{
try {
		Debug.PushSubsStack("setSubtitleTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8000);
if (RapidSub.canDelegate("setsubtitletextsize")) { return __ref.runUserSub(false, "xchart","setsubtitletextsize", __ref, _subtitletextsize);}
Debug.locals.put("SubtitleTextSize", _subtitletextsize);
 BA.debugLineNum = 8000;BA.debugLine="Public Sub setSubtitleTextSize(SubtitleTextSize As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8001;BA.debugLine="Texts.SubtitleTextSize = SubtitleTextSize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleTextSize" /*RemoteObject*/ ,_subtitletextsize);
 BA.debugLineNum = 8002;BA.debugLine="Texts.SubtitleFont = xui.CreateDefaultFont(Texts.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("SubtitleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"SubtitleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 8003;BA.debugLine="Texts.AutomaticTextSizes = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 8004;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _settitle(RemoteObject __ref,RemoteObject _title) throws Exception{
try {
		Debug.PushSubsStack("setTitle (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7234);
if (RapidSub.canDelegate("settitle")) { return __ref.runUserSub(false, "xchart","settitle", __ref, _title);}
Debug.locals.put("Title", _title);
 BA.debugLineNum = 7234;BA.debugLine="Public Sub setTitle(Title As String)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7235;BA.debugLine="Graph.Title = Title";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("Title" /*RemoteObject*/ ,_title);
 BA.debugLineNum = 7236;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _settitletextcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setTitleTextColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7759);
if (RapidSub.canDelegate("settitletextcolor")) { return __ref.runUserSub(false, "xchart","settitletextcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7759;BA.debugLine="Public Sub setTitleTextColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7760;BA.debugLine="Texts.TitleTextColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleTextColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7761;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _settitletextsize(RemoteObject __ref,RemoteObject _titletextsize) throws Exception{
try {
		Debug.PushSubsStack("setTitleTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7517);
if (RapidSub.canDelegate("settitletextsize")) { return __ref.runUserSub(false, "xchart","settitletextsize", __ref, _titletextsize);}
Debug.locals.put("TitleTextSize", _titletextsize);
 BA.debugLineNum = 7517;BA.debugLine="Public Sub setTitleTextSize(TitleTextSize As Float";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7518;BA.debugLine="Texts.TitleTextSize = TitleTextSize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleTextSize" /*RemoteObject*/ ,_titletextsize);
 BA.debugLineNum = 7519;BA.debugLine="Texts.TitleFont = xui.CreateDefaultFont(Texts.Tit";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("TitleFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_texts" /*RemoteObject*/ ).getField(true,"TitleTextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 7520;BA.debugLine="Texts.AutomaticTextSizes = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7521;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _settop(RemoteObject __ref,RemoteObject _top) throws Exception{
try {
		Debug.PushSubsStack("setTop (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7468);
if (RapidSub.canDelegate("settop")) { return __ref.runUserSub(false, "xchart","settop", __ref, _top);}
Debug.locals.put("Top", _top);
 BA.debugLineNum = 7468;BA.debugLine="Public Sub setTop(Top As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7469;BA.debugLine="mBase.Top = Top";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"setTop",_top);
 BA.debugLineNum = 7470;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setvaluesbackgroundcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setValuesBackgroundColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7787);
if (RapidSub.canDelegate("setvaluesbackgroundcolor")) { return __ref.runUserSub(false, "xchart","setvaluesbackgroundcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7787;BA.debugLine="Public Sub setValuesBackgroundColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7788;BA.debugLine="Values.BackgroundColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("BackgroundColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7789;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setvaluestextcolor(RemoteObject __ref,RemoteObject _color) throws Exception{
try {
		Debug.PushSubsStack("setValuesTextColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7780);
if (RapidSub.canDelegate("setvaluestextcolor")) { return __ref.runUserSub(false, "xchart","setvaluestextcolor", __ref, _color);}
Debug.locals.put("Color", _color);
 BA.debugLineNum = 7780;BA.debugLine="Public Sub setValuesTextColor(Color As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7781;BA.debugLine="Values.TextColor = Color";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextColor" /*RemoteObject*/ ,_color);
 BA.debugLineNum = 7782;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setvaluestextsize(RemoteObject __ref,RemoteObject _valuestextsize) throws Exception{
try {
		Debug.PushSubsStack("setValuesTextSize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7565);
if (RapidSub.canDelegate("setvaluestextsize")) { return __ref.runUserSub(false, "xchart","setvaluestextsize", __ref, _valuestextsize);}
Debug.locals.put("ValuesTextSize", _valuestextsize);
 BA.debugLineNum = 7565;BA.debugLine="Public Sub setValuesTextSize(ValuesTextSize As Flo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7566;BA.debugLine="Values.TextSize = ValuesTextSize";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextSize" /*RemoteObject*/ ,_valuestextsize);
 BA.debugLineNum = 7567;BA.debugLine="Values.TextFont = xui.CreateDefaultFont(Values.Te";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_values" /*RemoteObject*/ ).setField ("TextFont" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(false,"CreateDefaultFont",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"TextSize" /*RemoteObject*/ ))));
 BA.debugLineNum = 7568;BA.debugLine="Texts.AutomaticTextSizes = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_texts" /*RemoteObject*/ ).setField ("AutomaticTextSizes" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7569;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setvisible(RemoteObject __ref,RemoteObject _visible) throws Exception{
try {
		Debug.PushSubsStack("setVisible (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7497);
if (RapidSub.canDelegate("setvisible")) { return __ref.runUserSub(false, "xchart","setvisible", __ref, _visible);}
Debug.locals.put("Visible", _visible);
 BA.debugLineNum = 7497;BA.debugLine="Public Sub setVisible(Visible As Boolean)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7498;BA.debugLine="mBase.Visible = Visible";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"setVisible",_visible);
 BA.debugLineNum = 7499;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setwaterfalltotalbarcolor(RemoteObject __ref,RemoteObject _waterfalltotalbarcolor) throws Exception{
try {
		Debug.PushSubsStack("setWaterfallTotalBarColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8437);
if (RapidSub.canDelegate("setwaterfalltotalbarcolor")) { return __ref.runUserSub(false, "xchart","setwaterfalltotalbarcolor", __ref, _waterfalltotalbarcolor);}
Debug.locals.put("WaterfallTotalBarColor", _waterfalltotalbarcolor);
 BA.debugLineNum = 8437;BA.debugLine="Public Sub setWaterfallTotalBarColor(WaterfallTota";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8438;BA.debugLine="Bar.TotalBarColor = WaterfallTotalBarColor";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_bar" /*RemoteObject*/ ).setField ("TotalBarColor" /*RemoteObject*/ ,_waterfalltotalbarcolor);
 BA.debugLineNum = 8439;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setwidth(RemoteObject __ref,RemoteObject _width) throws Exception{
try {
		Debug.PushSubsStack("setWidth (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7477);
if (RapidSub.canDelegate("setwidth")) { return __ref.runUserSub(false, "xchart","setwidth", __ref, _width);}
Debug.locals.put("Width", _width);
 BA.debugLineNum = 7477;BA.debugLine="Public Sub setWidth(Width As Int)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7478;BA.debugLine="mBase.Width = Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"setWidth",_width);
 BA.debugLineNum = 7479;BA.debugLine="Base_Resize(Width, mBase.Height)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_base_resize" /*RemoteObject*/ ,(Object)(BA.numberCast(double.class, _width)),(Object)(BA.numberCast(double.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 7480;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxaxisname(RemoteObject __ref,RemoteObject _xaxisname) throws Exception{
try {
		Debug.PushSubsStack("setXAxisName (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7243);
if (RapidSub.canDelegate("setxaxisname")) { return __ref.runUserSub(false, "xchart","setxaxisname", __ref, _xaxisname);}
Debug.locals.put("XAxisName", _xaxisname);
 BA.debugLineNum = 7243;BA.debugLine="Public Sub setXAxisName(XAxisName As String)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7244;BA.debugLine="Graph.XAxisName = XAxisName";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XAxisName" /*RemoteObject*/ ,_xaxisname);
 BA.debugLineNum = 7245;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxmaxvalue(RemoteObject __ref,RemoteObject _maxvalue) throws Exception{
try {
		Debug.PushSubsStack("setXMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8137);
if (RapidSub.canDelegate("setxmaxvalue")) { return __ref.runUserSub(false, "xchart","setxmaxvalue", __ref, _maxvalue);}
Debug.locals.put("MaxValue", _maxvalue);
 BA.debugLineNum = 8137;BA.debugLine="Public Sub setXMaxValue(MaxValue As Double)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8138;BA.debugLine="Scale(sX).MaxManu = MaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MaxManu" /*RemoteObject*/ ,_maxvalue);
 BA.debugLineNum = 8139;BA.debugLine="Scale(sX).MaxVal = MaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MaxVal" /*RemoteObject*/ ,_maxvalue);
 BA.debugLineNum = 8140;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxminvalue(RemoteObject __ref,RemoteObject _minvalue) throws Exception{
try {
		Debug.PushSubsStack("setXMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8113);
if (RapidSub.canDelegate("setxminvalue")) { return __ref.runUserSub(false, "xchart","setxminvalue", __ref, _minvalue);}
Debug.locals.put("MinValue", _minvalue);
 BA.debugLineNum = 8113;BA.debugLine="Public Sub setXMinValue(MinValue As Double)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8114;BA.debugLine="Scale(sX).MinManu = MinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MinManu" /*RemoteObject*/ ,_minvalue);
 BA.debugLineNum = 8115;BA.debugLine="Scale(sX).MinVal = MinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MinVal" /*RemoteObject*/ ,_minvalue);
 BA.debugLineNum = 8116;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxscalelogarithmic(RemoteObject __ref,RemoteObject _xscalelogarithmic) throws Exception{
try {
		Debug.PushSubsStack("setXScaleLogarithmic (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8104);
if (RapidSub.canDelegate("setxscalelogarithmic")) { return __ref.runUserSub(false, "xchart","setxscalelogarithmic", __ref, _xscalelogarithmic);}
Debug.locals.put("XScaleLogarithmic", _xscalelogarithmic);
 BA.debugLineNum = 8104;BA.debugLine="Public Sub setXScaleLogarithmic(XScaleLogarithmic";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8105;BA.debugLine="Scale(sX).Logarithmic = XScaleLogarithmic";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Logarithmic" /*RemoteObject*/ ,_xscalelogarithmic);
 BA.debugLineNum = 8106;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxscalemaxvalue(RemoteObject __ref,RemoteObject _xscalemaxvalue) throws Exception{
try {
		Debug.PushSubsStack("setXScaleMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7348);
if (RapidSub.canDelegate("setxscalemaxvalue")) { return __ref.runUserSub(false, "xchart","setxscalemaxvalue", __ref, _xscalemaxvalue);}
Debug.locals.put("XScaleMaxValue", _xscalemaxvalue);
 BA.debugLineNum = 7348;BA.debugLine="Public Sub setXScaleMaxValue(XScaleMaxValue As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7349;BA.debugLine="Scale(sX).MaxManu = XScaleMaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MaxManu" /*RemoteObject*/ ,_xscalemaxvalue);
 BA.debugLineNum = 7350;BA.debugLine="Scale(sX).MaxVal = XScaleMaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MaxVal" /*RemoteObject*/ ,_xscalemaxvalue);
 BA.debugLineNum = 7351;BA.debugLine="Scale(sX).Automatic = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Automatic" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7352;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxscaleminvalue(RemoteObject __ref,RemoteObject _xscaleminvalue) throws Exception{
try {
		Debug.PushSubsStack("setXScaleMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7362);
if (RapidSub.canDelegate("setxscaleminvalue")) { return __ref.runUserSub(false, "xchart","setxscaleminvalue", __ref, _xscaleminvalue);}
Debug.locals.put("XScaleMinValue", _xscaleminvalue);
 BA.debugLineNum = 7362;BA.debugLine="Public Sub setXScaleMinValue(XScaleMinValue As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7363;BA.debugLine="Scale(sX).MinManu = XScaleMinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MinManu" /*RemoteObject*/ ,_xscaleminvalue);
 BA.debugLineNum = 7364;BA.debugLine="Scale(sX).MinVal = XScaleMinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("MinVal" /*RemoteObject*/ ,_xscaleminvalue);
 BA.debugLineNum = 7365;BA.debugLine="Scale(sX).Automatic = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("Automatic" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7366;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxscaletextorientation(RemoteObject __ref,RemoteObject _xscaletextorientation) throws Exception{
try {
		Debug.PushSubsStack("setXScaleTextOrientation (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7435);
if (RapidSub.canDelegate("setxscaletextorientation")) { return __ref.runUserSub(false, "xchart","setxscaletextorientation", __ref, _xscaletextorientation);}
Debug.locals.put("XScaleTextOrientation", _xscaletextorientation);
 BA.debugLineNum = 7435;BA.debugLine="Public Sub setXScaleTextOrientation(XScaleTextOrie";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7436;BA.debugLine="Graph.XScaleTextOrientation = XScaleTextOrientati";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("XScaleTextOrientation" /*RemoteObject*/ ,_xscaletextorientation);
 BA.debugLineNum = 7437;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxzeroaxis(RemoteObject __ref,RemoteObject _xzeroaxis) throws Exception{
try {
		Debug.PushSubsStack("setXZeroAxis (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7857);
if (RapidSub.canDelegate("setxzeroaxis")) { return __ref.runUserSub(false, "xchart","setxzeroaxis", __ref, _xzeroaxis);}
Debug.locals.put("XZeroAxis", _xzeroaxis);
 BA.debugLineNum = 7857;BA.debugLine="Public Sub setXZeroAxis (XZeroAxis As Boolean)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7858;BA.debugLine="Scale(sX).YZeroAxis = XZeroAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("YZeroAxis" /*RemoteObject*/ ,_xzeroaxis);
 BA.debugLineNum = 7859;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setxzeroaxishighlight(RemoteObject __ref,RemoteObject _xzeroaxishighlight) throws Exception{
try {
		Debug.PushSubsStack("setXZeroAxisHighlight (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7867);
if (RapidSub.canDelegate("setxzeroaxishighlight")) { return __ref.runUserSub(false, "xchart","setxzeroaxishighlight", __ref, _xzeroaxishighlight);}
Debug.locals.put("XZeroAxisHighlight", _xzeroaxishighlight);
 BA.debugLineNum = 7867;BA.debugLine="Public Sub setXZeroAxisHighlight (XZeroAxisHighlig";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7868;BA.debugLine="Scale(sX).YZeroAxisHighlight = XZeroAxisHighlight";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).setField ("YZeroAxisHighlight" /*RemoteObject*/ ,_xzeroaxishighlight);
 BA.debugLineNum = 7869;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyaxisname(RemoteObject __ref,RemoteObject _yaxisname) throws Exception{
try {
		Debug.PushSubsStack("setYAxisName (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7253);
if (RapidSub.canDelegate("setyaxisname")) { return __ref.runUserSub(false, "xchart","setyaxisname", __ref, _yaxisname);}
Debug.locals.put("YAxisName", _yaxisname);
 BA.debugLineNum = 7253;BA.debugLine="Public Sub setYAxisName(YAxisName As String)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7254;BA.debugLine="Graph.YAxisName = YAxisName";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("YAxisName" /*RemoteObject*/ ,_yaxisname);
 BA.debugLineNum = 7255;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyaxisname2(RemoteObject __ref,RemoteObject _yaxisname2) throws Exception{
try {
		Debug.PushSubsStack("setYAxisName2 (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7264);
if (RapidSub.canDelegate("setyaxisname2")) { return __ref.runUserSub(false, "xchart","setyaxisname2", __ref, _yaxisname2);}
Debug.locals.put("YAxisName2", _yaxisname2);
 BA.debugLineNum = 7264;BA.debugLine="Public Sub setYAxisName2(YAxisName2 As String)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7265;BA.debugLine="Graph.YAxisName2 = YAxisName2";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_graph" /*RemoteObject*/ ).setField ("YAxisName2" /*RemoteObject*/ ,_yaxisname2);
 BA.debugLineNum = 7266;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setymaxvalue(RemoteObject __ref,RemoteObject _maxvalue) throws Exception{
try {
		Debug.PushSubsStack("setYMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8157);
if (RapidSub.canDelegate("setymaxvalue")) { return __ref.runUserSub(false, "xchart","setymaxvalue", __ref, _maxvalue);}
Debug.locals.put("MaxValue", _maxvalue);
 BA.debugLineNum = 8157;BA.debugLine="Public Sub setYMaxValue(MaxValue As Double)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8158;BA.debugLine="Scale(sY(0)).MaxManu = MaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MaxManu" /*RemoteObject*/ ,_maxvalue);
 BA.debugLineNum = 8159;BA.debugLine="Scale(sY(0)).MaxVal = MaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MaxVal" /*RemoteObject*/ ,_maxvalue);
 BA.debugLineNum = 8160;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyminvalue(RemoteObject __ref,RemoteObject _minvalue) throws Exception{
try {
		Debug.PushSubsStack("setYMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8147);
if (RapidSub.canDelegate("setyminvalue")) { return __ref.runUserSub(false, "xchart","setyminvalue", __ref, _minvalue);}
Debug.locals.put("MinValue", _minvalue);
 BA.debugLineNum = 8147;BA.debugLine="Public Sub setYMinValue(MinValue As Double)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8148;BA.debugLine="Scale(sY(0)).MinManu = MinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MinManu" /*RemoteObject*/ ,_minvalue);
 BA.debugLineNum = 8149;BA.debugLine="Scale(sY(0)).MinVal = MinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MinVal" /*RemoteObject*/ ,_minvalue);
 BA.debugLineNum = 8150;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyscalelogaritmic(RemoteObject __ref,RemoteObject _yscalelogarithmic) throws Exception{
try {
		Debug.PushSubsStack("setYScaleLogaritmic (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8093);
if (RapidSub.canDelegate("setyscalelogaritmic")) { return __ref.runUserSub(false, "xchart","setyscalelogaritmic", __ref, _yscalelogarithmic);}
Debug.locals.put("YScaleLogarithmic", _yscalelogarithmic);
 BA.debugLineNum = 8093;BA.debugLine="Public Sub setYScaleLogaritmic(YScaleLogarithmic A";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8094;BA.debugLine="Scale(sY(0)).Logarithmic = YScaleLogarithmic";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Logarithmic" /*RemoteObject*/ ,_yscalelogarithmic);
 BA.debugLineNum = 8095;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyscalemaxvalue(RemoteObject __ref,RemoteObject _yscalemaxvalue) throws Exception{
try {
		Debug.PushSubsStack("setYScaleMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7275);
if (RapidSub.canDelegate("setyscalemaxvalue")) { return __ref.runUserSub(false, "xchart","setyscalemaxvalue", __ref, _yscalemaxvalue);}
Debug.locals.put("YScaleMaxValue", _yscalemaxvalue);
 BA.debugLineNum = 7275;BA.debugLine="Public Sub setYScaleMaxValue(YScaleMaxValue As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7276;BA.debugLine="Scale(sY(0)).MaxManu = YScaleMaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MaxManu" /*RemoteObject*/ ,_yscalemaxvalue);
 BA.debugLineNum = 7277;BA.debugLine="Scale(sY(0)).MaxVal = YScaleMaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MaxVal" /*RemoteObject*/ ,_yscalemaxvalue);
 BA.debugLineNum = 7278;BA.debugLine="Scale(sY(0)).Automatic = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Automatic" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7279;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyscaleminvalue(RemoteObject __ref,RemoteObject _yscaleminvalue) throws Exception{
try {
		Debug.PushSubsStack("setYScaleMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7311);
if (RapidSub.canDelegate("setyscaleminvalue")) { return __ref.runUserSub(false, "xchart","setyscaleminvalue", __ref, _yscaleminvalue);}
Debug.locals.put("YScaleMinValue", _yscaleminvalue);
 BA.debugLineNum = 7311;BA.debugLine="Public Sub setYScaleMinValue(YScaleMinValue As Dou";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7312;BA.debugLine="Scale(sY(0)).MinManu = YScaleMinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MinManu" /*RemoteObject*/ ,_yscaleminvalue);
 BA.debugLineNum = 7313;BA.debugLine="Scale(sY(0)).MinVal = YScaleMinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("MinVal" /*RemoteObject*/ ,_yscaleminvalue);
 BA.debugLineNum = 7314;BA.debugLine="Scale(sY(0)).Automatic = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("Automatic" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 7315;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyscalenmaxvalue(RemoteObject __ref,RemoteObject _index,RemoteObject _yscalemaxvalue) throws Exception{
try {
		Debug.PushSubsStack("SetYScaleNMaxValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7293);
if (RapidSub.canDelegate("setyscalenmaxvalue")) { return __ref.runUserSub(false, "xchart","setyscalenmaxvalue", __ref, _index, _yscalemaxvalue);}
Debug.locals.put("Index", _index);
Debug.locals.put("YScaleMaxValue", _yscalemaxvalue);
 BA.debugLineNum = 7293;BA.debugLine="Public Sub SetYScaleNMaxValue(Index As Int, YScale";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7294;BA.debugLine="If Index >= 0 And Index < NbMaxDifferentScales Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_index,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("<",_index,BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 7295;BA.debugLine="Scale(sY(Index)).MaxAuto = YScaleMaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("MaxAuto" /*RemoteObject*/ ,_yscalemaxvalue);
 BA.debugLineNum = 7296;BA.debugLine="Scale(sY(Index)).MaxManu = YScaleMaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("MaxManu" /*RemoteObject*/ ,_yscalemaxvalue);
 BA.debugLineNum = 7297;BA.debugLine="Scale(sY(Index)).MaxVal = YScaleMaxValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("MaxVal" /*RemoteObject*/ ,_yscalemaxvalue);
 BA.debugLineNum = 7298;BA.debugLine="Scale(sY(Index)).Automatic = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("Automatic" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 }else {
 BA.debugLineNum = 7300;BA.debugLine="Log(\"Wrong Index value \" & Index & \", must be be";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","911599879",RemoteObject.concat(RemoteObject.createImmutable("Wrong Index value "),_index,RemoteObject.createImmutable(", must be between 0 and 3")),0);
 };
 BA.debugLineNum = 7302;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyscalenminvalue(RemoteObject __ref,RemoteObject _index,RemoteObject _yscaleminvalue) throws Exception{
try {
		Debug.PushSubsStack("SetYScaleNMinValue (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7329);
if (RapidSub.canDelegate("setyscalenminvalue")) { return __ref.runUserSub(false, "xchart","setyscalenminvalue", __ref, _index, _yscaleminvalue);}
Debug.locals.put("Index", _index);
Debug.locals.put("YScaleMinValue", _yscaleminvalue);
 BA.debugLineNum = 7329;BA.debugLine="Public Sub SetYScaleNMinValue(Index As Int, YScale";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7330;BA.debugLine="If Index >= 0 And Index < NbMaxDifferentScales Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",_index,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("<",_index,BA.numberCast(double.class, __ref.getField(true,"_nbmaxdifferentscales" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 7331;BA.debugLine="Scale(sY(Index)).MinAuto = YScaleMinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("MinAuto" /*RemoteObject*/ ,_yscaleminvalue);
 BA.debugLineNum = 7332;BA.debugLine="Scale(sY(Index)).MinManu = YScaleMinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("MinManu" /*RemoteObject*/ ,_yscaleminvalue);
 BA.debugLineNum = 7333;BA.debugLine="Scale(sY(Index)).MinVal = YScaleMinValue";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("MinVal" /*RemoteObject*/ ,_yscaleminvalue);
 BA.debugLineNum = 7334;BA.debugLine="Scale(sY(Index)).Automatic = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,_index)).setField ("Automatic" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 }else {
 BA.debugLineNum = 7336;BA.debugLine="Log(\"Wrong Index value \" & Index & \", must be be";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("LogImpl","911862023",RemoteObject.concat(RemoteObject.createImmutable("Wrong Index value "),_index,RemoteObject.createImmutable(", must be between 0 and 3")),0);
 };
 BA.debugLineNum = 7338;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyxchartcrosshaircolor(RemoteObject __ref,RemoteObject _yxchartcrosshaircolor) throws Exception{
try {
		Debug.PushSubsStack("setYXChartCrossHairColor (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8314);
if (RapidSub.canDelegate("setyxchartcrosshaircolor")) { return __ref.runUserSub(false, "xchart","setyxchartcrosshaircolor", __ref, _yxchartcrosshaircolor);}
Debug.locals.put("YXChartCrossHairColor", _yxchartcrosshaircolor);
 BA.debugLineNum = 8314;BA.debugLine="Public Sub setYXChartCrossHairColor(YXChartCrossHa";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8315;BA.debugLine="mYXChartCrossHairColor = YXChartCrossHairColor";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartcrosshaircolor" /*RemoteObject*/ ,_yxchartcrosshaircolor);
 BA.debugLineNum = 8316;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyxchartcrosshairdeltay(RemoteObject __ref,RemoteObject _yxchartcrosshairdeltay) throws Exception{
try {
		Debug.PushSubsStack("setYXChartCrossHairDeltaY (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8303);
if (RapidSub.canDelegate("setyxchartcrosshairdeltay")) { return __ref.runUserSub(false, "xchart","setyxchartcrosshairdeltay", __ref, _yxchartcrosshairdeltay);}
Debug.locals.put("YXChartCrossHairDeltaY", _yxchartcrosshairdeltay);
 BA.debugLineNum = 8303;BA.debugLine="Public Sub setYXChartCrossHairDeltaY(YXChartCrossH";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8304;BA.debugLine="mYXChartCrossHairDeltaY = YXChartCrossHairDeltaY";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartcrosshairdeltay" /*RemoteObject*/ ,_yxchartcrosshairdeltay);
 BA.debugLineNum = 8305;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyxchartdisplaycrosshair(RemoteObject __ref,RemoteObject _yxchartdisplaycrosshair) throws Exception{
try {
		Debug.PushSubsStack("setYXChartDisplayCrossHair (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8292);
if (RapidSub.canDelegate("setyxchartdisplaycrosshair")) { return __ref.runUserSub(false, "xchart","setyxchartdisplaycrosshair", __ref, _yxchartdisplaycrosshair);}
Debug.locals.put("YXChartDisplayCrossHair", _yxchartdisplaycrosshair);
 BA.debugLineNum = 8292;BA.debugLine="Public Sub setYXChartDisplayCrossHair(YXChartDispl";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8293;BA.debugLine="mYXChartDisplayCrossHair = YXChartDisplayCrossHai";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartdisplaycrosshair" /*RemoteObject*/ ,_yxchartdisplaycrosshair);
 BA.debugLineNum = 8294;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyxchartdisplayposition(RemoteObject __ref,RemoteObject _yxchartdisplayposition) throws Exception{
try {
		Debug.PushSubsStack("setYXChartDisplayPosition (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8278);
if (RapidSub.canDelegate("setyxchartdisplayposition")) { return __ref.runUserSub(false, "xchart","setyxchartdisplayposition", __ref, _yxchartdisplayposition);}
Debug.locals.put("YXChartDisplayPosition", _yxchartdisplayposition);
 BA.debugLineNum = 8278;BA.debugLine="Public Sub setYXChartDisplayPosition(YXChartDispla";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8279;BA.debugLine="Select YXChartDisplayPosition";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(_yxchartdisplayposition,BA.ObjectToString("CURSOR"),BA.ObjectToString("CORNERS"))) {
case 0: 
case 1: {
 BA.debugLineNum = 8281;BA.debugLine="mYXChartDisplayPosition = YXChartDisplayPositio";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartdisplayposition" /*RemoteObject*/ ,_yxchartdisplayposition);
 break; }
}
;
 BA.debugLineNum = 8284;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyxchartdisplayvalues(RemoteObject __ref,RemoteObject _yxchartdisplayvalues) throws Exception{
try {
		Debug.PushSubsStack("setYXChartDisplayValues (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8264);
if (RapidSub.canDelegate("setyxchartdisplayvalues")) { return __ref.runUserSub(false, "xchart","setyxchartdisplayvalues", __ref, _yxchartdisplayvalues);}
Debug.locals.put("YXChartDisplayValues", _yxchartdisplayvalues);
 BA.debugLineNum = 8264;BA.debugLine="Public Sub setYXChartDisplayValues(YXChartDisplayV";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8265;BA.debugLine="mYXChartDisplayValues = YXChartDisplayValues";
Debug.JustUpdateDeviceLine();
__ref.setField ("_myxchartdisplayvalues" /*RemoteObject*/ ,_yxchartdisplayvalues);
 BA.debugLineNum = 8267;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyzeroaxis(RemoteObject __ref,RemoteObject _yzeroaxis) throws Exception{
try {
		Debug.PushSubsStack("setYZeroAxis (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7878);
if (RapidSub.canDelegate("setyzeroaxis")) { return __ref.runUserSub(false, "xchart","setyzeroaxis", __ref, _yzeroaxis);}
Debug.locals.put("YZeroAxis", _yzeroaxis);
 BA.debugLineNum = 7878;BA.debugLine="Public Sub setYZeroAxis (YZeroAxis As Boolean)";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7879;BA.debugLine="Scale(sY(0)).YZeroAxis = YZeroAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("YZeroAxis" /*RemoteObject*/ ,_yzeroaxis);
 BA.debugLineNum = 7880;BA.debugLine="Scale(sY(1)).YZeroAxis = YZeroAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("YZeroAxis" /*RemoteObject*/ ,_yzeroaxis);
 BA.debugLineNum = 7881;BA.debugLine="Scale(sY(2)).YZeroAxis = YZeroAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("YZeroAxis" /*RemoteObject*/ ,_yzeroaxis);
 BA.debugLineNum = 7882;BA.debugLine="Scale(sY(3)).YZeroAxis = YZeroAxis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("YZeroAxis" /*RemoteObject*/ ,_yzeroaxis);
 BA.debugLineNum = 7883;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setyzeroaxishighlight(RemoteObject __ref,RemoteObject _yzeroaxishighlight) throws Exception{
try {
		Debug.PushSubsStack("setYZeroAxisHighlight (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,7891);
if (RapidSub.canDelegate("setyzeroaxishighlight")) { return __ref.runUserSub(false, "xchart","setyzeroaxishighlight", __ref, _yzeroaxishighlight);}
Debug.locals.put("YZeroAxisHighlight", _yzeroaxishighlight);
 BA.debugLineNum = 7891;BA.debugLine="Public Sub setYZeroAxisHighlight (YZeroAxisHighlig";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 7892;BA.debugLine="Scale(sY(0)).YZeroAxisHighlight = YZeroAxisHighli";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).setField ("YZeroAxisHighlight" /*RemoteObject*/ ,_yzeroaxishighlight);
 BA.debugLineNum = 7893;BA.debugLine="Scale(sY(1)).YZeroAxisHighlight = YZeroAxisHighli";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 1))).setField ("YZeroAxisHighlight" /*RemoteObject*/ ,_yzeroaxishighlight);
 BA.debugLineNum = 7894;BA.debugLine="Scale(sY(2)).YZeroAxisHighlight = YZeroAxisHighli";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 2))).setField ("YZeroAxisHighlight" /*RemoteObject*/ ,_yzeroaxishighlight);
 BA.debugLineNum = 7895;BA.debugLine="Scale(sY(3)).YZeroAxisHighlight = YZeroAxisHighli";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 3))).setField ("YZeroAxisHighlight" /*RemoteObject*/ ,_yzeroaxishighlight);
 BA.debugLineNum = 7896;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setzoombarenabled(RemoteObject __ref,RemoteObject _zoombarenabled) throws Exception{
try {
		Debug.PushSubsStack("setZoomBarEnabled (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9089);
if (RapidSub.canDelegate("setzoombarenabled")) { return __ref.runUserSub(false, "xchart","setzoombarenabled", __ref, _zoombarenabled);}
Debug.locals.put("ZoomBarEnabled", _zoombarenabled);
 BA.debugLineNum = 9089;BA.debugLine="Public Sub setZoomBarEnabled(ZoomBarEnabled As Boo";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9090;BA.debugLine="Zoom.Enabled = ZoomBarEnabled";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Enabled" /*RemoteObject*/ ,_zoombarenabled);
 BA.debugLineNum = 9091;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setzoomindexes(RemoteObject __ref,RemoteObject _beginindex,RemoteObject _endindex) throws Exception{
try {
		Debug.PushSubsStack("SetZoomIndexes (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8908);
if (RapidSub.canDelegate("setzoomindexes")) { return __ref.runUserSub(false, "xchart","setzoomindexes", __ref, _beginindex, _endindex);}
RemoteObject _val = RemoteObject.createImmutable(0);
Debug.locals.put("BeginIndex", _beginindex);
Debug.locals.put("EndIndex", _endindex);
 BA.debugLineNum = 8908;BA.debugLine="Public Sub SetZoomIndexes(BeginIndex As Int, EndIn";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8909;BA.debugLine="Private Val As Int";
Debug.JustUpdateDeviceLine();
_val = RemoteObject.createImmutable(0);Debug.locals.put("Val", _val);
 BA.debugLineNum = 8911;BA.debugLine="If BeginIndex = Zoom.BeginIndex And EndIndex = Zo";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_beginindex,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("=",_endindex,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 8912;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 8915;BA.debugLine="If Zoom.EndIndex = 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 8916;BA.debugLine="BeginIndex = Max(BeginIndex, 0)";
Debug.JustUpdateDeviceLine();
_beginindex = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, _beginindex)),(Object)(BA.numberCast(double.class, 0))));Debug.locals.put("BeginIndex", _beginindex);
 BA.debugLineNum = 8917;BA.debugLine="EndIndex = Min(EndIndex, Points.Size - 1)";
Debug.JustUpdateDeviceLine();
_endindex = BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, _endindex)),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1)))));Debug.locals.put("EndIndex", _endindex);
 }else {
 };
 BA.debugLineNum = 8923;BA.debugLine="If EndIndex - BeginIndex > Points.Size - 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",RemoteObject.solve(new RemoteObject[] {_endindex,_beginindex}, "-",1, 1),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1)))) { 
 BA.debugLineNum = 8924;BA.debugLine="BeginIndex = 0";
Debug.JustUpdateDeviceLine();
_beginindex = BA.numberCast(int.class, 0);Debug.locals.put("BeginIndex", _beginindex);
 BA.debugLineNum = 8925;BA.debugLine="EndIndex = Points.Size - 1";
Debug.JustUpdateDeviceLine();
_endindex = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1);Debug.locals.put("EndIndex", _endindex);
 };
 BA.debugLineNum = 8928;BA.debugLine="If BeginIndex > EndIndex Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_beginindex,BA.numberCast(double.class, _endindex))) { 
 BA.debugLineNum = 8929;BA.debugLine="Val = EndIndex";
Debug.JustUpdateDeviceLine();
_val = _endindex;Debug.locals.put("Val", _val);
 BA.debugLineNum = 8930;BA.debugLine="EndIndex = BeginIndex";
Debug.JustUpdateDeviceLine();
_endindex = _beginindex;Debug.locals.put("EndIndex", _endindex);
 BA.debugLineNum = 8931;BA.debugLine="BeginIndex = Val";
Debug.JustUpdateDeviceLine();
_beginindex = _val;Debug.locals.put("BeginIndex", _beginindex);
 };
 BA.debugLineNum = 8934;BA.debugLine="Zoom.BeginIndex = Max(0, BeginIndex)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 0)),(Object)(BA.numberCast(double.class, _beginindex)))));
 BA.debugLineNum = 8935;BA.debugLine="Zoom.BeginIndex = Min(Zoom.BeginIndex, Points.Siz";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ))),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(2)}, "-",1, 1))))));
 BA.debugLineNum = 8937;BA.debugLine="Zoom.EndIndex = Min(Points.Size - 1, EndIndex)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1))),(Object)(BA.numberCast(double.class, _endindex)))));
 BA.debugLineNum = 8938;BA.debugLine="Zoom.NbVisiblePoints = EndIndex - BeginIndex + 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("NbVisiblePoints" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {_endindex,_beginindex,RemoteObject.createImmutable(1)}, "-+",2, 1));
 BA.debugLineNum = 8940;BA.debugLine="If Zoom.NbVisiblePoints > Points.Size Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize")))) { 
 BA.debugLineNum = 8941;BA.debugLine="UnZoom";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_unzoom" /*RemoteObject*/ );
 }else 
{ BA.debugLineNum = 8942;BA.debugLine="Else If Zoom.EndIndex > Points.Size - 1 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1)))) { 
 BA.debugLineNum = 8943;BA.debugLine="Zoom.EndIndex = Points.Size - 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1));
 BA.debugLineNum = 8944;BA.debugLine="Zoom.BeginIndex = Zoom.EndIndex - Zoom.NbVisible";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-+",2, 1));
 }}
;
 BA.debugLineNum = 8947;BA.debugLine="If Zoom.NbVisiblePoints = Points.Size Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),BA.numberCast(double.class, __ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize")))) { 
 BA.debugLineNum = 8948;BA.debugLine="Zoom.Active = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Active" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 }else {
 BA.debugLineNum = 8950;BA.debugLine="Zoom.Active = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Active" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 };
 BA.debugLineNum = 8953;BA.debugLine="If Zoom.Active = True Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Active" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 8954;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 8955;BA.debugLine="If xpnlZoomBar.Visible = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getVisible"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8956;BA.debugLine="xpnlGraph.Width = mBase.Width - Zoom.BarWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setWidth",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 8957;BA.debugLine="xpnlCursor.Width = mBase.Width - Zoom.BarWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setWidth",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 8958;BA.debugLine="xcvsGraph.Resize(xpnlGraph.Width, mBase.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 8959;BA.debugLine="xcvsCursor.Resize(xpnlCursor.Width, mBase.Heig";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 };
 BA.debugLineNum = 8962;BA.debugLine="xpnlZoomBar.Visible = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"True"));
 BA.debugLineNum = 8963;BA.debugLine="Zoom.CursorLength = Max(15dip, (xpnlZoomBar.Hei";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorLength" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 15))))),(Object)(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"),RemoteObject.createImmutable(2),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-*",1, 1)),__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "/*",0, 0)))));
 }else {
 BA.debugLineNum = 8965;BA.debugLine="If xpnlZoomBar.Visible = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getVisible"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 8966;BA.debugLine="xpnlGraph.Height = mBase.Height - xpnlZoomBar.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setHeight",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight")}, "-",1, 1));
 BA.debugLineNum = 8967;BA.debugLine="xpnlCursor.Height = mBase.Height - xpnlZoomBar";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setHeight",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight")}, "-",1, 1));
 BA.debugLineNum = 8968;BA.debugLine="xcvsGraph.Resize(mBase.Width, xpnlGraph.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 8969;BA.debugLine="xcvsCursor.Resize(mBase.Width, xpnlGraph.Heigh";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 };
 BA.debugLineNum = 8972;BA.debugLine="xpnlZoomBar.Visible = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"True"));
 BA.debugLineNum = 8973;BA.debugLine="Zoom.CursorLength = Max(15dip, (xpnlZoomBar.Wid";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorLength" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 15))))),(Object)(RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth"),RemoteObject.createImmutable(2),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-*",1, 1)),__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "/*",0, 0)))));
 };
 BA.debugLineNum = 8975;BA.debugLine="ZoomCursorDraw";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoomcursordraw" /*RemoteObject*/ );
 BA.debugLineNum = 8976;BA.debugLine="Zoom.BigStep = Zoom.NbVisiblePoints";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BigStep" /*RemoteObject*/ ,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ));
 }else {
 BA.debugLineNum = 8978;BA.debugLine="xpnlZoomBar.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 };
 BA.debugLineNum = 8980;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _setzoomsteps(RemoteObject __ref,RemoteObject _smallstep,RemoteObject _bigstep) throws Exception{
try {
		Debug.PushSubsStack("SetZoomSteps (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,9047);
if (RapidSub.canDelegate("setzoomsteps")) { return __ref.runUserSub(false, "xchart","setzoomsteps", __ref, _smallstep, _bigstep);}
Debug.locals.put("SmallStep", _smallstep);
Debug.locals.put("BigStep", _bigstep);
 BA.debugLineNum = 9047;BA.debugLine="Public Sub SetZoomSteps(SmallStep As Int, BigStep";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 9048;BA.debugLine="Zoom.SmallStep = SmallStep";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("SmallStep" /*RemoteObject*/ ,_smallstep);
 BA.debugLineNum = 9049;BA.debugLine="Zoom.BigStep = BigStep";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BigStep" /*RemoteObject*/ ,_bigstep);
 BA.debugLineNum = 9050;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _unzoom(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("UnZoom (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,8983);
if (RapidSub.canDelegate("unzoom")) { return __ref.runUserSub(false, "xchart","unzoom", __ref);}
 BA.debugLineNum = 8983;BA.debugLine="Public Sub UnZoom";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 8984;BA.debugLine="Zoom.NbVisiblePoints = Points.Size";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("NbVisiblePoints" /*RemoteObject*/ ,__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"));
 BA.debugLineNum = 8985;BA.debugLine="Zoom.BeginIndex = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,BA.numberCast(int.class, 0));
 BA.debugLineNum = 8986;BA.debugLine="Zoom.EndIndex = Points.Size - 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1));
 BA.debugLineNum = 8987;BA.debugLine="Zoom.Active = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Active" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 8989;BA.debugLine="xpnlZoomBar.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 8990;BA.debugLine="xpnlGraph.Height = mBase.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 8991;BA.debugLine="xpnlCursor.Height = mBase.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 8992;BA.debugLine="xcvsGraph.Resize(mBase.Width, mBase.Height)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvsgraph" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 8993;BA.debugLine="xcvsCursor.Resize(mBase.Width, mBase.Height)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Resize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 8995;BA.debugLine="If Points.Size > 0 Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),BA.numberCast(double.class, 0))) { 
 BA.debugLineNum = 8996;BA.debugLine="DrawChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawchart" /*RemoteObject*/ );
 };
 BA.debugLineNum = 8998;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _xpnlcursor_touch(RemoteObject __ref,RemoteObject _action,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("xpnlCursor_Touch (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,465);
if (RapidSub.canDelegate("xpnlcursor_touch")) { return __ref.runUserSub(false, "xchart","xpnlcursor_touch", __ref, _action, _x, _y);}
RemoteObject _pointx = RemoteObject.createImmutable(0);
RemoteObject _pointy = RemoteObject.createImmutable(0);
RemoteObject _logval = RemoteObject.createImmutable(0);
RemoteObject _pointindex = RemoteObject.createImmutable(0);
Debug.locals.put("Action", _action);
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
 BA.debugLineNum = 465;BA.debugLine="Private Sub xpnlCursor_Touch (Action As Int, X As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 466;BA.debugLine="If Action = xpnlCursor.TOUCH_ACTION_MOVE_NOTOUCH";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_MOVE_NOTOUCH")))) { 
 BA.debugLineNum = 467;BA.debugLine="If Values.Show = True And Values.ShowOnHover = T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"ShowOnHover" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 468;BA.debugLine="If X > Graph.Left And X < Graph.Right And Y > G";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))) && RemoteObject.solveBoolean(">",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 469;BA.debugLine="DrawItemValues(X, Y)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawitemvalues" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, _x)),(Object)(BA.numberCast(int.class, _y)));
 BA.debugLineNum = 470;BA.debugLine="xpnlValues.Visible = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"True"));
 }else {
 BA.debugLineNum = 472;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 473;BA.debugLine="xcvsCursor.ClearRect(Values.rectCursor)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ )));
 };
 };
 };
 BA.debugLineNum = 478;BA.debugLine="If Graph.ChartType = \"YX_CHART\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART"))) { 
 BA.debugLineNum = 479;BA.debugLine="If (Action = 0 Or Action = 2) And X >= Graph.Lef";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, 2))))) && RemoteObject.solveBoolean("g",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("k",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("g",_y,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(true,"_myxchartcrosshairdeltay" /*RemoteObject*/ )}, "+",1, 1))) && RemoteObject.solveBoolean("k",_y,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(true,"_myxchartcrosshairdeltay" /*RemoteObject*/ )}, "+",1, 1)))) { 
 BA.debugLineNum = 480;BA.debugLine="If xui.SubExists(mCallBack, mEventName & \"_Touc";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"SubExists",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_Touch"))),(Object)(BA.numberCast(int.class, 2))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 481;BA.debugLine="Private PointX, PointY, LogVal As Double";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.createImmutable(0);Debug.locals.put("PointX", _pointx);
_pointy = RemoteObject.createImmutable(0);Debug.locals.put("PointY", _pointy);
_logval = RemoteObject.createImmutable(0);Debug.locals.put("LogVal", _logval);
 BA.debugLineNum = 482;BA.debugLine="If Scale(sX).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 483;BA.debugLine="PointX = Scale(sX).MinVal + (X - Graph.Left)";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointX", _pointx);
 }else {
 BA.debugLineNum = 485;BA.debugLine="LogVal = (X - Graph.Left) / ScaleLog(sX).Scal";
Debug.JustUpdateDeviceLine();
_logval = RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"LogMin" /*RemoteObject*/ )}, "/++",2, 0);Debug.locals.put("LogVal", _logval);
 BA.debugLineNum = 486;BA.debugLine="PointX = Power(10, LogVal)";
Debug.JustUpdateDeviceLine();
_pointx = xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(_logval));Debug.locals.put("PointX", _pointx);
 };
 BA.debugLineNum = 489;BA.debugLine="If Scale(sY(0)).Logarithmic = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Logarithmic" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 490;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 491;BA.debugLine="PointY = Scale(sY(0)).MaxVal - (Y - Graph.To";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-/",1, 0);Debug.locals.put("PointY", _pointy);
 }else {
 BA.debugLineNum = 493;BA.debugLine="PointY = Scale(sY(0)).MinVal + (Y - Graph.To";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointY", _pointy);
 };
 }else {
 BA.debugLineNum = 496;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 497;BA.debugLine="LogVal = ScaleLog(sY(0)).MantMax + ScaleLog(";
Debug.JustUpdateDeviceLine();
_logval = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMax" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMax" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+-/",2, 0);Debug.locals.put("LogVal", _logval);
 }else {
 BA.debugLineNum = 499;BA.debugLine="LogVal = ScaleLog(sY(0)).MantMin - ScaleLog(";
Debug.JustUpdateDeviceLine();
_logval = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MantMin" /*RemoteObject*/ ),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"LogMin" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scalelog" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-+/",2, 0);Debug.locals.put("LogVal", _logval);
 };
 BA.debugLineNum = 501;BA.debugLine="PointY = Power(10, LogVal)";
Debug.JustUpdateDeviceLine();
_pointy = xchart.__c.runMethod(true,"Power",(Object)(BA.numberCast(double.class, 10)),(Object)(_logval));Debug.locals.put("PointY", _pointy);
 };
 BA.debugLineNum = 503;BA.debugLine="CallSubDelayed3(mCallBack, mEventName & \"_Touc";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("CallSubDelayed3",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_Touch"))),(Object)((_pointx)),(Object)((_pointy)));
 };
 BA.debugLineNum = 506;BA.debugLine="If Scale(sY(0)).Different = False And (mYXChart";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplayvalues" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplaycrosshair" /*RemoteObject*/ ),xchart.__c.getField(true,"True")))))) { 
 BA.debugLineNum = 507;BA.debugLine="xpnlValues.Visible = Values.Show";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ));
 BA.debugLineNum = 508;BA.debugLine="If Values.Show = True Or Values.ShowCursor = T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"ShowCursor" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 509;BA.debugLine="DrawYXChartValues(X, Y - mYXChartCrossHairDel";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawyxchartvalues" /*RemoteObject*/ ,(Object)(_x),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(true,"_myxchartcrosshairdeltay" /*RemoteObject*/ )}, "-",1, 0))));
 };
 };
 }else 
{ BA.debugLineNum = 512;BA.debugLine="Else If Action = xpnlCursor.TOUCH_ACTION_UP Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_UP")))) { 
 BA.debugLineNum = 513;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("CURSOR"))) { 
 BA.debugLineNum = 514;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 };
 BA.debugLineNum = 516;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("VALUES"))) { 
 BA.debugLineNum = 517;BA.debugLine="xcvsCursor.ClearRect(xcvsCursor.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 518;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 };
 }}
;
 }else 
{ BA.debugLineNum = 521;BA.debugLine="Else If Graph.ChartType = \"BUBBLE\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 522;BA.debugLine="If (Action = 0 Or Action = 2) And X >= Graph.Lef";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, 0)) || RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, 2))))) && RemoteObject.solveBoolean("g",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("k",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("g",_y,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ),__ref.getField(true,"_myxchartcrosshairdeltay" /*RemoteObject*/ )}, "+",1, 1))) && RemoteObject.solveBoolean("k",_y,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ ),__ref.getField(true,"_myxchartcrosshairdeltay" /*RemoteObject*/ )}, "+",1, 1)))) { 
 BA.debugLineNum = 523;BA.debugLine="If xui.SubExists(mCallBack, mEventName & \"_Touc";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"SubExists",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_Touch"))),(Object)(BA.numberCast(int.class, 2))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 524;BA.debugLine="Private PointX, PointY As Double";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.createImmutable(0);Debug.locals.put("PointX", _pointx);
_pointy = RemoteObject.createImmutable(0);Debug.locals.put("PointY", _pointy);
 BA.debugLineNum = 525;BA.debugLine="PointX = Scale(sX).MinVal + (X - Graph.Left) /";
Debug.JustUpdateDeviceLine();
_pointx = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_x,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(true,"_sx" /*RemoteObject*/ )).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointX", _pointx);
 BA.debugLineNum = 526;BA.debugLine="If Scale(sY(0)).ReverseYScale = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"ReverseYScale" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 527;BA.debugLine="PointY = Scale(sY(0)).MaxVal - (Y - Graph.Top";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MaxVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "-/",1, 0);Debug.locals.put("PointY", _pointy);
 }else {
 BA.debugLineNum = 529;BA.debugLine="PointY = Scale(sY(0)).MinVal + (Y - Graph.Top";
Debug.JustUpdateDeviceLine();
_pointy = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"MinVal" /*RemoteObject*/ ),(RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ )}, "-",1, 0)),__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Scale" /*RemoteObject*/ )}, "+/",1, 0);Debug.locals.put("PointY", _pointy);
 };
 BA.debugLineNum = 531;BA.debugLine="CallSubDelayed3(mCallBack, mEventName & \"_Touc";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("CallSubDelayed3",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_Touch"))),(Object)((_pointx)),(Object)((_pointy)));
 };
 BA.debugLineNum = 534;BA.debugLine="If Scale(sY(0)).Different = False And (mYXChart";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_scale" /*RemoteObject*/ ).getArrayElement(false, /*RemoteObject*/ __ref.getField(false,"_sy" /*RemoteObject*/ ).getArrayElement(true,BA.numberCast(int.class, 0))).getField(true,"Different" /*RemoteObject*/ ),xchart.__c.getField(true,"False")) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplayvalues" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_myxchartdisplaycrosshair" /*RemoteObject*/ ),xchart.__c.getField(true,"True")))))) { 
 BA.debugLineNum = 535;BA.debugLine="xpnlValues.Visible = Values.Show";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ));
 BA.debugLineNum = 536;BA.debugLine="If Values.Show = True Or Values.ShowCursor = T";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"ShowCursor" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 537;BA.debugLine="DrawBubbleValues(X, Y - mYXChartCrossHairDelt";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawbubblevalues" /*RemoteObject*/ ,(Object)(_x),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y,__ref.getField(true,"_myxchartcrosshairdeltay" /*RemoteObject*/ )}, "-",1, 0))));
 };
 };
 }else 
{ BA.debugLineNum = 540;BA.debugLine="Else If Action = xpnlCursor.TOUCH_ACTION_UP Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, __ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_UP")))) { 
 BA.debugLineNum = 541;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("CURSOR"))) { 
 BA.debugLineNum = 542;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 };
 BA.debugLineNum = 544;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("VALUES"))) { 
 BA.debugLineNum = 545;BA.debugLine="xcvsCursor.ClearRect(xcvsCursor.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 546;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 };
 }}
;
 }}
;
 BA.debugLineNum = 551;BA.debugLine="If Graph.ChartType = \"PIE\" Or Graph.ChartType = \"";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("PIE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("YX_CHART")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("BUBBLE"))) { 
 BA.debugLineNum = 553;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 556;BA.debugLine="Private PointIndex As Int";
Debug.JustUpdateDeviceLine();
_pointindex = RemoteObject.createImmutable(0);Debug.locals.put("PointIndex", _pointindex);
 BA.debugLineNum = 557;BA.debugLine="PointIndex = GetCursorIndex(X, Y)";
Debug.JustUpdateDeviceLine();
_pointindex = __ref.runClassMethod (b4a.example.xchart.class, "_getcursorindex" /*RemoteObject*/ ,(Object)(_x),(Object)(_y));Debug.locals.put("PointIndex", _pointindex);
 BA.debugLineNum = 559;BA.debugLine="If xui.SubExists(mCallBack, mEventName & \"_Cursor";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"SubExists",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_CursorTouch"))),(Object)(BA.numberCast(int.class, 2))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 560;BA.debugLine="CallSubDelayed3(mCallBack, mEventName & \"_Cursor";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("CallSubDelayed3",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_CursorTouch"))),(Object)((_action)),(Object)((_pointindex)));
 };
 BA.debugLineNum = 563;BA.debugLine="If Values.Show = False Then	'does not display the";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 };
 BA.debugLineNum = 567;BA.debugLine="Select Action";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(_action,__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_DOWN"),__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_UP"),__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_MOVE"))) {
case 0: {
 BA.debugLineNum = 569;BA.debugLine="If Graph.ChartType = \"RADAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("RADAR"))) { 
 BA.debugLineNum = 570;BA.debugLine="DrawItemValues(X, Y)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawitemvalues" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, _x)),(Object)(BA.numberCast(int.class, _y)));
 BA.debugLineNum = 571;BA.debugLine="If xpnlGraph.Width >= Graph.Right + 10dip + xp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10))),__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "++",2, 1)))) { 
 BA.debugLineNum = 572;BA.debugLine="xpnlValues.Left = Graph.Right + 5dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1));
 }else {
 BA.debugLineNum = 574;BA.debugLine="If x > Graph.CenterX Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 575;BA.debugLine="xpnlValues.Left = 5dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));
 }else {
 BA.debugLineNum = 577;BA.debugLine="xpnlValues.Left = xpnlGraph.Width - xpnlValu";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getWidth"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "--",2, 1));
 };
 };
 BA.debugLineNum = 580;BA.debugLine="xpnlValues.Visible = Values.Show";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ));
 }else {
 BA.debugLineNum = 582;BA.debugLine="If X > Graph.Left And X < Graph.Right And Y >";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))) && RemoteObject.solveBoolean(">",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 583;BA.debugLine="xpnlValues.Visible = Values.Show";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ));
 BA.debugLineNum = 584;BA.debugLine="DrawItemValues(X, Y)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawitemvalues" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, _x)),(Object)(BA.numberCast(int.class, _y)));
 BA.debugLineNum = 585;BA.debugLine="If X > Graph.Left And X < Graph.Left + Graph.";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_x,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0)) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),RemoteObject.createImmutable("BOTTOM")))))) { 
 BA.debugLineNum = 586;BA.debugLine="xpnlValues.Left = Graph.Right - xpnlValues.W";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getWidth"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1)))}, "--",2, 1));
 }else {
 BA.debugLineNum = 588;BA.debugLine="xpnlValues.Left = Graph.Left + 2dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1));
 };
 };
 };
 break; }
case 1: {
 BA.debugLineNum = 593;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("CURSOR"))) { 
 BA.debugLineNum = 594;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 };
 BA.debugLineNum = 596;BA.debugLine="If mKeepDisplayValues = \"NONE\" Or mKeepDisplayV";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(true,"_mkeepdisplayvalues" /*RemoteObject*/ ),BA.ObjectToString("VALUES"))) { 
 BA.debugLineNum = 597;BA.debugLine="xcvsCursor.ClearRect(Values.rectCursor)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_values" /*RemoteObject*/ ).getField(false,"rectCursor" /*RemoteObject*/ )));
 BA.debugLineNum = 598;BA.debugLine="xcvsCursor.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvscursor" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 };
 break; }
case 2: {
 BA.debugLineNum = 605;BA.debugLine="If Graph.ChartType = \"RADAR\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ),BA.ObjectToString("RADAR"))) { 
 BA.debugLineNum = 606;BA.debugLine="DrawItemValues(X, Y)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawitemvalues" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, _x)),(Object)(BA.numberCast(int.class, _y)));
 BA.debugLineNum = 607;BA.debugLine="If xpnlGraph.Width >= Graph.Right + 10dip + xp";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("g",__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 10))),__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "++",2, 1)))) { 
 BA.debugLineNum = 608;BA.debugLine="xpnlValues.Left = Graph.Right + 5dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "+",1, 1));
 }else {
 BA.debugLineNum = 610;BA.debugLine="If x > Graph.CenterX Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"CenterX" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 611;BA.debugLine="xpnlValues.Left = 5dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5))));
 }else {
 BA.debugLineNum = 613;BA.debugLine="xpnlValues.Left = xpnlGraph.Width - xpnlValu";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlgraph" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getWidth"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 5)))}, "--",2, 1));
 };
 };
 BA.debugLineNum = 616;BA.debugLine="If xpnlValues.Visible = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getVisible"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 617;BA.debugLine="xpnlValues.Visible = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"True"));
 };
 }else {
 BA.debugLineNum = 620;BA.debugLine="If X > Graph.Left And X < Graph.Right And Y >";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ))) && RemoteObject.solveBoolean(">",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Top" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_y,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Bottom" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 621;BA.debugLine="If xpnlValues.Visible = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getVisible"),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 622;BA.debugLine="xpnlValues.Visible = Values.Show";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",__ref.getField(false,"_values" /*RemoteObject*/ ).getField(true,"Show" /*RemoteObject*/ ));
 };
 BA.debugLineNum = 624;BA.debugLine="DrawItemValues(X, Y)";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawitemvalues" /*RemoteObject*/ ,(Object)(BA.numberCast(int.class, _x)),(Object)(BA.numberCast(int.class, _y)));
 BA.debugLineNum = 625;BA.debugLine="If X > Graph.Left And X < Graph.Left + Graph.";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_x,BA.numberCast(double.class, __ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_x,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Width" /*RemoteObject*/ ),RemoteObject.createImmutable(2)}, "+/",1, 0)) && RemoteObject.solveBoolean(".",BA.ObjectToBoolean((RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),BA.ObjectToString("NONE")) || RemoteObject.solveBoolean("=",__ref.getField(false,"_legend" /*RemoteObject*/ ).getField(true,"IncludeLegend" /*RemoteObject*/ ),RemoteObject.createImmutable("BOTTOM")))))) { 
 BA.debugLineNum = 626;BA.debugLine="xpnlValues.Left = Graph.Right - xpnlValues.W";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Right" /*RemoteObject*/ ),__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"getWidth"),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "--",2, 1));
 }else {
 BA.debugLineNum = 628;BA.debugLine="xpnlValues.Left = Graph.Left + 2dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"Left" /*RemoteObject*/ ),xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2)))}, "+",1, 1));
 };
 };
 };
 break; }
}
;
 BA.debugLineNum = 633;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _xpnlzoombar_touch(RemoteObject __ref,RemoteObject _action,RemoteObject _x,RemoteObject _y) throws Exception{
try {
		Debug.PushSubsStack("xpnlZoomBar_Touch (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,635);
if (RapidSub.canDelegate("xpnlzoombar_touch")) { return __ref.runUserSub(false, "xchart","xpnlzoombar_touch", __ref, _action, _x, _y);}
RemoteObject _indexbegin = RemoteObject.createImmutable(0);
RemoteObject _l = RemoteObject.createImmutable(0);
RemoteObject _w = RemoteObject.createImmutable(0);
RemoteObject _zoomevent = RemoteObject.createImmutable(false);
Debug.locals.put("Action", _action);
Debug.locals.put("X", _x);
Debug.locals.put("Y", _y);
 BA.debugLineNum = 635;BA.debugLine="Private Sub xpnlZoomBar_Touch (Action As Int, X As";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 636;BA.debugLine="Private IndexBegin, L, W As Int";
Debug.JustUpdateDeviceLine();
_indexbegin = RemoteObject.createImmutable(0);Debug.locals.put("IndexBegin", _indexbegin);
_l = RemoteObject.createImmutable(0);Debug.locals.put("L", _l);
_w = RemoteObject.createImmutable(0);Debug.locals.put("W", _w);
 BA.debugLineNum = 637;BA.debugLine="Private ZoomEvent As Boolean";
Debug.JustUpdateDeviceLine();
_zoomevent = RemoteObject.createImmutable(false);Debug.locals.put("ZoomEvent", _zoomevent);
 BA.debugLineNum = 639;BA.debugLine="If Action = 100 Or Zoom.Enabled = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_action,BA.numberCast(double.class, 100)) || RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Enabled" /*RemoteObject*/ ),xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 640;BA.debugLine="Return";
Debug.JustUpdateDeviceLine();
if (true) return RemoteObject.createImmutable("");
 };
 BA.debugLineNum = 643;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 644;BA.debugLine="L = Y";
Debug.JustUpdateDeviceLine();
_l = BA.numberCast(int.class, _y);Debug.locals.put("L", _l);
 BA.debugLineNum = 645;BA.debugLine="W = X";
Debug.JustUpdateDeviceLine();
_w = BA.numberCast(int.class, _x);Debug.locals.put("W", _w);
 }else {
 BA.debugLineNum = 647;BA.debugLine="L = X";
Debug.JustUpdateDeviceLine();
_l = BA.numberCast(int.class, _x);Debug.locals.put("L", _l);
 BA.debugLineNum = 648;BA.debugLine="W = Y";
Debug.JustUpdateDeviceLine();
_w = BA.numberCast(int.class, _y);Debug.locals.put("W", _w);
 };
 BA.debugLineNum = 651;BA.debugLine="Select Action";
Debug.JustUpdateDeviceLine();
switch (BA.switchObjectToInt(_action,__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_DOWN"),__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_MOVE"),__ref.getField(false,"_xpnlcursor" /*RemoteObject*/ ).getField(true,"TOUCH_ACTION_UP"))) {
case 0: {
 BA.debugLineNum = 654;BA.debugLine="If W > 0 And W < Zoom.BarWidth Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_w,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("<",_w,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 655;BA.debugLine="xpnlValues.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlvalues" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 657;BA.debugLine="ZoomEvent = False";
Debug.JustUpdateDeviceLine();
_zoomevent = xchart.__c.getField(true,"False");Debug.locals.put("ZoomEvent", _zoomevent);
 BA.debugLineNum = 658;BA.debugLine="If L > 0 And L < Zoom.ButtonLength Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_l,BA.numberCast(double.class, 0)) && RemoteObject.solveBoolean("<",_l,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 659;BA.debugLine="If xui.SubExists(mCallBack, mEventName & \"_Zo";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"SubExists",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomLeftButtonClick"))),(Object)(BA.numberCast(int.class, 0))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 660;BA.debugLine="ZoomEvent = True";
Debug.JustUpdateDeviceLine();
_zoomevent = xchart.__c.getField(true,"True");Debug.locals.put("ZoomEvent", _zoomevent);
 BA.debugLineNum = 661;BA.debugLine="CallSubDelayed(mCallBack, mEventName & \"_Zoo";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("CallSubDelayed",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomLeftButtonClick"))));
 }else {
 BA.debugLineNum = 663;BA.debugLine="IndexBegin = Max(0, Zoom.BeginIndex - Zoom.S";
Debug.JustUpdateDeviceLine();
_indexbegin = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 0)),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"SmallStep" /*RemoteObject*/ )}, "-",1, 1)))));Debug.locals.put("IndexBegin", _indexbegin);
 BA.debugLineNum = 664;BA.debugLine="Zoom.EndIndex = Zoom.BeginIndex + Zoom.NbVis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+-",2, 1));
 };
 }else 
{ BA.debugLineNum = 666;BA.debugLine="Else If L > Zoom.BarLength - Zoom.ButtonLength";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_l,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1))) && RemoteObject.solveBoolean("<",_l,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 667;BA.debugLine="If xui.SubExists(mCallBack, mEventName & \"_Zo";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"SubExists",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomLeftAreaClick"))),(Object)(BA.numberCast(int.class, 0))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 668;BA.debugLine="ZoomEvent = True";
Debug.JustUpdateDeviceLine();
_zoomevent = xchart.__c.getField(true,"True");Debug.locals.put("ZoomEvent", _zoomevent);
 BA.debugLineNum = 669;BA.debugLine="CallSubDelayed(mCallBack, mEventName & \"_Zoo";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("CallSubDelayed",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomLeftAreaClick"))));
 }else {
 BA.debugLineNum = 671;BA.debugLine="Zoom.EndIndex = Min(Zoom.EndIndex + Zoom.Sma";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"SmallStep" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1))))));
 BA.debugLineNum = 672;BA.debugLine="IndexBegin = Zoom.EndIndex - Zoom.NbVisibleP";
Debug.JustUpdateDeviceLine();
_indexbegin = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-+",2, 1);Debug.locals.put("IndexBegin", _indexbegin);
 };
 }else 
{ BA.debugLineNum = 674;BA.debugLine="Else If L > Zoom.ButtonLength And L < Zoom.Cur";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_l,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ))) && RemoteObject.solveBoolean("<",_l,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 675;BA.debugLine="If xui.SubExists(mCallBack, mEventName & \"_Zo";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"SubExists",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomRightButtonClick"))),(Object)(BA.numberCast(int.class, 0))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 676;BA.debugLine="ZoomEvent = True";
Debug.JustUpdateDeviceLine();
_zoomevent = xchart.__c.getField(true,"True");Debug.locals.put("ZoomEvent", _zoomevent);
 BA.debugLineNum = 677;BA.debugLine="CallSubDelayed(mCallBack, mEventName & \"_Zoo";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("CallSubDelayed",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomRightButtonClick"))));
 }else {
 BA.debugLineNum = 679;BA.debugLine="IndexBegin = Max(0, Zoom.BeginIndex - Zoom.B";
Debug.JustUpdateDeviceLine();
_indexbegin = BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, 0)),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BigStep" /*RemoteObject*/ )}, "-",1, 1)))));Debug.locals.put("IndexBegin", _indexbegin);
 BA.debugLineNum = 680;BA.debugLine="Zoom.EndIndex = Zoom.BeginIndex + Zoom.NbVis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+-",2, 1));
 };
 }else 
{ BA.debugLineNum = 682;BA.debugLine="Else If L > Zoom.CursorBegin + Zoom.CursorLeng";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean(">",_l,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorLength" /*RemoteObject*/ )}, "+",1, 1))) && RemoteObject.solveBoolean("<",_l,BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1)))) { 
 BA.debugLineNum = 683;BA.debugLine="If xui.SubExists(mCallBack, mEventName & \"_Zo";
Debug.JustUpdateDeviceLine();
if (__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"SubExists",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomRightAreaClick"))),(Object)(BA.numberCast(int.class, 0))).<Boolean>get().booleanValue()) { 
 BA.debugLineNum = 684;BA.debugLine="ZoomEvent = True";
Debug.JustUpdateDeviceLine();
_zoomevent = xchart.__c.getField(true,"True");Debug.locals.put("ZoomEvent", _zoomevent);
 BA.debugLineNum = 685;BA.debugLine="CallSubDelayed(mCallBack, mEventName & \"_Zoo";
Debug.JustUpdateDeviceLine();
xchart.__c.runVoidMethod ("CallSubDelayed",__ref.getField(false, "ba"),(Object)(__ref.getField(false,"_mcallback" /*RemoteObject*/ )),(Object)(RemoteObject.concat(__ref.getField(true,"_meventname" /*RemoteObject*/ ),RemoteObject.createImmutable("_ZoomRightAreaClick"))));
 }else {
 BA.debugLineNum = 687;BA.debugLine="Zoom.EndIndex = Min(Points.Size - 1, Zoom.En";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),RemoteObject.createImmutable(1)}, "-",1, 1))),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BigStep" /*RemoteObject*/ )}, "+",1, 1))))));
 BA.debugLineNum = 688;BA.debugLine="IndexBegin = Zoom.EndIndex - Zoom.NbVisibleP";
Debug.JustUpdateDeviceLine();
_indexbegin = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"EndIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-+",2, 1);Debug.locals.put("IndexBegin", _indexbegin);
 };
 }else {
 BA.debugLineNum = 691;BA.debugLine="IndexBegin = Zoom.BeginIndex";
Debug.JustUpdateDeviceLine();
_indexbegin = __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ );Debug.locals.put("IndexBegin", _indexbegin);
 BA.debugLineNum = 692;BA.debugLine="Zoom.Move = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Move" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 }}}}
;
 BA.debugLineNum = 694;BA.debugLine="If ZoomEvent = False Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",_zoomevent,xchart.__c.getField(true,"False"))) { 
 BA.debugLineNum = 695;BA.debugLine="Zoom.Cursor0 = L";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Cursor0" /*RemoteObject*/ ,_l);
 BA.debugLineNum = 696;BA.debugLine="Zoom.CursorBegin0 = Zoom.CursorBegin";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorBegin0" /*RemoteObject*/ ,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ));
 BA.debugLineNum = 697;BA.debugLine="Zoom.CursorOn = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorOn" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 699;BA.debugLine="If IndexBegin <> Zoom.BeginIndex Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_indexbegin,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 700;BA.debugLine="Zoom.BeginIndex = IndexBegin";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,_indexbegin);
 BA.debugLineNum = 701;BA.debugLine="Zoom.EndIndex = Zoom.BeginIndex + Zoom.NbVis";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+-",2, 1));
 BA.debugLineNum = 702;BA.debugLine="DrawChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawchart" /*RemoteObject*/ );
 BA.debugLineNum = 703;BA.debugLine="ZoomCursorDraw";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoomcursordraw" /*RemoteObject*/ );
 };
 };
 };
 break; }
case 1: {
 BA.debugLineNum = 708;BA.debugLine="If Zoom.CursorOn = True And Zoom.Move = True Th";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorOn" /*RemoteObject*/ ),xchart.__c.getField(true,"True")) && RemoteObject.solveBoolean("=",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Move" /*RemoteObject*/ ),xchart.__c.getField(true,"True"))) { 
 BA.debugLineNum = 709;BA.debugLine="Zoom.CursorBegin = Min(Zoom.CursorBegin0 + L -";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorBegin" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin0" /*RemoteObject*/ ),_l,__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"Cursor0" /*RemoteObject*/ )}, "+-",2, 1))),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorLength" /*RemoteObject*/ ),RemoteObject.createImmutable(10)}, "--+",3, 1))))));
 BA.debugLineNum = 710;BA.debugLine="Zoom.CursorBegin = Max(Zoom.CursorBegin, Zoom.";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorBegin" /*RemoteObject*/ ,BA.numberCast(int.class, xchart.__c.runMethod(true,"Max",(Object)(BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ))),(Object)(BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ))))));
 BA.debugLineNum = 712;BA.debugLine="IndexBegin = (Zoom.CursorBegin - Zoom.ButtonLe";
Debug.JustUpdateDeviceLine();
_indexbegin = BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1)),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),RemoteObject.createImmutable(2),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorLength" /*RemoteObject*/ )}, "-*-",2, 1)),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "-+",2, 1)),RemoteObject.createImmutable(0.5)}, "/*+",1, 0));Debug.locals.put("IndexBegin", _indexbegin);
 BA.debugLineNum = 713;BA.debugLine="IndexBegin = Min(IndexBegin, Points.Size - Zoo";
Debug.JustUpdateDeviceLine();
_indexbegin = BA.numberCast(int.class, xchart.__c.runMethod(true,"Min",(Object)(BA.numberCast(double.class, _indexbegin)),(Object)(BA.numberCast(double.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "-",1, 1)))));Debug.locals.put("IndexBegin", _indexbegin);
 BA.debugLineNum = 714;BA.debugLine="If IndexBegin <> Zoom.BeginIndex Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("!",_indexbegin,BA.numberCast(double.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ )))) { 
 BA.debugLineNum = 715;BA.debugLine="Zoom.BeginIndex = IndexBegin";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BeginIndex" /*RemoteObject*/ ,_indexbegin);
 BA.debugLineNum = 716;BA.debugLine="Zoom.EndIndex = Zoom.BeginIndex + Zoom.NbVisi";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("EndIndex" /*RemoteObject*/ ,RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ ),RemoteObject.createImmutable(1)}, "+-",2, 1));
 BA.debugLineNum = 717;BA.debugLine="DrawChart";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_drawchart" /*RemoteObject*/ );
 BA.debugLineNum = 718;BA.debugLine="ZoomCursorDraw";
Debug.JustUpdateDeviceLine();
__ref.runClassMethod (b4a.example.xchart.class, "_zoomcursordraw" /*RemoteObject*/ );
 };
 };
 break; }
case 2: {
 BA.debugLineNum = 722;BA.debugLine="Zoom.CursorOn = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorOn" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 BA.debugLineNum = 723;BA.debugLine="Zoom.Move = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Move" /*RemoteObject*/ ,xchart.__c.getField(true,"False"));
 break; }
}
;
 BA.debugLineNum = 725;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _zoombarinit(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("ZoomBarInit (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,897);
if (RapidSub.canDelegate("zoombarinit")) { return __ref.runUserSub(false, "xchart","zoombarinit", __ref);}
 BA.debugLineNum = 897;BA.debugLine="Private Sub ZoomBarInit";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 898;BA.debugLine="Zoom.Enabled = True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("Enabled" /*RemoteObject*/ ,xchart.__c.getField(true,"True"));
 BA.debugLineNum = 899;BA.debugLine="Zoom.ColorBar = xui.Color_RGB(196, 196, 196)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("ColorBar" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(BA.numberCast(int.class, 196)),(Object)(BA.numberCast(int.class, 196)),(Object)(BA.numberCast(int.class, 196))));
 BA.debugLineNum = 900;BA.debugLine="Zoom.ColorButton = xui.Color_RGB(240, 240, 240)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("ColorButton" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(BA.numberCast(int.class, 240)),(Object)(BA.numberCast(int.class, 240)),(Object)(BA.numberCast(int.class, 240))));
 BA.debugLineNum = 901;BA.debugLine="Zoom.ColorButtonFrame = xui.Color_RGB(148, 148, 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("ColorButtonFrame" /*RemoteObject*/ ,__ref.getField(false,"_xui" /*RemoteObject*/ ).runMethod(true,"Color_RGB",(Object)(BA.numberCast(int.class, 148)),(Object)(BA.numberCast(int.class, 148)),(Object)(BA.numberCast(int.class, 148))));
 BA.debugLineNum = 903;BA.debugLine="Zoom.BarWidth = 16dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BarWidth" /*RemoteObject*/ ,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 16))));
 BA.debugLineNum = 904;BA.debugLine="Zoom.ButtonLength = 18dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("ButtonLength" /*RemoteObject*/ ,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 18))));
 BA.debugLineNum = 905;BA.debugLine="Zoom.CornerRadius = 2dip";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CornerRadius" /*RemoteObject*/ ,xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 2))));
 BA.debugLineNum = 906;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 907;BA.debugLine="xpnlZoomBar.Left = mBase.Width - Zoom.BarWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setLeft",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 908;BA.debugLine="xpnlZoomBar.Top = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setTop",BA.numberCast(int.class, 0));
 BA.debugLineNum = 909;BA.debugLine="xpnlZoomBar.Width = Zoom.BarWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setWidth",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ));
 BA.debugLineNum = 910;BA.debugLine="xpnlZoomBar.Height = mBase.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 911;BA.debugLine="Zoom.BarLength = mBase.Height";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BarLength" /*RemoteObject*/ ,__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 }else {
 BA.debugLineNum = 913;BA.debugLine="xpnlZoomBar.Left = 0";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setLeft",BA.numberCast(int.class, 0));
 BA.debugLineNum = 914;BA.debugLine="xpnlZoomBar.Top = mBase.Height - Zoom.BarWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setTop",RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "-",1, 1));
 BA.debugLineNum = 915;BA.debugLine="xpnlZoomBar.Height = Zoom.BarWidth";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setHeight",__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ));
 BA.debugLineNum = 916;BA.debugLine="xpnlZoomBar.Width = mBase.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setWidth",__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"));
 BA.debugLineNum = 917;BA.debugLine="Zoom.BarLength = mBase.Width";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BarLength" /*RemoteObject*/ ,__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getWidth"));
 };
 BA.debugLineNum = 919;BA.debugLine="xcvsZoomBar.Initialize(xpnlZoomBar)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("Initialize",(Object)(__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ )));
 BA.debugLineNum = 920;BA.debugLine="xpnlZoomBar.Visible = False";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"setVisible",xchart.__c.getField(true,"False"));
 BA.debugLineNum = 921;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _zoombarresize(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("ZoomBarResize (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,924);
if (RapidSub.canDelegate("zoombarresize")) { return __ref.runUserSub(false, "xchart","zoombarresize", __ref);}
RemoteObject _pth = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");
RemoteObject _rect = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _x0 = RemoteObject.createImmutable(0);
RemoteObject _y0 = RemoteObject.createImmutable(0);
 BA.debugLineNum = 924;BA.debugLine="Private Sub ZoomBarResize";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 925;BA.debugLine="Private pth As B4XPath";
Debug.JustUpdateDeviceLine();
_pth = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("pth", _pth);
 BA.debugLineNum = 926;BA.debugLine="Private rect As B4XRect";
Debug.JustUpdateDeviceLine();
_rect = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rect", _rect);
 BA.debugLineNum = 927;BA.debugLine="Private x0, y0 As Int";
Debug.JustUpdateDeviceLine();
_x0 = RemoteObject.createImmutable(0);Debug.locals.put("x0", _x0);
_y0 = RemoteObject.createImmutable(0);Debug.locals.put("y0", _y0);
 BA.debugLineNum = 929;BA.debugLine="xcvsZoomBar.ClearRect(xcvsZoomBar.TargetRect)";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("ClearRect",(Object)(__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runMethod(false,"getTargetRect")));
 BA.debugLineNum = 931;BA.debugLine="rect.Initialize(0, 0, xpnlZoomBar.Width, xpnlZoom";
Debug.JustUpdateDeviceLine();
_rect.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 932;BA.debugLine="xcvsZoomBar.DrawRect(rect, Zoom.ColorBar, True, 1";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rect),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorBar" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 934;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 935;BA.debugLine="Zoom.BarLength = mBase.Height	'needed for B4i, I";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("BarLength" /*RemoteObject*/ ,__ref.getField(false,"_mbase" /*RemoteObject*/ ).runMethod(true,"getHeight"));
 BA.debugLineNum = 936;BA.debugLine="Private rect As B4XRect";
Debug.JustUpdateDeviceLine();
_rect = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rect", _rect);
 BA.debugLineNum = 937;BA.debugLine="rect.Initialize(0, 0, Zoom.BarWidth, Zoom.Button";
Debug.JustUpdateDeviceLine();
_rect.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ))));
 BA.debugLineNum = 938;BA.debugLine="pth.InitializeRoundedRect(rect, Zoom.CornerRadiu";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("InitializeRoundedRect",(Object)(_rect),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CornerRadius" /*RemoteObject*/ ))));
 BA.debugLineNum = 939;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButton, True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButton" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 940;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 942;BA.debugLine="pth.Initialize(0.5 * xpnlZoomBar.Width, 0.37 * Z";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.5),__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.37),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 943;BA.debugLine="pth.LineTo(0.23 * xpnlZoomBar.Width, 0.62 * Zoom";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.23),__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.62),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 944;BA.debugLine="pth.LineTo(0.77 * xpnlZoomBar.Width, 0.62 * Zoom";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.77),__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth")}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.62),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 945;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 947;BA.debugLine="y0 = xpnlZoomBar.Height - Zoom.ButtonLength";
Debug.JustUpdateDeviceLine();
_y0 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("y0", _y0);
 BA.debugLineNum = 948;BA.debugLine="rect.Initialize(0, y0, Zoom.BarWidth, xpnlZoomBa";
Debug.JustUpdateDeviceLine();
_rect.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 949;BA.debugLine="y0 = Zoom.BarLength - Zoom.ButtonLength";
Debug.JustUpdateDeviceLine();
_y0 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("y0", _y0);
 BA.debugLineNum = 950;BA.debugLine="rect.Initialize(0, y0, Zoom.BarWidth, Zoom.BarLe";
Debug.JustUpdateDeviceLine();
_rect.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, _y0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ))));
 BA.debugLineNum = 951;BA.debugLine="pth.InitializeRoundedRect(rect, Zoom.CornerRadiu";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("InitializeRoundedRect",(Object)(_rect),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CornerRadius" /*RemoteObject*/ ))));
 BA.debugLineNum = 952;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButton, True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButton" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 953;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 954;BA.debugLine="pth.Initialize(0.23 * Zoom.BarWidth, y0 + 0.38 *";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.23),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y0,RemoteObject.createImmutable(0.38),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "+*",1, 0))));
 BA.debugLineNum = 955;BA.debugLine="pth.LineTo(0.5 * Zoom.BarWidth, y0 + 0.62 * Zoom";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.5),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y0,RemoteObject.createImmutable(0.62),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "+*",1, 0))));
 BA.debugLineNum = 956;BA.debugLine="pth.LineTo(0.77 * Zoom.BarWidth, y0 + 0.38 * Zoo";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.77),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_y0,RemoteObject.createImmutable(0.38),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "+*",1, 0))));
 BA.debugLineNum = 957;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 959;BA.debugLine="rect.Initialize(0, 0, Zoom.ButtonLength, Zoom.Ba";
Debug.JustUpdateDeviceLine();
_rect.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))));
 BA.debugLineNum = 960;BA.debugLine="pth.InitializeRoundedRect(rect, Zoom.CornerRadiu";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("InitializeRoundedRect",(Object)(_rect),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CornerRadius" /*RemoteObject*/ ))));
 BA.debugLineNum = 961;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButton, True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButton" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 962;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 964;BA.debugLine="pth.Initialize(0.37 * Zoom.ButtonLength, 0.5 * Z";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.37),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.5),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 965;BA.debugLine="pth.LineTo(0.62 * Zoom.ButtonLength, 0.23 * Zoom";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.62),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.23),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 966;BA.debugLine="pth.LineTo(0.62 * Zoom.ButtonLength, 0.77 * Zoom";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.62),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "*",0, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.77),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 967;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 969;BA.debugLine="x0 = xpnlZoomBar.Width - Zoom.ButtonLength";
Debug.JustUpdateDeviceLine();
_x0 = RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1);Debug.locals.put("x0", _x0);
 BA.debugLineNum = 970;BA.debugLine="rect.Initialize(x0, 0, xpnlZoomBar.Width, xpnlZo";
Debug.JustUpdateDeviceLine();
_rect.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, _x0)),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getWidth"))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 971;BA.debugLine="pth.InitializeRoundedRect(rect, Zoom.CornerRadiu";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("InitializeRoundedRect",(Object)(_rect),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CornerRadius" /*RemoteObject*/ ))));
 BA.debugLineNum = 972;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButton, True";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButton" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 973;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 974;BA.debugLine="pth.Initialize(x0 + 0.38 * Zoom.ButtonLength, 0.";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,RemoteObject.createImmutable(0.38),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.23),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 975;BA.debugLine="pth.LineTo(x0 + 0.62 * Zoom.ButtonLength, 0.5 *";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,RemoteObject.createImmutable(0.62),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.5),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 976;BA.debugLine="pth.LineTo(x0 + 0.38 * Zoom.ButtonLength, 0.77 *";
Debug.JustUpdateDeviceLine();
_pth.runVoidMethod ("LineTo",(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {_x0,RemoteObject.createImmutable(0.38),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "+*",1, 0))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {RemoteObject.createImmutable(0.77),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ )}, "*",0, 0))));
 BA.debugLineNum = 977;BA.debugLine="xcvsZoomBar.DrawPath(pth, Zoom.ColorButtonFrame,";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pth),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 979;BA.debugLine="xcvsZoomBar.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 980;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
public static RemoteObject  _zoomcursordraw(RemoteObject __ref) throws Exception{
try {
		Debug.PushSubsStack("ZoomCursorDraw (xchart) ","xchart",5,__ref.getField(false, "ba"),__ref,6863);
if (RapidSub.canDelegate("zoomcursordraw")) { return __ref.runUserSub(false, "xchart","zoomcursordraw", __ref);}
RemoteObject _rectcursor = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _rectbar = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");
RemoteObject _pthcursor = RemoteObject.declareNull("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");
 BA.debugLineNum = 6863;BA.debugLine="Private Sub ZoomCursorDraw";
Debug.JustUpdateDeviceLine();
 BA.debugLineNum = 6864;BA.debugLine="Private rectCursor, rectBar As B4XRect";
Debug.JustUpdateDeviceLine();
_rectcursor = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectCursor", _rectcursor);
_rectbar = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XRect");Debug.locals.put("rectBar", _rectbar);
 BA.debugLineNum = 6865;BA.debugLine="Private pthCursor As B4XPath";
Debug.JustUpdateDeviceLine();
_pthcursor = RemoteObject.createNew ("anywheresoftware.b4a.objects.B4XCanvas.B4XPath");Debug.locals.put("pthCursor", _pthcursor);
 BA.debugLineNum = 6867;BA.debugLine="If Graph.ChartType.CharAt(0) = \"H\" Then";
Debug.JustUpdateDeviceLine();
if (RemoteObject.solveBoolean("=",__ref.getField(false,"_graph" /*RemoteObject*/ ).getField(true,"ChartType" /*RemoteObject*/ ).runMethod(true,"charAt",(Object)(BA.numberCast(int.class, 0))),BA.ObjectToChar("H"))) { 
 BA.debugLineNum = 6868;BA.debugLine="rectBar.Initialize(0, Zoom.ButtonLength, Zoom.Ba";
Debug.JustUpdateDeviceLine();
_rectbar.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1))));
 BA.debugLineNum = 6869;BA.debugLine="xcvsZoomBar.DrawRect(rectBar, Zoom.ColorBar, Tru";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rectbar),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorBar" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6871;BA.debugLine="Zoom.CursorBegin = (xpnlZoomBar.Height - 2 * Zoo";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorBegin" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"),RemoteObject.createImmutable(2),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorLength" /*RemoteObject*/ )}, "-*-",2, 1)),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "-",1, 1)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "/*+",1, 0)));
 BA.debugLineNum = 6872;BA.debugLine="rectCursor.Initialize(0, Zoom.CursorBegin, Zoom.";
Debug.JustUpdateDeviceLine();
_rectcursor.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarWidth" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorLength" /*RemoteObject*/ )}, "+",1, 1))));
 BA.debugLineNum = 6873;BA.debugLine="pthCursor.InitializeRoundedRect(rectCursor, Zoom";
Debug.JustUpdateDeviceLine();
_pthcursor.runVoidMethod ("InitializeRoundedRect",(Object)(_rectcursor),(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CornerRadius" /*RemoteObject*/ ))));
 BA.debugLineNum = 6874;BA.debugLine="xcvsZoomBar.DrawPath(pthCursor, Zoom.ColorButton";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pthcursor),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButton" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6875;BA.debugLine="xcvsZoomBar.DrawPath(pthCursor, Zoom.ColorButton";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pthcursor),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 }else {
 BA.debugLineNum = 6877;BA.debugLine="rectBar.Initialize(Zoom.ButtonLength, 0, Zoom.Ba";
Debug.JustUpdateDeviceLine();
_rectbar.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "-",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 6878;BA.debugLine="xcvsZoomBar.DrawRect(rectBar, Zoom.ColorBar, Tru";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawRect",(Object)(_rectbar),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorBar" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6880;BA.debugLine="Zoom.CursorBegin = (Zoom.BarLength - 2 * Zoom.Bu";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_zoom" /*RemoteObject*/ ).setField ("CursorBegin" /*RemoteObject*/ ,BA.numberCast(int.class, RemoteObject.solve(new RemoteObject[] {(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BarLength" /*RemoteObject*/ ),RemoteObject.createImmutable(2),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorLength" /*RemoteObject*/ )}, "-*-",2, 1)),(RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_points" /*RemoteObject*/ ).runMethod(true,"getSize"),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"NbVisiblePoints" /*RemoteObject*/ )}, "-",1, 1)),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"BeginIndex" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ButtonLength" /*RemoteObject*/ )}, "/*+",1, 0)));
 BA.debugLineNum = 6881;BA.debugLine="rectCursor.Initialize(Zoom.CursorBegin, 0, Zoom.";
Debug.JustUpdateDeviceLine();
_rectcursor.runVoidMethod ("Initialize",(Object)(BA.numberCast(float.class, __ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ))),(Object)(BA.numberCast(float.class, 0)),(Object)(BA.numberCast(float.class, RemoteObject.solve(new RemoteObject[] {__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorBegin" /*RemoteObject*/ ),__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"CursorLength" /*RemoteObject*/ )}, "+",1, 1))),(Object)(BA.numberCast(float.class, __ref.getField(false,"_xpnlzoombar" /*RemoteObject*/ ).runMethod(true,"getHeight"))));
 BA.debugLineNum = 6882;BA.debugLine="pthCursor.InitializeRoundedRect(rectCursor, 3dip";
Debug.JustUpdateDeviceLine();
_pthcursor.runVoidMethod ("InitializeRoundedRect",(Object)(_rectcursor),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 3))))));
 BA.debugLineNum = 6883;BA.debugLine="xcvsZoomBar.DrawPath(pthCursor, Zoom.ColorButton";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pthcursor),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButton" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"True")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 BA.debugLineNum = 6884;BA.debugLine="xcvsZoomBar.DrawPath(pthCursor, Zoom.ColorButton";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("DrawPath",(Object)(_pthcursor),(Object)(__ref.getField(false,"_zoom" /*RemoteObject*/ ).getField(true,"ColorButtonFrame" /*RemoteObject*/ )),(Object)(xchart.__c.getField(true,"False")),(Object)(BA.numberCast(float.class, xchart.__c.runMethod(true,"DipToCurrent",(Object)(BA.numberCast(int.class, 1))))));
 };
 BA.debugLineNum = 6887;BA.debugLine="xcvsZoomBar.Invalidate";
Debug.JustUpdateDeviceLine();
__ref.getField(false,"_xcvszoombar" /*RemoteObject*/ ).runVoidMethod ("Invalidate");
 BA.debugLineNum = 6888;BA.debugLine="End Sub";
Debug.JustUpdateDeviceLine();
return RemoteObject.createImmutable("");
}
catch (Exception e) {
			throw Debug.ErrorCaught(e);
		} 
finally {
			Debug.PopSubsStack();
		}}
}